<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MetaFly</name>
    </assembly>
    <members>
        <member name="T:MetaFly.AutoWired.DynamicData.AssemblyFactory">
            <summary>
            动态解析Assembly
            </summary>
        </member>
        <member name="T:MetaFly.AutoWired.InitValue">
            <summary>
            高级初始化特性
            </summary>
        </member>
        <member name="T:MetaFly.AutoWired.Member">
            <summary>
            Member装配特性定义
            </summary>
        </member>
        <member name="M:MetaFly.AutoWired.Member.#ctor">
            <summary>
            Member装配特性
            </summary>
        </member>
        <member name="M:MetaFly.AutoWired.Member.#ctor(System.String)">
            <summary>
            Member装配特性
            </summary>
            <param name="memberPath">member级路径</param>
        </member>
        <member name="P:MetaFly.AutoWired.Member.FirstLevelPath">
            <summary>
            XPD中member路径
            </summary>
        </member>
        <member name="P:MetaFly.AutoWired.Member.SecondLevelPath">
            <summary>
            member下属性路径或者节点路径，格式： A.B.C
            </summary>
        </member>
        <member name="T:MetaFly.AutoWired.Refill">
            <summary>
            高级回填特性
            </summary>
        </member>
        <member name="M:MetaFly.AutoWired.Refill.#ctor">
            <summary>
            无参构造函数，要求XPD中member的name需与附着特性的变量名一致
            </summary>
        </member>
        <member name="M:MetaFly.AutoWired.Refill.#ctor(System.String)">
            <summary>
            回填特性
            </summary>
            <param name="itemPath">XPD路径</param>
        </member>
        <member name="P:MetaFly.AutoWired.Refill.ItemPath">
            <summary>
            XPD中被回填的member
            </summary>
        </member>
        <member name="P:MetaFly.AutoWired.Refill.ArrayIndexInit">
            <summary>
            数组初始下标
            </summary>
        </member>
        <member name="P:MetaFly.AutoWired.Refill.ArrayMaxLength">
            <summary>
            数组最大长度
            </summary>
        </member>
        <member name="P:MetaFly.AutoWired.Refill.SkipFields">
            <summary>
            需忽略掉的成员变量
            </summary>
        </member>
        <member name="P:MetaFly.AutoWired.Refill.AllRefill">
            <summary>
            指示所修饰的变量全部按名称匹配装配到XPD
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ExportFunc">
            <summary>
            用于导入Func到MF
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ExportFunc.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="funcName"></param>
        </member>
        <member name="M:MetaFly.Interpreter.ExportFunc.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="funcName"></param>
            <param name="isSingleMode"></param>
        </member>
        <member name="P:MetaFly.Interpreter.ExportFunc.FuncName">
            <summary>
            函数名
            </summary>
        </member>
        <member name="P:MetaFly.Interpreter.ExportFunc.IsSingleMode">
            <summary>
            是否为单列模式
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.IsEqualFunction">
            <summary>
            error? isequal(p:p1,p:p2)
            字符串值相等判断，相等则继续运行，否则报错
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.MultiChildIgnoreCase">
            <summary>
            
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MultiChildIgnoreCase.Create">
            <summary>
            创建MultiChildFunction对象，用于函数注册
            </summary>
            <returns>返回MultiChildFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.AreHexInRangeFunction">
            <summary>
            _list? arehexinrange(p:listsource,p:range)
            批量十六进制范围校验,都在范围内则返回listsource,否则报错
            listsource ：数据源， listdata型， 格式： member:A.B.C  A.B为节点名，C为节点中子节点名，C不可在分割子节点
            range ：指定范围， string型， 格式：[E,F],[,) 或者离散值 A B C
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.CheckInRangeFunction">
            <summary>
            _string? checkinrange(p:value,p:rangge)
            校验value是否在range指定的范围内,在，则返回value，否则报错
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.EqualStrIgnoreCaseFunction">
            <summary>
            _bool equalstrignorecase(p:str1,p:str2)
            忽略大小写比较两个字符串是否相等
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.OpenStreamFunction">
            <summary>
            streamdata openstream(p:filePath,p:isBigEndian)
            打开二进制流文件
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ComplexFunction.ArithesFunction.ConvToBaseFunction">
            <summary>
            _string convtobase(p:source, p:frombase, p:tobase)
            将指定进制为frombase的source转换为指定进制tobase的等效值
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ComplexFunction.AddRangeFuntion">
            <summary>
            array addrange(s:sourcearray,m...:items)
            批量添加元素。将items添加到sourcearray
            items：可多选，需满足与sourcearray同结构
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ComplexFunction.NewArrayFunction">
            <summary>
            array newarray(l?:length, m...:items)
            定义一个长度为length的ArrayItem，并以items对array进行填充
            length：可缺省，缺省时为items的个数
            array的缺省值，可由default定义，若未定义default则由第一个member的value决定   
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ComplexFunction.NewArrayFunction.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ComplexFunction.NewArrayFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            ArrayItem的创建类，与elelist不同的是：该函数创建一个ArrayItem并对数组项进行赋值，同时也可对默认值模板进行赋值；而elelist仅对定长为len的数组进行默认值模板填充
            需要注意的是：若要定义默认值模板，需定义在最前面
            </summary>
            <param name="paraminfo"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.ComplexFunction.NewArrayFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证len素和member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ComplexFunction.NewArrayFunction.Create">
            <summary>
            注册函数
            </summary>
            <returns>函数实例</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ComplexFunction.TransformTermItemFunction">
            <summary>
            待完善
            遍历TermItem,并执行相应的操作
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ComplexFunction.TransformTermItemFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，根据要求转换列表中的每个元素并组成新的列表返回。
            source参数：List类型，需要转换的列表
            member参数：SimpleItem类型，转换后的数据定义
            返回值：List类型。
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ComplexFunction.TransformTermItemFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证source子元素和member子元素。
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ComplexFunction.TransformTermItemFunction.Create">
            <summary>
            创建TransformFunction对象，用于函数注册
            </summary>
            <returns>返回TransformFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.AppendSetObjctFunction">
            <summary>
            array appendsetobject(s:sourcearray, i?:index, m:xpd)
            ArrayItem数据的赋值函数，返回追加元素后的sourcearray。用于解决ArrayItem数据的动态扩容追加问题,不检查xpd返回值与sourcearray是否匹配
            功能：在source指定位置（index）上填充特定数据（member）
            必备标签：
            sourcearray:目标数据源
            xpd:所追加数据    
            可选标签：
            index: 追加数据索引。当标签缺失时，默认在source最末端追加数据。
            当标签存在且index值为空时，默认在source最末端追加数据
            当标签存在且index值小于source的本身长度时，则将source位于index位置的数据设置为member值
            当标签存在且index值大于source的本身长度时，则将source的长度设置为index + 1，并将index位置上的值设置为member值 
            PS:本函数采用涉及数据为引用类型，函数返回值为BoolData类型，用于指示数据设置是否成功。因此本函数最好与oper配合使用    
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AppendSetObjctFunction.Create">
            <summary>
            创建AppendSetFunction对象，用于函数注册
            </summary>
            <returns>返回AppendSetFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ChildWithRangeCheckFunction">
            <summary>
            _list childwithrangecheck(p:entrysource,p:path,p:range)
            取值函数，从entrysource中取path子节点，若所取值全部在range范围内则返回所取结果，否则报错
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.AreIpIegalFunction">
            <summary>
            _list? areiplegal(p:sourcelist)
            判断一组IP地址(sourcelist)是否都合法，不合法报错，合法则返回sourcelist
            合法IP需要满足A.B.C.D格式，且属于[0,255]范围
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.AreInRangeFunction">
            <summary>
            _list? areinrange(p:listsource,p:range)
            批量范围校验,都在范围内则返回listsource,否则报错
            listsource ：数据源， listdata型， 格式： member:A.B.C  A.B为节点名，C为节点中子节点名，C不可在分割子节点
            range ：指定范围， string型， 格式：[E,F],[,) 或者离散值 A B C
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.LongXORFunction">
            <summary>
            _long longxor(p:p1,p:p2)
            异或函数。p1 ^ p2
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.LoadINIToCompoundItem">
            <summary>
            compound loadinitocompound(p:filepath,p?:sectionpath)
            加载ini文件到CompoundItem
            sectionpath：可空，为空表示加载所有扇区
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.LoadToEntryFunction">
            <summary>
            entry load2entry(p:filepath)
            加载指定文件（filepath）到EntryData。
            支持par、xml、ini文件的加载
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.LoadTxt2CompoundFunction">
            <summary>
            compound loadtxt2compound(p:filepath)
            加载键值对形式的TXT文档数据到CompoundItem
            文本需要满足key value格式。例如:aaa  123
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.CommonTask">
            <summary>
            通用任务，支持Member,Alias,InitValue,Refill特性
            XPD调用方法： <task value="taskname"/>
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CommonTask.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="F:MetaFly.Interpreter.CommonTask.order">
            <summary>
            编排当前Task执行顺序
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CommonTask.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写原型函数的Calc，解析handler的param列表到
            </summary>
            <param name="paraminfo"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Interpreter.ContainInFunction">
            <summary>
            error? containin(p:externalkey,p:primarykey)
            校验externalkey是否都属于primarykey的范围，有不在范围内值，则报错
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ChildWithUniqueCheckFunction">
            <summary>
            _list? childwithuniquecheck(p:entrysource,p:path)
            检查entrysource中path指定的数据是否唯一，不唯一则报错,否则返回path指定的数据
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.CheckListContainEmptyFunction">
            <summary>
            _list? checklistcontainempty(p:sourcelist)
            检测sourcelist是否有元素为空，有则报错，否则返回sourcelist
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.IsIpIegalFunction">
            <summary>
            _string? isiplegal(p:ipAddress)
            校验给定Ip地址是否合法,ip格式A.B.C.D,范围为[0,255]
            合法则返回该ip地址，否则报错
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ChildInRangeFunction">
            <summary>
            _list? childinrange(p:entrysource,p:path,p:range)
            取值函数，从entrysource中取path指定节点值，校验所取值的个数是否在range指定的范围内，通过校验则返回所取值，否则报错
            entrysource：输入源
            path：子节点路径
            range:校验个数返回，使用‘~’分割
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.AddOrReplaceItemToCompoundFunction">
            <summary>
            compound addorreplaceitemtocompound(s:sourcecompound,m:additem)
            添加元素additem到指定的sourcecompound中，如果该元素已存在，则替换现有值   
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.GroupByArrayFunction">
            <summary>
            compound groupby(p:sourcearray,p:keySelector,p?:selectItemPath)
            ArrayItem按条件分组
            sourcearray: 杯分组的源，ArrayItem
            keySelector: 分组依据，StringData
            selectItemPath: 分组中帅选字段。可缺省，缺省时选择整个组元素
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ConditionValueFunction">
            <summary>
            item condvalue(p:sourcearray,p:condition)
            查找sourcearray中满足condition的值
            condition:查找的条件，格式：路径值=指定值，比如A.B=5，即查找源中A下的B等于5的元素，返回A元素；也可配合{}使用，A.B={member:XXX}
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ConditionValueFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            param1:被查找的源，ArrayItem类型
            param2：查找的条件，格式：路径值=指定值，比如A.B=5，即查找源中A下的B等于5的元素，返回A元素；也可配合{}使用，A.B={member:XXX}
            返回满足查找条件的元素
            </summary>
            <param name="paraminfo"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Interpreter.ConditionValueWhithFirstFunction">
            <summary>
            item condvaluewithfirst(p:sourcearray,p:condition)
            根据条件查找元素，返回sourcearray中满足condition的第一个值
            condition:条件，格式：A=B
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ProcessFunction">
            <summary>
            void process(p:fileName,p:args)
            进程函数。开启一个进程执行filename指定的执行文件，args为执行文件的main输入参数   
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.DecconvFunction">
            <summary>
            _long decconv(p:value,p:fromBase,p?:isCheckPrefix)
            将指定基数的数字的字符串表示形式转换为等效的 64 位有符号整数
            formBase:value 中数字的基数，它必须是 2、8、10 或 16。
            isCheckPrefix:是否检查value的前缀格式。可缺省，缺省时，不检查
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DecconvFunction.#ctor">
            <summary>
            构造函数，定义函数名称为dec
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DecconvFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，完成了其他进值数值的十进制转化.
            第一个参数:String类型，可转化为数值的字符串
            第二个参数:Long类型，数值的进制，取值范围:2，8，10，16
            第三个参数：Bool类型，指定是否检查非十进制值（参数一）是否含有正确的前缀。可缺省，缺省时默认不检查
            返回值:Long类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.DecconvFunction.Create">
            <summary>
            创建DecconFunction对象，用于函数注册
            </summary>
            <returns>返回DecconFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.ForeachAppendFunction">
            <summary>
            array foreachappend(s:sourcelist,q?:qualification,ii?:initindex,i?:index,f?:filter,m:xpd)
            循环函数,遍历sourcelist生成以AppendSet的方式生成array
            sourcelist：操作的数据源，由alias索引
            qualification：一次性条件条件，此处使用sourcelist中的alias索引，alias索引的是整个sourcelist，而非其遍历时的子元素。可空
            initindex：array下标初始值。可空
            index:下标更新条件。array第一个元素下标，由此更新条件计算得出。可空
            filter：源数据过滤条件，当返回TRUE时执行xpd，否则continue循环
            xpd：array元素生成规则
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.LamdaFunction">
            <summary>
            Lamda表达式类。
            说明：类似于C#委托函数的定义，允许在xml规则配置中使用funcref指向当前表达式
            </summary>
        </member>
        <member name="F:MetaFly.Interpreter.LamdaFunction.ParamInf">
            <summary>
            当前表达式绑定的xml定义代理
            </summary>
        </member>
        <member name="F:MetaFly.Interpreter.LamdaFunction.count">
            <summary>
            当前表达式计数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LamdaFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            执行Lamda表达式。当函数指针funcref真正被调用时执行
            </summary>
            <param name="paraminfo"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Interpreter.IsInRangeFunction">
            <summary>
            _bool isinrange(p:value,p:range)
            范围检查函数，检查p1是否在p2规则的范围内
            value：double类型
            range ： 需满足 (/[左边界值，右边界值)/]的格式，例如，（3,4.5] 或者离散值 A B C
            返回值： 在范围内返回TRUE，否则返回FALSE
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.EqualsFunction">
            <summary>
            _bool equals(p:strVal1,p...:strVals)
            不限参数个数字符串等判断
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EqualsFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证解释定义函数
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ForFunction">
            <summary>
            array for(s:sourcearray,ii?:index_init,q:qualification,i?:index,f?:fliter,m:xpd)
            for函数，用于遍历ArrayItem源   
            sourcearray：ArrayItem类型，被遍历源
            index_init:for循环中，第一个参数i的初始值，该值首先会执行qualification. 标签缺省时，i初始值设0
            qualification：for循环中的第二个条件判断参数，判断循环是否中断
            index：for循环中的第三个参数，更新i，标签缺省时，i++
            xpd：输出的数组元素
            filter：当前遍历项的筛选条件
            log：日志输出，计算完成后执行
            PS：对于ListData类型的源，暂时无for遍历的需求
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ForFunction.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ForFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            for(int index = 初始值；     中断条件； 更新index）
                    index_init    ;qualification; index
            </summary>
            <param name="paraminfo"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.ForFunction.UpdateIndex(System.Int64@,MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            更新for中的i值
            </summary>
            <param name="indexparam"></param>
            <param name="rtinfo"></param>
        </member>
        <member name="M:MetaFly.Interpreter.ForFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了EleListFunction的Verify函数，验证source,qualification,len,index_init,index,member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ForFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            计算输出数据的缺省值
            </summary>
            <param name="paraminfo"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.ForFunction.Create">
            <summary>
            挂载ForFunction到上下文
            </summary>
            <returns></returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ConditionValueWithLastFunction">
            <summary>
            item condvaluewithlast(p:sourcearray,p:condition)
            根据条件查找元素，返回sourcearray中满足condition的最后一个值
            condition:条件，格式：A=B
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.GetCurrentDirectoryFunction">
            <summary>
            _string curdirectory()
            获取当前程序运行文件夹
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.MetaDataToBinFunction">
            <summary>
            binout newbinwriter(p:filepath,p:bigendian)
            创建MetaData的二进制输出器
            filepath:流文件路径
            bigendian:大小端，大端TRUE，小端FALSE
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.BinOutFunction">
            <summary>
            void binout(p:P1,p:P2,p:P3,p:P4)
            二进制流输出
            P1： 指定二进制流输出器BinoutData
            P2： 指定输出数据MetaData
            P3： 指定输出数据转化类型，允许出现string、byte、long、double
            P4： 指定输出数据占字节长度
            完成输出后需要手动调用dispose函数，关闭P1
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.PowFunction">
            <summary>
            _double pow(p:p1,p:p2)
            幂运算 p1^p2
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.LogTimeFunction">
            <summary>
            logtime(p:logstr)
            运行时间戳函数，显示两个时间戳之间的运行时间
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ToByteArrayFunction">
            <summary>
            array tobytes(p:source, p:srcEncoding, l?:len)
            将source值转化成byte数组并返回，若指定len，数组长为len，不足以0填充，若不指定len则以source占用字节数为len
            source：被转化数据
            srcEncoding：编码格式
            len：指定输出byte数组长度，可空
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ToByteArrayFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证param子元素、len子元素。
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ToUpperFunction">
            <summary>
            _string toupper(p:str)
            字符串转大写
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.DisposeFunction">
            <summary>
            void dispose(p:source)
            二进制流关闭函数，目前支持BinoutData
            source:BinoutData类型
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ClearArrayFunction">
            <summary>
            array cleararray(p:toBeClearArray)
            清空toBeClearArray，长度归零，内容清空，返回被清空后的toBeClearArray
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.SplitForeachFunction">
            <summary>
            循环拆分函数
            无参函数，继承自EleListFunction
            <code>
            <member name="SFM_CON" value="func:splitforeach">
             <source value="member:RSSP1_SET" alias="self"/>
             <qualification value="true"/>
             <split value="|"/>  按照拆分符拆分source中的每一项
             <member value="func:iter">
               <member name="FSFB_comm_cycle" value="func:next(alias:self,REMOTE_EQUIPMENT_CYCLE)"/>
               <member name="dest_addr" value="func:next(alias:self,REMOTE_APPLICATION_ADDRESS)" />
               <member name="deltaTime1" value="func:next(alias:self,MAX_MISSING_MESSAGES)"/>
               <member name="deltaTime2" value="0" />
               <member name="lifeTime" value="func:next(alias:self,MAX_RESPONSE_DELAY)" />
               <member name="torlerate_cycle" value="0" />
               <member name="num_data_ver" value="1" />
               <member name="remote_sid_A" value="func:next(alias:self,REMOTE_SID_NUMBER_A)" />
               <member name="remote_sinit_A" value="func:next(alias:self,REMOTE_SINIT_NUMBER_A)" />
               <member name="remote_dataVer_A" value="func:next(alias:self,REMOTE_DATAVER_NUMBER_A)" />
               <member name="remote_sid_B" value="func:next(alias:self,REMOTE_SID_NUMBER_B)" />
               <member name="remote_sinit_B" value="func:next(alias:self,REMOTE_SINIT_NUMBER_B)" />
               <member name="remote_dataVer_B" value="func:next(alias:self,REMOTE_DATAVER_NUMBER_B)" />
               <member name="enable_UDP_chn_FSFB" value="0"/>
               <member name="Chn_apply_FSFB_ID" value="0"/>
               <member name="con_L2U_Q_size" value="0"/>
             </member>；
            </member>
            </code>
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SplitForeachFunction.#ctor">
            <summary>
            构造函数，定义函数名称为foreach
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SplitForeachFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写了EleListFunction的Calc函数，循环函数
            source参数:List类型，循环操作的数据，通常要定义为alias
               注：如果source存在空元素，解析过程将终止。
            qualification参数:布尔类型，操作数据合法性检查，如果计算结果是false，解析过程将终止。
            len参数：Long类型，继承自EleListFunction，解释定义是member元素:定义数组的长度；oper:无意义
            index_init参数:无要求，循环初始设置定义，通常要定义为alias，在循环开始前进行
            index参数:Long类型，循环下标递增规则定义，通常要定义为alias，在每次循环开始前进行
               注意：在第一次循环前就执行一次。
            filter参数对对遍历source中的每一项进行筛选，filter返回true则执行member操作，filter返回false则跳过当前的遍历项
            member参数：定义了数组结构，只能定义一个但是其可用iter或elelist定义
            返回值:如果是member元素返回Array，否则返回sucess;
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SplitForeachFunction.CalcSibling(MetaFly.Datum.Figure.ListData,System.Int64,System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent},MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            处理Sibling数据
            </summary>
            <param name="listdata">source列表</param>
            <param name="curindex">当前索引</param>
            <param name="siblingparamlist">Sibling列表</param>
            <param name="rtinfo">运行环境</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SplitForeachFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了EleListFunction的Verify函数，验证source,qualification,len,index_init,index,member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SplitForeachFunction.Create">
            <summary>
            创建ForeachFunction对象，用于函数注册
            </summary>
            <returns>返回ForeachFunction</returns>        
        </member>
        <!-- Badly formed XML comment ignored for member "T:MetaFly.Interpreter.TaskHandler" -->
        <member name="M:MetaFly.Interpreter.TaskHandler.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:MetaFly.Interpreter.TaskHandler.DataCanBeShared">
            <summary>
            当前数据处理数据是否可在子类中共享
            </summary>
        </member>
        <member name="F:MetaFly.Interpreter.TaskHandler.subclassSharingData">
            <summary>
            存储子类中共享数据
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.FillDataToSharingSet">
            <summary>
            当中间数据需要在TaskHander子类之间传递时，需要重写该方法，将中间数据压入subclassSharingData集合中
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.AddToSharingData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            将指定名字的handlingData添加到到共享数据集
            </summary>
            <param name="handingDataNames">需添加的数据Keys集合</param>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.AddToSharingData(System.String,System.Object)">
            <summary>
            添加单元素到共享数据集
            </summary>
            <param name="name">数据名字</param>
            <param name="value">数据值</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.TaskHandler.AddToSharingData(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" -->
        <member name="M:MetaFly.Interpreter.TaskHandler.GetSharingData(System.String)">
            <summary>
            获取指定name的共享数据，不存在则返回NullData
            </summary>
            <param name="name">获取数据名称</param>
            <returns>数据值</returns>
        </member>
        <member name="P:MetaFly.Interpreter.TaskHandler.IsFillBackable">
            <summary>
            是否需要回填DoTask结果，设置为True时，需要重写FillBack函数
            </summary>
        </member>
        <member name="F:MetaFly.Interpreter.TaskHandler.resultItem">
            <summary>
            保存被回填的模板值，解析至result标签
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.DoTask">
            <summary>
            任务处理
            PS:任务间需要数据要共享，可通过ParseRunTimeInfo的middleDataDic实现，该字典的操作接口有：AddMiddleData、GetMiddleData、RemoveMiddleData
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.FillBack">
            <summary>
            处理结果回填,需将回填结果压入FunctionResult返回
            </summary>
        </member>
        <member name="F:MetaFly.Interpreter.TaskHandler.handlingData">
            <summary>
            当前handler处理的数据，解析至member参数列表
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写原型函数的Calc，解析handler的param列表到
            </summary>
            <param name="paraminfo"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            默认值计算
            </summary>
            <param name="paraminfo"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.InitHandlingData(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            解析handler函数variable参数，初始化handlingData
            </summary>
            <param name="paraminfo">参数配置</param>
            <param name="rtinfo">上下文</param>
            <returns>初始化结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证参数合法性
            </summary>
            <param name="paraminfolist">参数列表</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.ExportFinalToBin(System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem,System.Boolean)">
            <summary>
            二进制输出final配置
            </summary>
            <param name="outputFilePath">输出文件全URI</param>
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>
            <param name="isBigEndian">是否按大端输出</param>
            <returns>是否输出成功</returns>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.ExportFinalToBinByFileMode(System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem,System.IO.FileMode,System.Boolean)">
            <summary>
            二进制输出final配置,可选输出文件打开模式
            </summary>
            <param name="outputFilePath">输出文件全URI</param>
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>
            <param name="mode">输出文件打开方式</param>
            <param name="isBigEndian">是否按大端输出</param>
            <returns>是否输出成功</returns>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.ExportFinalToTxt(System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem)">
            <summary>
            文本输出final配置
            </summary>
            <param name="outputFilePath">输出文件全URI</param>
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>       
            <returns>是否输出成功</returns>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.ExortFinalToXml(System.String,System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem)">
            <summary>
            XML文本输出final配置
            </summary>
            <param name="outputFilePath">输出文件名</param>       
            <param name="rootNodeName">输出XML根节点名</param>
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>       
            <returns>是否输出成功</returns>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.ExportFinalToIni(System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem,System.String,System.Boolean)">
            <summary>
            Ini文本输出final配置
            </summary>
            <param name="outputFilePath">输出文件名</param>
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>
            <param name="fileName">final配置文件名</param>
            <param name="isUseStreamWriter">是否使用StreamWriter</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.TaskHandler.ToString">
            <summary>
            重写TosString
            </summary>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Interpreter.WipeFunction">
            <summary>
            array wipe(p:sourceArray)
            擦除指定ArrayItem中的数据，不改变数组的长度
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ToLowerFunction">
            <summary>
            _string tolower(p:str)
            字符串转小写
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.AddFunction">
            <summary>
            _double add(p:p1,p:p2)
            二元算数加法
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddFunction.#ctor">
            <summary>
            构造函数，定义函数名称为add
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddFunction.CalcValue(System.Double,System.Double)">
            <summary>
            实现类ArithBinaryFunction的calcValue函数，计算两个参数的算术和
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AddFunction.Create">
            <summary>
            创建AddFunction对象，用于函数注册
            </summary>
            <returns>返回AddFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ArithBinaryFunction">
            <summary>
            二元算术运算抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            继承自BinaryFunction
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ArithBinaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.ArithBinaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，完成了算术运算并返回结果.
            第一个参数:Double类型
            第二个参数:Double类型
            返回值:Double类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ArithBinaryFunction.CalcValue(System.Double,System.Double)">
            <summary>
            抽象函数，子类用以实现计算过程
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MetaFly.Interpreter.BitandFunction" -->
        <member name="M:MetaFly.Interpreter.BitandFunction.#ctor">
            <summary>
            构造函数，定义函数名称为bitor
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BitandFunction.calcValue(System.Int64,System.Int64)">
            <summary>
            实现类BitBinaryFunction的calcValue函数，计算两个参数的位与
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BitandFunction.Create">
            <summary>
            创建BitorFunction对象，用于函数注册
            </summary>
            <returns>返回AddFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.BitBinaryFunction">
            <summary>
            二元位运算抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            继承自BinaryFunction
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BitBinaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.BitBinaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，完成了算术运算并返回结果.
            第一个参数:Long类型
            第二个参数:Long类型
            返回值:Long类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BitBinaryFunction.calcValue(System.Int64,System.Int64)">
            <summary>
            抽象函数，子类用以实现计算过程
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.BitleftFunction">
            <summary>
            _long bitleft(p:p1,p:p2)
            位左移函数, p1 左移 p2 位
            p2属于[1, 63]范围
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BitleftFunction.#ctor">
            <summary>
            构造函数，定义函数名称为bitor
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BitleftFunction.calcValue(System.Int64,System.Int64)">
            <summary>
            实现类BitBinaryFunction的calcValue函数，计算两个参数的位与
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BitleftFunction.Create">
            <summary>
            创建BitorFunction对象，用于函数注册
            </summary>
            <returns>返回AddFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.BitorFunction">
            <summary>
            _long bitor(p:p1,p:p2)
            位或函数, p1 | p2
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BitorFunction.#ctor">
            <summary>
            构造函数，定义函数名称为bitor
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BitorFunction.calcValue(System.Int64,System.Int64)">
            <summary>
            实现类BitBinaryFunction的calcValue函数，计算两个参数的位或
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BitorFunction.Create">
            <summary>
            创建BitorFunction对象，用于函数注册
            </summary>
            <returns>返回AddFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.DivFunction">
            <summary>
            _double div(p:p1,p:p2)
            二元算术除法 p1/p2
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DivFunction.#ctor">
            <summary>
            构造函数，定义函数名称为div
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DivFunction.CalcValue(System.Double,System.Double)">
            <summary>
            实现类ArithBinaryFunction的calcValue函数，计算两个参数的算术商
            检测除零错误
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.DivFunction.Create">
            <summary>
            创建DivFunction对象，用于函数注册
            </summary>
            <returns>返回DivFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ModFunction">
            <summary>
            _double mod(p:p1,p:p2)
            取模运算 p1%p2
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ModFunction.#ctor">
            <summary>
            构造函数，定义函数名称为mod
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ModFunction.CalcValue(System.Double,System.Double)">
            <summary>
            实现类ArithBinaryFunction的calcValue函数，计算取余
            检测除零错误
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ModFunction.Create">
            <summary>
            创建ModFunction对象，用于函数注册
            </summary>
            <returns>返回ModFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.MulFunction">
            <summary>
            _double mul(p:p1,p:p2)
            二元算术乘法
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MulFunction.#ctor">
            <summary>
            构造函数，定义函数名称为mul
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MulFunction.CalcValue(System.Double,System.Double)">
            <summary>
            实现类ArithBinaryFunction的calcValue函数，计算两个参数的算术积
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MulFunction.Create">
            <summary>
            创建MulFunction对象，用于函数注册
            </summary>
            <returns>返回MulFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.SubFunction">
            <summary>
            _double sub(p:p1,p:p2)
            二元算术减法，p1-p2
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SubFunction.#ctor">
            <summary>
            构造函数，定义函数名称为sub
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SubFunction.CalcValue(System.Double,System.Double)">
            <summary>
            实现类ArithBinaryFunction的calcValue函数，计算两个参数的算术差
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SubFunction.Create">
            <summary>
            创建SubFunction对象，用于函数注册
            </summary>
            <returns>返回SubFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.BinaryFunction">
            <summary>
            二元函数抽象类
            继承自PrototypeFunc
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BinaryFunction.#ctor">
            <summary>
            构造函数，明确参数个数为2个
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.BitrightFunction">
            <summary>
            _long bitright(p:p1,p:p2)
            位右移函数, p1 右移 p2位 
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BitrightFunction.#ctor">
            <summary>
            构造函数，定义函数名称为bitor
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BitrightFunction.calcValue(System.Int64,System.Int64)">
            <summary>
            实现类BitBinaryFunction的calcValue函数，计算两个参数的位与
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BitrightFunction.Create">
            <summary>
            创建BitorFunction对象，用于函数注册
            </summary>
            <returns>返回AddFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.AndFunction">
            <summary>
            _bool and(p:p1,p:p2)
            逻辑与函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AndFunction.#ctor">
            <summary>
            构造函数，定义函数名称为and
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AndFunction.calcValue(System.Boolean,System.Boolean)">
            <summary>
            实现类BoolBinaryFunction的calcValue函数，计算两个参数的逻辑与
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AndFunction.Create">
            <summary>
            创建AndFunction对象，用于函数注册
            </summary>
            <returns>返回AndFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.BiggerFunction">
            <summary>
            _bool bigger(p:p1,p:p2)
            大于函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BiggerFunction.#ctor">
            <summary>
            构造函数，定义函数名称为bigger
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BiggerFunction.calcValue(System.Double,System.Double)">
            <summary>
            实现类ArithCompBinaryFunction的calcValue函数，进行比较运算
            如果第一个参数大于第二个参数，返回true，否则返回false
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BiggerFunction.Create">
            <summary>
            创建BiggerFunction对象，用于函数注册
            </summary>
            <returns>返回BiggerFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.BiggerOrEqualFunction">
            <summary>
            _bool biggerorequal(p:p1,p:p2)
            大于等于函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BiggerOrEqualFunction.#ctor">
            <summary>
            构造函数，定义函数名称为biggerorequal
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BiggerOrEqualFunction.calcValue(System.Double,System.Double)">
            <summary>
            实现类ArithCompBinaryFunction的calcValue函数，进行比较运算
            如果第一个参数大于等于第二个参数，返回true，否则返回false
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BiggerOrEqualFunction.Create">
            <summary>
            创建BiggerFunction对象，用于函数注册
            </summary>
            <returns>返回BiggerFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.BoolBinaryFunction">
            <summary>
            二元逻辑运算抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            继承自BinaryFunction
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BoolBinaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.BoolBinaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，完成了逻辑运算并返回结果.
            第一个参数:Bool类型
            第二个参数:Bool类型
            返回值:Bool类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BoolBinaryFunction.calcValue(System.Boolean,System.Boolean)">
            <summary>
            抽象函数，子类用以实现计算过程
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ArithCompBinaryFunction">
            <summary>
            二元算术比较抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ArithCompBinaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.ArithCompBinaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，完成了逻辑运算并返回结果.
            第一个参数:Double类型
            第二个参数:Double类型
            返回值:Bool类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ArithCompBinaryFunction.calcValue(System.Double,System.Double)">
            <summary>
            抽象函数，子类用以实现计算过程
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ChoiceAndFunction">
            <summary>
            _bool choiceand(p:p1,p:p2)
            选择逻辑与函数.
            p1为假时，返回p1。否则返回p2
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ChoiceAndFunction.#ctor">
            <summary>
            构造函数，定义函数名称为choiceand
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ChoiceAndFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，当第一个参数为假时返回假，否则返回第二个参数.
            第一个参数:Bool类型
            第二个参数:Bool类型
            返回值:Bool类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ChoiceAndFunction.Create">
            <summary>
            创建ChoiceAndFunction对象，用于函数注册
            </summary>
            <returns>返回ChoiceAndFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.ChoiceOrFunction">
            <summary>
            _bool choiceor(p:p1,p:p2)
            选择逻辑或函数
            p1为真时返回p1，否则返回p2
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ChoiceOrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为choiceor
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ChoiceOrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，当第一个参数为真时返回真，否则返回第二个参数.
            第一个参数:Bool类型
            第二个参数:Bool类型
            返回值:Bool类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ChoiceOrFunction.Create">
            <summary>
            创建ChoiceOrFunction对象，用于函数注册
            </summary>
            <returns>返回ChoiceOrFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.EqualFunction">
            <summary>
            _bool equal(p:p1,p:p2)
            算术等于函数  
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EqualFunction.#ctor">
            <summary>
            构造函数，定义函数名称为equal
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EqualFunction.calcValue(System.Double,System.Double)">
            <summary>
            实现类ArithCompBinaryFunction的calcValue函数，进行比较运算
            如果第一个参数等于第二个参数，返回true，否则返回false
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.EqualFunction.Create">
            <summary>
            创建EqualFunction对象，用于函数注册
            </summary>
            <returns>返回EqualFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.OrFunction">
            <summary>
            _bool or(p:p1,p:p2)
            逻辑或函数, p1 || p2
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.OrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为or
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.OrFunction.calcValue(System.Boolean,System.Boolean)">
            <summary>
            实现类BoolBinaryFunction的calcValue函数，计算两个参数的逻辑或
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.OrFunction.Create">
            <summary>
            创建OrFunction对象，用于函数注册
            </summary>
            <returns>返回OrFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.SmallerFunction">
            <summary>
            _bool smaller(p:p1,p:p2) 
            小于函数,校验p1是否小于p2
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SmallerFunction.#ctor">
            <summary>
            构造函数，定义函数名称为smaller
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SmallerFunction.calcValue(System.Double,System.Double)">
            <summary>
            实现类ArithCompBinaryFunction的calcValue函数，进行比较运算
            如果第一个参数小于第二个参数，返回true，否则返回false
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SmallerFunction.Create">
            <summary>
            创建SmallerFunction对象，用于函数注册
            </summary>
            <returns>返回SmallerFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.SmallerOrEqualFunction">
            <summary>
            _bool smallerorequal(p:p1,p:p2)
            小于等于函数，校验p1是否小于等于p2
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SmallerOrEqualFunction.#ctor">
            <summary>
            构造函数，定义函数名称为biggerorequal
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SmallerOrEqualFunction.calcValue(System.Double,System.Double)">
            <summary>
            实现类ArithCompBinaryFunction的calcValue函数，进行比较运算
            如果第一个参数小于等于第二个参数，返回true，否则返回false
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SmallerOrEqualFunction.Create">
            <summary>
            创建BiggerFunction对象，用于函数注册
            </summary>
            <returns>返回BiggerFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.XorFunction">
            <summary>
            _bool xor(p:p1,p:p2)
            逻辑或函数, p1 ^ p2
            p1、p2同属于bool型
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.XorFunction.#ctor">
            <summary>
            构造函数，定义函数名称为xor
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.XorFunction.calcValue(System.Boolean,System.Boolean)">
            <summary>
            实现类BoolBinaryFunction的calcValue函数，计算两个参数的逻辑异或
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果,相异为真，相同为假</returns>
        </member>
        <member name="M:MetaFly.Interpreter.XorFunction.Create">
            <summary>
            创建OrFunction对象，用于函数注册
            </summary>
            <returns>返回OrFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ChildOrErrorFunction">
            <summary>
            _list? childorerror(p:p1,p:p2)
            计算输入元素的子元素列表。从p1中取指定路径p2下的元素集合,若集合为空则报错
            矩阵型p1，p2支持 and or的条件筛选
            XML型p1，p2支持xpath语法
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ChildOrErrorFunction.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <summary>
            实现类NavigateBinaryFunction的calcValue函数，计算输入类型元素的子元素。与child函数不同的是：childexist函数中，若param1不存在param2路径，则报错，退出程序执行。若存在，则返回子元素
            函数调用了Entry对象的Child的函数
            是否支持XPath、剔除重复项取决于Entry对象的Child函数具体实现
            返回值:如果存在指定名称的子元素，返回按实际顺序存储的子元素的List，否则返回空的List
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ChildFunction">
            <summary>
            _list child(p:p1,p:p2)
            计算输入元素的子元素列表。从p1中取指定路径p2下的元素集合
            矩阵型p1，p2支持 and or的条件筛选
            XML型p1，p2支持xpath语法
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ChildFunction.#ctor">
            <summary>
            构造函数，定义函数名称为child
            <example>
            输入sgdfile数据：
            从param1中取出param2路径下的内容列表
            <ZC_area>
             <Id>1</Id>
             <Version>3</Version>
             <LC_id>1</LC_id>
             <Block>
               <Id>1</Id>
               <Length>25.060000</Length>
             </Block>
             <Block>
               <Id>2</Id>    
             </Block>
            </ZC_area>
            
            <code>
            <member value="func:child">
                <param value="input.sgdfile"/>
                <param value="ZC_area/Block"/> or <param value="ZC_area/Block/Id"/> or <param value="ZC_area/Block/Length"/> or <param value="ZC_area/Block/Name"/>
            </member>
            </code>
            <output>
            case ZC_area/Block:
            返回Block标签下的内容组成的List。既：{(<Id></Id>,<Length></Length>), (<Id></Id>)}
            case ZC_area/Block/Id:
            返回Id下的内容列表 {1， 2} 
            case ZC_area/Block/Length:
            返回 {25.060000}
            case ZC_area/Block/Name:
            返回 空列表
            </output>
            </example>
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ChildFunction.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <summary>
            实现类NavigateBinaryFunction的calcValue函数，计算输入类型元素的子元素
            函数调用了Entry对象的Child的函数
            是否支持XPath、剔除重复项取决于Entry对象的Child函数具体实现
            返回值:如果存在指定名称的子元素，返回按实际顺序存储的子元素的List，否则返回空的List
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ChildFunction.Create">
            <summary>
            创建ChildFunction对象，用于函数注册
            </summary>
            <returns>返回ChildFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.AttributeFunction">
            <summary>
            _string attribute(p:p1,p:p2)
            取属性函数，返回p1中指定属性名p2的值
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AttributeFunction.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <example>
            操作数据：<A name="AA" path="BB"/>
            <code>
            <variable name="test" value="func:attribute">
             <param value="func:child">
               <param value="member:input.sgdfile"/>
               <param value="ZC_area.A"/>
             </param>
             <param value="name"/>
            </variable>
            <oper value="func:print(member:test)"/>
            </code>
            <output>
            AA
            </output>
            </example>
            <summary>
            获取当前标签的属性值
            </summary>
            <param name="param1">当前标签</param>
            <param name="param2">属性名</param>
            <returns>标签存在属性名，则返回属性值，否则返回空StringData</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ContainFunction">
            <summary>
            _bool contain(p:p1,p:p2)
            计算输入元素的子元素是否存在    
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ContainFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            <code>
            <oper value="func:print">
             <param value="func:contain(member:input.nvsxmlfile,Version)"/>
            </oper>
            <oper value="func:pause"/>
            </code>
            <output>
            TRUE
            </output>
            </summary>
            <param name="paraminfo"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.ContainFunction.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <summary>
            实现类NavigateBinaryFunction的calcValue函数，计算输入类型元素的子元素是否存在
            函数调用了Entry对象的Child的函数
            是否支持XPath、剔除重复项取决于Entry对象的Child函数具体实现
            返回值:如果存在指定名称的子元素，返回TRUE,否则返回FALSE
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ContainFunction.Create">
            <summary>
            创建ContainFunction对象，用于函数注册
            </summary>
            <returns>返回ContainFunction</returns>      
        </member>
        <member name="T:MetaFly.Interpreter.MultiChildFunction">
            <summary>
            _list multichild(p:source,p:path)
            以复合方式(相对于ChildFunction)计算输入元素的子元素
            复合方式是指同时返回多个路径下的数据（多条路径一般以';'间隔，取决于Entry对象的Child函数实现），每个数据独立存储在列表中
            对于XML型source，取属性时需使用@。例如：ZC_area.A.@name
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MultiChildFunction.#ctor">
            <summary>
            构造函数，定义函数名称为multichild
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MultiChildFunction.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <summary>
            实现类NavigateBinaryFunction的calcValue函数，以复合方式计算输入类型元素的子元素
            函数调用了Entry对象的Child的函数
            是否支持本函数取决于Entry对象的Child函数具体实现
            返回值:List类型，如果存在指定名称的子元素，返回按实际顺序存储的子元素的List，否则返回空的List
            复合方式是指同时返回多个路径下的数据（多条路径一般以';'间隔，取决于Entry对象的Child函数实现），每个数据独立存储在列表中
            <example>
            可获取属性值，取属性值时，param2需以(路径.@属性名）格式书写
            操作数据：<ZC_area>  <A name = "AA" path="BB"/> </ZC_area>
            <code>
            <variable name="test" value="func:multichild">
             <param value="member:input.sgdfile"/>
             <param value="ZC_area.A.@name"/>
            </variable>
            <oper value="func:print(member:test)"/>
            </code>
            <output>
            name="AA"
            </output>
            </example>
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MultiChildFunction.Create">
            <summary>
            创建MultiChildFunction对象，用于函数注册
            </summary>
            <returns>返回MultiChildFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.EntryBinaryFunction">
            <summary>
            二元输入数据操作抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EntryBinaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.EntryBinaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，完成了逻辑运算并返回结果.
            第一个参数:Entry类型
            第二个参数:String类型
            返回值:由具体函数实现
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.EntryBinaryFunction.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <summary>
            抽象函数，子类用以实现相应操作
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.NavigateBinaryFunction">
            <summary>
            输入数据巡航操作抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.NavigateBinaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.NavigateBinaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，完成了逻辑运算并返回结果.
            第一个参数:Entry类型
            第二个参数:String类型
            返回值:由具体函数实现
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.NavigateBinaryFunction.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <summary>
            抽象函数，子类用以实现巡航过程
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.NextFunction">
            <summary>
            entry? next(p:source,p?:path)
            计算输入元素同级的下一个指定元素（path），向后查询
            对于矩阵型source，path指定同一张表中列名，返回后向查找到的列
            对于XML型source，path指定同级的属性名或者标签名，返回第一个查找到的元素
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.NextFunction.#ctor">
            <summary>
            构造函数，定义函数名称为next
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.NextFunction.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <summary>
            实现类NavigateBinaryFunction的calcValue函数，以计算输入元素的下个元素
            函数调用了Entry对象的Next的函数
            返回值:Entry类型，如果存在指定名称的元素则返回，否则返回空Entry
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.PrevFuncion">
            <summary>
            entry? prev(p:source,p:path)
            计算输入元素的上一个个元素，前向查找
            对于矩阵型source，path指定同一张表中列名，返回前向查找到的列
            对于XML型source，path指定同级的属性名或者标签名，返回前向查找到第一个查找到的元素
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PrevFuncion.#ctor">
            <summary>
            构造函数，定义函数名称为prev
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PrevFuncion.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <summary>
            实现类NavigateBinaryFunction的calcValue函数，以计算输入元素的下个元素
            函数调用了Entry对象的Next的函数
            返回值:如果存在指定名称的元素则返回Entry，否则返回空Entry
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ValidateFunction">
            <summary>
            _bool validate(p:entry,p:rule)
            验证函数，校验entry是否满足rule规则
            对于矩阵型entry，rule为为表头信息，校验entry的表头是否与rule规定一致
            对于XML型entry，预留，未实现，返回true
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ValidateFunction.#ctor">
            <summary>
            构造函数，定义函数名称为validate
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ValidateFunction.calcValue(MetaFly.Datum.Figure.EntryData,System.String)">
            <summary>
            实现类NavigateBinaryFunction的calcValue函数，以计算输入元素的下个元素
            函数调用了Entry对象的Validate的函数，具体验证由Entry对象类实现
            返回值:如果通过验证返回true，否则返回false;
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.AddItemFunction">
            <summary>
            void additem(p:list,p:item)
            将数据(item)添加到列表(list)中
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddItemFunction.#ctor">
            <summary>
            构造函数，定义函数名称为additem
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddItemFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，将数据添加到列表中
            本函数不判断列表中是否已经存在要添加的数据，且不创建新的列表
            第一个参数:List类型
            第二个参数:Meta类型
            返回值:成功返回sucecess，否则返回fail，本函数不返回任何有效数据
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AddItemFunction.Create">
            <summary>
            创建AddItemFunction对象，用于函数注册
            </summary>
            <returns>返回AddItemFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.AddListFunction">
            <summary>
            _list addlist(p:list1,p:list2)
            列表合并操作，合并结果存入一个新的list并返回
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddListFunction.#ctor">
            <summary>
            构造函数，定义函数名称为addlist
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddListFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，将2个列表组合成一个新的列表
            本函数对新列表不进行剔除重复项操作。
            第一个参数:List类型
            第二个参数:List类型
            返回值:List类型，新的List
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AddListFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AddListFunction.Create">
            <summary>
            创建AddListFunction对象，用于函数注册
            </summary>
            <returns>返回AddListFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.AssignFunction">
            <summary>
            item assign(p:target,p:source)
            赋值函数，将source的值赋给target，并返回target。
            注意：赋值操作为引用传递
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AssignFunction.#ctor">
            <summary>
            构造函数，定义函数名称为assign
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.AssignFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.AssignFunction.Create">
            <summary>
            创建AssignFunction对象，用于函数注册
            </summary>
            <returns>返回AssignFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.CalNETFunction">
            <summary>
            _string calnet(p:ip,p:mask)
            根据ip、mask计算子网，返回子网值
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CalNETFunction.#ctor">
            <summary>
            构造函数，定义函数名称为calnet
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CalNETFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，根据ip和mask计算子网
            第一个参数:String类型
            第二个参数:String类型
            返回值:计算后的子网值
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.CalNETFunction.Create">
            <summary>
            创建EqualStrFunction对象，用于函数注册
            </summary>
            <returns>返回EqualStrFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.LogFunction">
            <summary>
            void log(p:logwriter,p:outstr)
            输出日志至文件函数
            建议使用log标签代替
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LogFunction.#ctor">
            <summary>
            构造函数，定义函数名称为log，参数个数是2个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LogFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现BinaryFunction的Calc函数，打印日志信息，输出至控制台
            第一个参数:LogWriterData类型
            第一个参数:String类型
            返回值:success
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.LogFunction.Create">
            <summary>
            创建LogFunction对象，用于函数注册
            </summary>
            <returns>返回LogFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.UnpackdFunction">
            <summary>
            _double unpackd(p:streamData,p:length)
            以浮点数形式解析数据流数据
            length可指定为4（float），8(double)
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackdFunction.#ctor">
            <summary>
            构造函数，定义函数名称为unpackd
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackdFunction.calcValue(MetaFly.Datum.Figure.StreamData,System.Int64)">
            <summary>
            以浮点数形式解析数据流数据，并移动数据流当前位置
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackdFunction.Create">
            <summary>
            创建UnpackdFunction对象，用于函数注册
            </summary>
            <returns>返回UnpackdFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.AddListsFunction">
            <summary>
            _list addlists(p:list1,p...:lists)
            多个list同时合并，并生成一个新的列表
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddListsFunction.#ctor">
            <summary>
            构造函数，定义函数名称为addlist
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddListsFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，将2个列表组合成一个新的列表
            本函数对新列表不进行剔除重复项操作。
            第一个参数:List类型
            第二个参数:List类型
            返回值:List类型，新的List
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AddListsFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证解释定义函数
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AddListsFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AddListsFunction.Create">
            <summary>
            创建AddListFunction对象，用于函数注册
            </summary>
            <returns>返回AddListFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.AddsFunction">
            <summary>
            _double adds(p...:plusVals)
            不限参数个数加法
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddsFunction.#ctor">
            <summary>
            构造函数，定义函数名称为adds
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AddsFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现类PrototypeFunc的Calc函数，计算多个参数的算术和
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AddsFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证解释定义函数
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AddsFunction.Create">
            <summary>
            创建AddsFunction对象，用于函数注册
            </summary>
            <returns>返回AddsFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.AndsFunction">
            <summary>
            _bool ands(p:boolVal1,p...:boolVals)
            不限参数个数逻辑与
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AndsFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现类PrototypeFunc的Calc函数，计算多个参数的逻辑与
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AndsFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证解释定义函数
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AndsFunction.Create">
            <summary>
            创建AndsFunction对象，用于函数注册
            </summary>
            <returns>返回AndsFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.DivsFunction">
            <summary>
            _double divs(p:numerator,p...:denominator)
            不限分母个数除法
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DivsFunction.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DivsFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc类的Calc函数，计算多个参数的除法
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行时环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.DivsFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证解释定义函数
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.DivsFunction.Create">
            <summary>
            创建DivsFunction对象，用于函数注册
            </summary>
            <returns>返回SubsFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ForeachArrayItemFunction">
            <summary>
            array foreach(s:sourcearray,q?:qualification,l?:length,ii?:initindex,i:index,f?:filter,m:xpd)
            循环函数,遍历sourcearray生成array
            sourcearray：操作的数据源，由alias索引
            qualification：一次性条件条件，此处使用sourcelist中的alias索引，alias索引的是整个sourcelist，而非其遍历时的子元素。可空
            length：输出array的length。可空，为空时，array长度为sourcelist经filter过滤剩余个数
            initindex：array下标初始值。可空
            index:下标更新条件。array第一个元素下标，由此更新条件计算得出。可空
            filter：源数据过滤条件，当返回TRUE时执行xpd，否则continue循环
            xpd：array元素生成规则
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ForeachArrayItemFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写了EleListFunction的Calc函数，循环函数
            source参数:List类型，循环操作的数据，通常要定义为alias
               注：如果source存在空元素，解析过程将终止。
            qualification参数:布尔类型，操作数据合法性检查，如果计算结果是false，解析过程将终止。
            len参数：Long类型，继承自EleListFunction，解释定义是member元素:定义数组的长度；oper:无意义
            index_init参数:无要求，循环初始设置定义，通常要定义为alias，在循环开始前进行
            index参数:Long类型，循环下标递增规则定义，通常要定义为alias，在每次循环开始前进行
               注意：在第一次循环前就执行一次。
            member参数：定义了数组结构，只能定义一个但是其可用iter或elelist定义
            返回值:如果是member元素返回Array，否则返回sucess;
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>        
        </member>
        <member name="M:MetaFly.Interpreter.ForeachArrayItemFunction.CalcSibling(System.Collections.Generic.List{MetaFly.Datum.Element.TermItem},System.Int64,System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent},MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            处理Sibling数据
            </summary>
            <param name="listdata">source列表</param>
            <param name="curindex">当前索引</param>
            <param name="siblingparamlist">Sibling列表</param>
            <param name="rtinfo">运行环境</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ForeachArrayItemFunction.Create">
            <summary>
            创建ForeachArrayItemFunction对象，用于函数注册
            </summary>
            <returns>返回ForeachArrayItemFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ListRemoveFunction">
             <summary>
            _list listremove(s:sourcelist, q:condition)
            将sourcelist中满足condition（为TRUE）条件的元素删除，并返回更新后的sourcelist
             </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ListRemoveFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            实现了PrototypeFunc的Verify函数，验证member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ListRemoveFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，遍历source，删除source中满足qualification条件（qualification为TRUE）的数据。
            <example>
            <code>
            <variable name="xmlBlockSortbyID" value="func:sort">
             <param value="func:child">
               <param value="member:input.sgdfile"/>
               <param value="ZC_area/Block"/>
             </param>
             <param value="Id"/>
             <param value="long"/>
            </variable>
            <oper value="func:listremove">
             <source value="member:xmlBlockSortbyID" alias="self"/>
             <qualification value="func:not">
               <param value="func:contain">
                 <param value="alias:self"/>
                 <param value="Track_id"/>
               </param>
             </qualification>
            </oper>
            </code>
            <output>
            剔除掉Block中不含Track_id的元素
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">上下文环境</param>
            <returns>若删除元素，则无条件返回TRUE</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ListRemoveFunction.Create">
            <summary>
            创建ListRemoveFunction对象，用于函数注册
            </summary>
            <returns>返回ListFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.MulsFunction">
            <summary>
            _double muls(p:)
            不限参数乘法
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MulsFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现类PrototypeFunc的Calc函数，计算多个参数的算术乘法
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">上下文</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MulsFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证解释定义函数
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MulsFunction.Create">
            <summary>
            创建MulsFunction对象，用于函数注册
            </summary>
            <returns>返回AddFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.OrsFunction">
            <summary>
            _bool ors(p:boolVal,p...:boolVals)
            不限参数个数逻辑或
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.OrsFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现类PrototypeFunc的Calc函数，计算多个参数的逻辑或
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.OrsFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证解释定义函数
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.OrsFunction.Create">
            <summary>
            创建OrsFunction对象，用于函数注册
            </summary>
            <returns>返回OrsFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.PauseFunction">
            <summary>
            pause(p?:condition)
            断点函数，可设置为条件断点和普通断点
            condition：断点命中条件，为TRUE时命中。可缺省，缺省时为普通断点
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PauseFunction.#ctor">
            <summary>
            任意参函数
            功能：中止xml解析，进入调试模式
            <example>
            <code>
            <oper value="func:pause"/>
            或者
            <oper value="func:pause">
                <param value="func:equal(alias:XXX, 1)"/> param间是逻辑或
                <param value="func:equal(alias:XXX, 1)"/>
            </oper>
            </code>
            <output>
            模式选择对话框
            </output>
            </example>
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PauseFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，使用断言暂停xml解析，弹出当前堆栈
            中止：退出程序
            重试：进入调试模式
            继续：继续程序执行       
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>无条件返回success</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PauseFunction.CallAssert(MetaFly.Parse.ParseParamAgent,System.Boolean,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            断言中断
            </summary>
            <param name="paraminfo"></param>
            <param name="isTrue"></param>
            <param name="rtinfo"></param>
        </member>
        <member name="M:MetaFly.Interpreter.PauseFunction.GetMember(System.String)">
            <summary>
            查找Member索引元素
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.PauseFunction.GetAlias(System.String)">
            <summary>
            查找alias索引元素
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.PauseFunction.Create">
            <summary>
            创建PauseFunction对象，用于函数注册
            </summary>
            <returns>返回BlindFunction</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PauseFunction.GetMemberValue(System.String)">
            <summary>
            往上行方向查找元素值
            A.B.C可以直接索引，未查找到返回Empty
            A.B[].C 必返回Empty
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Interpreter.StrConcatFunction">
            <summary>
            弃用，请使用{}替换
            实现任意个数字符串的拼接
            允许标签：param
            <examlpe>
            <code>
            <variable name="test" value="func:strconcat">
             <param value="hello "/>
             <param value=" world"/>
             <param value=" !!!!"/>        
            </variable>
            <oper value="func:print(member:test)"/>
            </code>
            <output>
            hello world !!!
            </output>
            </examlpe>
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.StrConcatFunction.#ctor">
            <summary>
            构造函数，定义函数名称为strconcat
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.StrConcatFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，拼接任意个字符串
            第一个参数:String类型
            第二个参数:String类型
            返回值:String类型，拼接后的字符串
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.StrConcatFunction.Create">
            <summary>
            创建FormatStrFunction对象，用于函数注册
            </summary>
            <returns>返回FormatStrFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.SubsFunction">
            <summary>
            _double subs(p:p1,p...:ps)
            不限参数个数减法。p1-ps
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SubsFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证解释定义函数
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SubsFunction.Create">
            <summary>
            创建SubsFunction对象，用于函数注册
            </summary>
            <returns>返回SubsFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.PickAppendConFunction">
            <summary>
            term pickappendcon(p:sourcearray, p:tofindvalue, p:path)
            获取sourcearray中path路径下，满足path指定值等于tofindvalue的元素值
            tofindvalue：匹配的目标值
            path：sourcearray子元素中查找路径
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PickAppendConFunction.#ctor">
            <summary>
            构造函数，定义函数名称为pick，参数个数是3个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PickAppendConFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，获取根据Array类型变量的指定索引数据,如果索引大于变量的长度则自动扩展。
            第一个参数:ArrayItem类型
            第二个参数:string类型，
            第三个参数:string类型，
            返回值:TermItem类型
            <example>
            遍历param1（ArrayItem）下的元素，若元素路径索引（param3）下的值等于param2，则返回该ArrayItem元素，
            若未查找到相等值，则对ArrayItem扩容（长度加一），并返回默认模板值
            <code>
            
            </code>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PickAppendConFunction.Create">
            <summary>
            创建PickAppendFunction对象，用于函数注册
            </summary>
            <returns>返回PickAppendFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.CanreadFunction">
            <summary>
            _bool canread(p:streamData,p:length)
            判断二进制流streamData是否能读取出length长度数据
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CanreadFunction.#ctor">
            <summary>
            构造函数，定义函数名称为unpack
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CanreadFunction.calcValue(MetaFly.Datum.Figure.StreamData,System.Int64)">
            <summary>
            判断数据是否可读取相应数据
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.CanreadFunction.Create">
            <summary>
            创建CanreadFunction对象，用于函数注册
            </summary>
            <returns>返回CanreadFunction</returns>    
        </member>
        <member name="T:MetaFly.Interpreter.UnpackBaseFunction">
            <summary>
            二元数据流解析抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            继承自BinaryFunction
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackBaseFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackBaseFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，解析数据流数据
            本函数不判断列表中是否已经存在要添加的数据，且不创建新的列表
            第一个参数:StreamData类型
            第二个参数:long类型
            返回值:返回解析后的数据
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackBaseFunction.calcValue(MetaFly.Datum.Figure.StreamData,System.Int64)">
            <summary>
            抽象函数，子类用以实现计算过程
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.UnpackFunction">
            <summary>
            _long unpack(p:streamData,p:length)
            以无符号整数形式解析数据流数据
            length可指定为1（char）、2（Int16）、4（Int32）
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackFunction.#ctor">
            <summary>
            构造函数，定义函数名称为unpack
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackFunction.calcValue(MetaFly.Datum.Figure.StreamData,System.Int64)">
            <summary>
            以有符号整数形式解析数据流数据，并移动数据流当前位置
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackFunction.Create">
            <summary>
            创建UnpackFunction对象，用于函数注册
            </summary>
            <returns>返回UnpackFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.UnpacksFunction">
            <summary>
            _string unpacks(p:streamData,p:length)
            以字符串形式解析数据流数据length个字符
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnpacksFunction.#ctor">
            <summary>
            构造函数，定义函数名称为unpacks
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnpacksFunction.calcValue(MetaFly.Datum.Figure.StreamData,System.Int64)">
            <summary>
            以字符串形式解析数据流数据，并移动数据流当前位置
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.UnpacksFunction.Create">
            <summary>
            创建UnpacksFunction对象，用于函数注册
            </summary>
            <returns>返回UnpacksFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.UnpackuFunction">
            <summary>
            _long unpacku(p:streamData,p:length)
            以有符号整数形式解析数据流数据
            length可指定为1(btye)、2(UInt16)、4(UInt32)
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackuFunction.#ctor">
            <summary>
            构造函数，定义函数名称为unpacku
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackuFunction.calcValue(MetaFly.Datum.Figure.StreamData,System.Int64)">
            <summary>
            以无符号整数形式解析数据流数据，并移动数据流当前位置
            </summary>
            <param name="param1">第一个参数</param>
            <param name="param2">第二个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.UnpackuFunction.Create">
            <summary>
            创建UnpackuFunction对象，用于函数注册
            </summary>
            <returns>返回UnpackuFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.WhileFunction">
            <summary>
            array? while(ii?:indexinit, i?:indexuodaterule, q:qualification, m:xpd)
            循环函数。循环操作或者循环生成array，qualification为FLASE时，终止循环
            indexinit：控制生成array元素时，下标初始值，可空
            indexuodaterule：生成元素下标更新规则，可空
            qualification:while终止条件，为TRUE时，继续循环，解析xpd，为FALSE时终止循环
            xpd：元素生成或者操作规则   
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.WhileFunction.#ctor">
            <summary>
            构造函数，定义函数名称为while
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.WhileFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，循环函数，当qualification参数为false时结束循环，当循环次数大于10000时终止解析过程。
            len参数：Long类型，继承自EleListFunction，解释定义是member元素:定义数组的长度；oper:无意义
            index_init参数:无要求，循环初始设置定义，通常要定义为alias，在循环开始前进行
            index参数:Long类型，循环下标递增规则定义，通常要定义为alias，在每次循环开始前进行
               注意：在第一次循环前就执行一次。
            qualification参数:布尔类型，循环结束判断，如果为false则结束循环过程，在每次循环计算完index参数后进行判断
            member参数：定义了数组结构，只能定义一个但是其可用iter或elelist定义
            返回值:如果是member元素返回Array，否则返回sucess;
            <example>
            while循环，根据qualification判断循环是否继续，qualification为真时，解析member配置，将解析结果存放在ArrayItem的对应index配置处
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.WhileFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            实现了PrototypeFunc的Verify函数，验证param和member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.WhileFunction.Create">
            <summary>
            创建WhileFunction对象，用于函数注册
            </summary>
            <returns>返回WhileFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.DeclareVarFunction">
            <summary>
            meta declarevar(p:type, p:loadparam, p:longtype)
            声明变量.反射加载MetaData子类变量。
            type：变量类型，格式：AssemblyName.MetaDataSubClass，AssemblyName可缺失，缺省时加载MetaFly程序集
            loadparam：加载参数，对于普通类型，该参数为声明变量字面值。
            对于：LogWriterData-》log日志路径；StreamData-》流路径；XPDData-》路径；XmlEntryData-》文件路径或者文本内容
            longtype:取值范围0、1.对于XmlEntryData，1为CreateFromFile，0为CreateFromString。StreamData，1为大端、0为小端
            二元函数，继承自BinaryFunction
            <example>
            通过反射加载其他程序集中，继承自MetaData的数据类型
            </example>
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DeclareVarFunction.#ctor">
            <summary>
            构造函数，定义函数名称为declarevar
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DeclareVarFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，将数据添加到列表中
            第一个参数:String类型，变量类型
            第二个参数:String类型，变量序列化串
            第三个参数:Long类型，变量序列化类型
            变量定义成功，返回变量，否则返回fail
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.DeclareVarFunction.Create">
            <summary>
            创建DeclareVarFunction对象，用于函数注册
            </summary>
            <returns>返回DeclareVarFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.DistinctFunction">
            <summary>
            _list distinct(p:sourcelist,p:condition)
            根据指定条件(condition)剔除列表(sourcelist)中的重复项，返回去重后的sourcelist
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DistinctFunction.#ctor">
            <summary>
            构造函数，定义函数名称为distinct
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.DistinctFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.DistinctFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.DistinctFunction.Create">
            <summary>
            创建DistinctFunction对象，用于函数注册
            </summary>
            <returns>返回DistinctFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.EnumvalFunction">
            <summary>
            enum enumval(p:enumlist,p:name)
            获取enumlist中指定name的枚举值
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EnumvalFunction.#ctor">
            <summary>
            构造函数，定义函数名称为enumval
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EnumvalFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，获取指定名称的枚举值
            第一个参数:EnumList类型
            第二个参数:String类型，枚举名称
            返回值:Enum类型，找到的枚举值，如果不存在返回fail
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.EnumvalFunction.Create">
            <summary>
            创建EnumvalFunction对象，用于函数注册
            </summary>
            <returns>返回EnumvalFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.EqualStrFunction">
            <summary>
            _bool equalstr(p:str1,p:str2)
            字符串相等函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EqualStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为equalstr
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EqualStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，判断两个字符串是否相等
            第一个参数:String类型
            第二个参数:String类型
            返回值:相等返回true，否则返回false
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.EqualStrFunction.Create">
            <summary>
            创建EqualStrFunction对象，用于函数注册
            </summary>
            <returns>返回EqualStrFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.FormatStrFunction">
            <summary>
            _string formatstr(p:str1,p:str2)
            拼接2个字符串,返回str1 + str2
            建议使用{}替换该函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.FormatStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为formatstr
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.FormatStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，拼接2个字符串
            第一个参数:String类型
            第二个参数:String类型
            返回值:String类型，拼接后的字符串
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.FormatStrFunction.Create">
            <summary>
            创建FormatStrFunction对象，用于函数注册
            </summary>
            <returns>返回FormatStrFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ParseFunction">
            <summary>
            parse(p:filepath,p:importnodepath)
            解析从filepath中引用的importnodepath路径下XPD定义
            被importnodepath引用的节点Style仅允许为：member、membergroup、oper、func
            同时当前parse所在的节点Style需与importnodepath引用的节点Style一致
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ParseFunction.#ctor">
            <summary>
            构造函数，定义函数名称为import
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ParseFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，根据其他文件的数据定义进行解释
            第一个参数:XPDData类型，导入的解释定义
            第二个参数:String类型，需解释元素的路径
            返回值:解析后的数据
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ParseFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的CalcDefault函数，根据其他文件的数据定义生成缺省数据
            第一个参数:XPDData类型，导入的解释定义
            第二个参数:String类型，需解释元素的路径
            返回值:解析后的数据
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ParseFunction.LinkParamAgent(MetaFly.Parse.ParseParamAgent@,MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            获取关联ParamAgent对象
            </summary>
            <param name="linkparaminfo">关联ParamAgent对象</param>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ParseFunction.Create">
            <summary>
            创建ParseFunction对象，用于函数注册
            </summary>
            <returns>返回ParseFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.PickAppendFunction">
            <summary>
            array pickappend(p:sourceArray,p:index)
            获取根据Array类型变量的指定索引数据
            若index大于sourceArray的Length，将Length扩容为index+1，并返回默认值
            若index未越界但index下标值为null，则设置sourceArray[index]=默认值，并返回默认值
            否则直接返回对应下标值   
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PickAppendFunction.#ctor">
            <summary>
            构造函数，定义函数名称为pick，参数个数是2个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PickAppendFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，获取根据Array类型变量的指定索引数据,如果索引大于变量的长度则自动扩展。
            第一个参数:ArrayItem类型
            第二个参数:Long类型，
            返回值:TermItem类型
            <code>
            <variable name="ccnv_to_nvsinfo" value="func:pickappend(member:g_ccnv_to_nvs)">
             <param value = "member:ccnv_to_nvs_index"/>
            </variable >
            </code>
            <output>
            返回g_ccnv_to_nvs数组中，索引为ccnv_to_nvs_index的CompoundItem
            </output>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PickAppendFunction.Create">
            <summary>
            创建PickAppendFunction对象，用于函数注册
            </summary>
            <returns>返回PickAppendFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.DecFunction">
            <summary>
            _long dec(p:longVal)
            自减函数类
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DecFunction.#ctor">
            <summary>
            构造函数，定义函数名称为dec
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DecFunction.calcValue(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Element.SimpleItem)">
            <summary>
            实现类SelfUnaryFunction的calcValue函数，自减少1
            第一个参数:整数类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="param">计算参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.DecFunction.Create">
            <summary>
            创建DecFunction对象，用于函数注册
            </summary>
            <returns>返回DecFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.IfelseFunction">
            <summary>
            casevalue ifelse(p:condition, c:trueCase, c:falseCase)
            条件函数
            condition:if条件，返回布尔型
            trueCase：condition返回TRUE时执行
            falseCase：condition返回FASLE时执行
            case标签支持halt中断
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IfelseFunction.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.IfelseFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.IfelseFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证param子元素、case子元素和default子元素。
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IfelseFunction.ParseCaseParam(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            解析指定Case ParamInfo
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回解析结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IfelseFunction.Create">
            <summary>
            创建IfelseFunction对象，用于函数注册
            </summary>
            <returns>返回IfelseFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.IncFunction">
            <summary>
            _long inc(p:longVal)
            自增函数类  
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IncFunction.#ctor">
            <summary>
            构造函数，定义函数名称为inc
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.IncFunction.calcValue(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Element.SimpleItem)" -->
        <member name="M:MetaFly.Interpreter.IncFunction.Create">
            <summary>
            创建IncFunction对象，用于函数注册
            </summary>
            <returns>返回IncFunction</returns>   
        </member>
        <member name="T:MetaFly.Interpreter.SelfUnaryFunction">
            <summary>
            自操作一元函数抽象类，不可实例化
            继承自BinaryFunction
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SelfUnaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SelfUnaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，完成了自处理运算并返回.
            第一个参数:SimpleItem类型
            返回值:成功返回success，否则返回fail
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SelfUnaryFunction.calcValue(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Element.SimpleItem)">
            <summary>
            抽象函数，子类用以实现计算过程
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="param">计算参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.DistinguishFunction">
            <summary>
            array distinguish(p:sourcearray, p:compref, p:style)
            根据指定条件剔除sourcearray数组重复项。返回去重后结果。去重会改变sourcearray
            compref:去重规则，以';'间隔。对于SimpleItem型sourcearray，可为空，否则不能为空
            style：去重项的数据类型，以';'间隔。   
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DistinguishFunction.#ctor">
            <summary>
            构造函数，定义函数名称为distinguish
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.DistinguishFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，根据指定条件剔除列表重复项并生成新的List对象
            第一个参数:Array类型
            第二个参数:String类型，比较数据项名称，为空则比较整个数据项
                       第一个参数Array存储的元素不是SimpleItem时，本参数可不为空，描述是否判断数据项名称，可以有多个，以';'间隔。
                       如果为空则比较数据本身。
            第三个参数:String类型，比较数据类型，只能是string、long、double（不定义依据二者Tostring的字符串是否一样，详见TermItem各子类的Tostring函数）
            返回值:成功返回sucess，否则返回fail
            <example>
            根据param2（规则），param3（去重项的数据类型），对param1（ArrayItem）去重
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.DistinguishFunction.Create">
            <summary>
            创建DistinguishFunction对象，用于函数注册
            </summary>
            <returns>返回DistinguishFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.LastIndexOfStrFunction">
            <summary>
            _long lastindexofstr(p:sourcestr, p:value, p:startIndex)
            查找source下标startIndex之后最后一个匹配到的value子字符串下标，未匹配到，则返回-1；value为空返回startIndex
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LastIndexOfStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为lastindexofstr
            /// <example>
            返回字符串param1至param3（startindex：从后之前搜索）起，匹配param2的索引值,未找到匹配，则返回-1
            <code>
            <member name="test" value="func:lastindexofstr">
             <param value="abcdefgcde"/>
             <param value="cd"/>
             <param value="10"/>
            </member>
            <oper value="func:print(member:test)"/>
            </code>
            <output>
            7
            </output>
            </example>
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LastIndexOfStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，指定字符串在此实例中的反向第一个匹配项的索引。该搜索从指定字符位置开始
            第一个参数:String类型，
            第二个参数:String类型，要搜寻的字符串
            第三个参数:Long类型，搜索起始位置
            返回值:StringData类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.LastIndexOfStrFunction.Create">
            <summary>
            创建SubstrFunction对象，用于函数注册
            </summary>
            <returns>返回SubstrFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ReorderFunction">
            <summary>
            array reorder(p:sourcearray, p:compref, p:style)
            ArrayItem数组排序函数.将sourcearray按照comref比较条件排序
            sourcearray:被排序array
            compref:比较条件。指示以何子节点排序的。多条件时以”；“分号分隔。可空，空时为根节点排序。当sourcearray存储的是CompoundItem时，不可为空
            style：升降序规则,与compref对应，以”；“分隔。只支持string、long、double。例如："-long;double",正负号代表升序/降序
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ReorderFunction.#ctor">
            <summary>
            构造函数，定义参数个数为3个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ReorderFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，根据条件获取指定数据.
            第一个参数:Array类型
            第二个参数:String类型，比较条件，
                       当第一个参数Array存储的元素是Compound时，本参数可不为空，描述条件是否比较依据项的路径。
                       如果为空则比较数据本身。
            第三个参数:String类型，比较数据类型，只能是string、long、double。
            返回值:成功返回sucess，否则返回fail
            <example>
            reorder函数仅能和oper使用
            根据param2（规则）、param3（升降序）对param1（Arrayitem）进行排序。与sortfunction不同的是，本函数为就地重排，不会生成新的排序后的ArrayItem
            <code>
            <oper value="func:reorder">
             <param value="member:ssps_up"/>
             <param value="block_id;abscissa;indexinput"/>
             <param value="long;long;long"/>
            </oper>
            <output>
            输出排序后的ssps_up列表。排序规则：首先按照block_id升序（long）排序，同block_id时，按照abscissa升序排，
            同abscissa时，在按照indexinput升序排。若param3中为：-long则进行降序排列，param还对应着被排序的数据类型
            </output>
            </code>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ReorderFunction.canCalc(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Element.ArrayItem,System.String,System.String)">
            <summary>
            判断是否可计算
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="arraydata">数组数据</param>
            <param name="compref">比较条件</param>
            <param name="style">比较类型</param>
            <returns>可计算返回</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ReorderFunction.Create">
            <summary>
            创建ReorderFunction对象，用于函数注册
            </summary>
            <returns>返回ReorderFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.AppendSetFunction">
            <summary>
            array appendset(s:sourcearray, i?:index, m:xpd)
            ArrayItem数据的赋值函数，返回追加元素后的sourcearray。用于解决ArrayItem数据的动态扩容追加问题。检查xpd返回值与sourcearray是否匹配
            功能：在source指定位置（index）上填充特定数据（member）
            必备标签：
            sourcearray:目标数据源
            xpd:所追加数据    
            可选标签：
            index: 追加数据索引。当标签缺失时，默认在source最末端追加数据。
            当标签存在且index值为空时，默认在source最末端追加数据
            当标签存在且index值小于source的本身长度时，则将source位于index位置的数据设置为member值
            当标签存在且index值大于source的本身长度时，则将source的长度设置为index + 1，并将index位置上的值设置为member值 
            PS:本函数采用涉及数据为引用类型，函数返回值为BoolData类型，用于指示数据设置是否成功。因此本函数最好与oper配合使用    
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AppendSetFunction.#ctor">
            <summary>
            构造函数，定义函数名称为append
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AppendSetFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
             <summary>
             实现了PrototypeFunc的Calc函数，ArrayItem指定位置追加值
             member参数:ArrayItem类型
             index参数：Long类型
             member参数：TermItem类型
             返回值:BoolData类型
             <example>
             <code>
             <variable name="test" value="func:elelist">
              <len value="2"/>
              <member value="-1"/>
             </variable>
             <oper value="func:appendset">
              <source value="member:test"/>
              <index value=""/>
              <member value="5"/>
            </oper> 
            <oper value="func:pause"/>
             <output>
             test容量扩充一位，并返回最后一个元素的值，若容量本身为零，则返回默认值。
             </output>    
             </code>
             </example>
             </summary>
             <param name="paraminfo">参数定义</param>
             <param name="rtinfo">运行环境</param>
             <returns>是否设置数据成功</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AppendSetFunction.Create">
            <summary>
            创建AppendSetFunction对象，用于函数注册
            </summary>
            <returns>返回AppendSetFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.PrecisionFunction">
            <summary>
            _string precision(p:p1,p:p2)
            精度设置。将p1转换为p2精度
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PrecisionFunction.#ctor">
            <summary>
            构造函数，定义函数名称为precision
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.PrecisionFunction.CalcValue(System.Double,System.Double)" -->
        <member name="M:MetaFly.Interpreter.PrecisionFunction.Create">
            <summary>
            创建PrecisionFunction对象，用于函数注册
            </summary>
            <returns>返回PrecisionFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ArrayCountFunction">
            <summary>
            _long arraycount(p:sourceArray)
            返回sourceArray中实际元素的个数，该个数与sourceArray的Length可能不一致
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ArrayCountFunction.#ctor">
            <summary>
            构造函数，定义函数名称为arraycount
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ArrayCountFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，根据返回数组长度
            第一个参数:Array类型
            返回值:Long型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ArrayCountFunction.Create">
            <summary>
            创建MemberFunction对象，用于函数注册
            </summary>
            <returns>返回ArrayCountFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.IPToUIntFunction">
            <summary>
            _long iptouint(p:ipAddress)
            转化IP地址为等效整数形式
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IPToUIntFunction.#ctor">
            <summary>
            构造函数，定义函数名称为iptouint
            <example>
            ip地址的long解析形式
            <code>
            <member name="Test" value="func:iter">
             <member name="test" value="func:iptouint">
               <param value="192.168.100.11"/>
               </member>
             <oper value="func:print(member:test)"/>
            </member>
            </code>
            <output>
            3232261131
            </output>
            </example>
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IPToUIntFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了UnaryFunction的Calc函数
            第一个参数:string类型
            返回值:ip地址的long等价形式
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IPToUIntFunction.Create">
            <summary>
            创建AppendFunction对象，用于函数注册
            </summary>
            <returns>返回AppendFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.IsDeclareFunction">
            <summary>
            _bool isdeclare(p:source)
            判断变量是否已经声明
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IsDeclareFunction.#ctor">
            <summary>
            构造函数，定义函数名称为isdeclare
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IsDeclareFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，判断变量是否已经声明
            第一个参数:字符串类型，变量名称
            返回值：Bool类型
            <example>
            判断变量名param是否在已存在于上下文环境中，即当前param是否在之前已被解析
            <code>
            <member name="Test" value="func:iter">
             <member name="test" value="func:iptouint">
               <param value="192.168.100.11"/>
             </member>
             <oper value="func:print">
               <param value="func:isdeclare">
                 <param value="test"/> 直接传入变量名
               </param>      
             </oper>
             <oper value="func:print">
               <param value="func:isdeclare">
                 <param value="notdeclare"/> 不存在
               </param>        
             </oper>      
            </member>
            </code>
            <output>
            TRUE
            FALSE 
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IsDeclareFunction.Create">
            <summary>
            创建IsDeclareFunction对象，用于函数注册
            </summary>
            <returns>返回IsDeclareFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.ValueExistFunction">
            <summary>
            _bool valueexist(p:valuepath)
            判断指定路径下时候存在值
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ValueExistFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，判断数据是否存在
            第一个参数:简单类型
            返回值:Bool类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>存在返回true，否则返回fasle</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ValueExistFunction.Create">
            <summary>
            创建ValueExistFunction对象，用于函数注册
            </summary>
            <returns>返回ValueExistFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.IndexOfStrFunction">
            <summary>
            _long indexofstr(p:sourcestr, p:value, p:startIndex)
            返回sourcestr字符串中value在startIndex之后第一次出现的下标，
            若不存在子字符串value，则返回-1.若value为空，则返回startIndex
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IndexOfStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为indexofstr
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IndexOfStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，指定字符串在此实例中的第一个匹配项的索引。该搜索从指定字符位置开始
            第一个参数:String类型，
            第二个参数:String类型，要搜寻的字符串
            第三个参数:Long类型，搜索起始位置
            返回值:StringData类型
            <example>
            返回字符串param1至param3（startindex：从前至后搜索）起，匹配param2的索引值,未找到匹配，则返回-1
            <code>
            <member name="test" value="func:indexofstr">
             <param value="abcdefg"/>
             <param value="cd"/>
             <param value="0"/>
            </member>
            <oper value="func:print(member:test)"/>
            </code>
            <output>
            2
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IndexOfStrFunction.Create">
            <summary>
            创建IndexOfStrFunction对象，用于函数注册
            </summary>
            <returns>返回IndexOfStrFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.ReplaceStrFunction">
            <summary>
            _string replacestr(p:sourcestr, p:oldValue, p:newValue)
            字符串替换函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ReplaceStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为substr
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ReplaceStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，替换字符串中出现的所有子字符串
            第一个参数:String类型，
            第二个参数:String类型，要被替换的字符串
            第三个参数:String类型，要替换出现的所有 oldValue 的字符串
            返回值:StringData类型
            <example>
            将字符串param1中oldValue（param2）替换为newValue（param3）
            <code>
            <member name="test" value="func:replacestr">
               <param value="abcdefgcde"/>
               <param value="cd"/>
               <param value="11"/>
             </member>
             <oper value="func:print(member:test)"/>
            </code>
            <output>
            ab11efg11e
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ReplaceStrFunction.Create">
            <summary>
            创建ReplaceStrFunction对象，用于函数注册
            </summary>
            <returns>返回ReplaceStrFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.SubStrFunction">
            <summary>
            _string substr(p:sourcestr, p:startIndex, p:length)
            子字符串截取
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SubStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为substr
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SubStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，获取从指定的字符位置开始且具有指定长度的子字符串
            第一个参数:String类型，
            第二个参数:Long类型，子字符串的起始字符位置（从零开始）
            第三个参数:Long类型，子字符串中的字符数
            返回值:StringData类型
            <example>
            返回字符串param1，至param2起，长度为param3的子字符串
            <code>
            <member name="Test" value="func:iter">
             <member name="test" value="func:substr">
               <param value="abcdefgcde"/>
               <param value="3"/>
               <param value="6"/>
             </member>
             <oper value="func:print(member:test)"/>
            </member>
            </code>
            <output>
            defgcd
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SubStrFunction.Create">
            <summary>
            创建SubstrFunction对象，用于函数注册
            </summary>
            <returns>返回SubstrFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.AppendFunction">
            <summary>
            trem append(p:sourceArray)
            sourceArray容量加一，并以默认值填充所扩展的最后一个元素，返回最后一个元素
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AppendFunction.#ctor">
            <summary>
            构造函数，定义函数名称为append
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AppendFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，Array类型长度加一并返回最后一个数据
            第一个参数:ArrayItem类型
            返回值:TermItem类型
            <example>
            <code>
            <variable name="test" value="func:elelist">
             <len value="0"/>
             <member value="-1"/>      
            </variable>
            <oper value="func:pause"/>
            <oper value="func:append">
             <param value="member:test"/>
            </oper>
            <output>
            test容量扩充一位，并返回最后一个元素的值，若容量本身为零，则返回默认值。
            </output>
            <oper value="func:pause"/>
            </code>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AppendFunction.Create">
            <summary>
            创建AppendFunction对象，用于函数注册
            </summary>
            <returns>返回AppendFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.IsEmptyStrFunction">
            <summary>
            _bool isemptystr(p:sourceStr)
            判断字符串是否为空
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IsEmptyStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为isemptystr
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IsEmptyStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了UnaryFunction的Calc函数，拼接字符串
            第一个参数:String类型
            返回值:如果字符串为空返回true，否则返回false
            <example>
            <code>
            <member name="Test" value="func:iter">
             <member name="test" value="func:iptouint">
               <param value="192.168.100.11"/>
             </member>
             <oper value="func:print">
               <param value="func:isemptystr">
                 <param value="member:test"/>
               </param>      
             </oper>
            </member>
            </code>
            <output>
            FALSE
            </output>
            </example>    
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IsEmptyStrFunction.Create">
            <summary>
            创建IsNumFunction对象，用于函数注册
            </summary>
            <returns>返回IsNumStrFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.LinkFunction">
            <summary>
            xpddata link(p:filepath)
            导入解释定义函数定义函数
            根据XPDData的文件名，从XPDDataPools中获取文件名对应的XPDData数据并返回，
            若获取到相关值，则根据文件名new一个XPDData对象，若此时该对象非空，
            则返回该对象，该对象为空，则返回null
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LinkFunction.#ctor">
            <summary>
            构造函数，定义函数名称为link
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LinkFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了UnaryFunction的Calc函数，导入
            第一个参数:String类型
            返回值:返回解释定义文件XPDData对象
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.LinkFunction.Create">
            <summary>
            创建LinkFunction对象，用于函数注册
            </summary>
            <returns>返回LinkFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.IndexFunction">
            <summary>
            _long index(p:sourcelist,p:value)
            获取value字符串在列表sourcelist中的位置下标
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IndexFunction.#ctor">
            <summary>
            构造函数，定义函数名称为index
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.IndexFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.IndexFunction.Create">
            <summary>
            创建IndexFunc对象，用于函数注册
            </summary>
            <returns>返回IndexFunc</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.ItemFunction">
            <summary>
            meta item(p:sourcelist,p:index)
            获取列表sourcelist中某个index位置的数据
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ItemFunction.#ctor">
            <summary>
            构造函数，定义函数名称为item
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ItemFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，获取列表中某个位置的数据
            第一个参数:List类型
            第二个参数:Long类型
            返回值:Meta类型，如果位置所在的数据存在则返回该数据，否则返回空数据
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ItemFunction.Create">
            <summary>
            创建ItemFunction对象，用于函数注册
            </summary>
            <returns>返回ItemFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.LongListFunction">
            <summary>
            _list longlist(p:initvalue,p:step)
            按照初始值initvalue、步长step生成一个源list
            主要用于foreach函数的循环条件(source)
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LongListFunction.#ctor">
            <summary>
            构造函数，定义函数名称为longlist
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.LongListFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.LongListFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.LongListFunction.Create">
            <summary>
            创建LongListFunction对象，用于函数注册
            </summary>
            <returns>返回LongListFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.AppendFmtStrFunction">
            <summary>
            _string appendfmtstr(p:format,m...:agrs)
            格式拼接多个字符串
            不建议使用，可由{}替代
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AppendFmtStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为appendstr，参数个数为0个
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.AppendFmtStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.AppendFmtStrFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            实现了PrototypeFunc的Verify函数，验证member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AppendFmtStrFunction.Create">
            <summary>
            创建AppendStrFunction对象，用于函数注册
            </summary>
            <returns>返回AppendStrFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.AppendStrFunction">
            <summary>
            _string appendstr(m:strVal,m...：strVals)
            拼接多个字符串
            不建议使用。可由{}替换  
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AppendStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为appendstr，参数个数为0个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.AppendStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，拼接字符串
            member参数:字符串类型（可多个），
            返回值:字符串类型
            <example>
            按照member标签出现的顺序，拼接字符串
            <member name="test" value="func:appendstr">
                <member value="hello "/>
                <member value="world "/>
                <member value="!!!"/>
            </member>
            <output>
             hello world !!! 
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AppendStrFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            实现了PrototypeFunc的Verify函数，验证member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.AppendStrFunction.Create">
            <summary>
            创建ListFunction对象，用于函数注册
            </summary>
            <returns>返回ListFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.PickFunction">
            <summary>
            item pick(p:sourceItem,p:path)
            变量取值函数，返回前端数据节点souceItem下path路径子节点值
            path：节点路径，以‘.’逗号分隔
            child函数取输入文件中节点数据，pick取XPD中配置节点数据
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PickFunction.#ctor">
            <summary>
            构造函数，定义函数名称为pick，参数个数是2个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PickFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，获取根据member作用域范围指定变量。
            第一个参数:TermItem类型
            第二个参数:String类型，变量路径(以'.'间隔)
            返回值:TermItem类型
            <example>
            取param1中对应param2的值，例如：param1为{key1:value1; key2:value2},param2为key1，则返回{key1:value1}
            <code>
            <variable name="temp" value="func:pick">                  
               <param value = "member:trackls"/>
               <param value="member:id"/>
            </variable>
            </code>
            <output>
            返回trackls中id索引的元素
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PickFunction.Create">
            <summary>
            创建PickFunction对象，用于函数注册
            </summary>
            <returns>返回PickFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.SplitStrFunction">
            <summary>
            _list splitstr(p:str,p:splitor)
            字符串分割 
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SplitStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为splitstr
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SplitStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，返回字符串中由指定字符串分隔的子字符串List
            第一个参数:String类型,要分隔的字符串
            第二个参数:String类型,分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 null
            返回值:List类型，返回字符串中由指定字符串分隔的子字符串List
            <example>
            splitstr函数：按照字符串param2分隔param1，返回分割后的字符串列表
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SplitStrFunction.Create">
            <summary>
            创建SplitStrFunction对象，用于函数注册
            </summary>
            <returns>返回SplitStrFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.SubListFunction">
            <summary>
            _list sublist(p:list1,p:list2)
            剔除list1中与list2的重复项，已新listdata的形式返回
            list1和list2不做改变    
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SubListFunction.#ctor">
            <summary>
            构造函数，定义函数名称为sublist
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SubListFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了BinaryFunction的Calc函数，计算2个列表减操作并生成一个新的列表
            第一个参数:List类型
            第二个参数:List类型
            返回值:List类型，新的List
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SubListFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SubListFunction.Create">
            <summary>
            创建SubListFunction对象，用于函数注册
            </summary>
            <returns>返回SubListFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ToListFunction">
            <summary>
            _list tolist(p:sourceArray,p:path)
            将sourceArray的某path项数据转换为List类型。
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ToListFunction.#ctor">
            <summary>
            构造函数，定义函数名称为tolist，参数个数为2个
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.ToListFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.ToListFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ToListFunction.Create">
            <summary>
            创建ToListFunction对象，用于函数注册
            </summary>
            <returns>返回ToListFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.BlindFunction">
            <summary>
            0 blind(xpd)
            用于屏蔽某段解析定义，使解析器不解析该段解析定义，也不进行子参数定义验证，主要用于调试
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BlindFunction.#ctor">
            <summary>
            构造函数，定义函数名称为blind，参数个数为0个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BlindFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，返回success
            返回值:无条件返回success
            <example> 
            <code>
            <member name="Test" value="func:iter">
             <member name = "blind" value="func:blind">
               <func name = "convertdistance" value="2">
                 <result value = "funcref:convertdistance_var1">
                   <param value="func:mul">
                     <param value = "member:convertdistance_var2"/>
                     <param value="1000"/>
                   </param>
                 </result>
               </func>
               <member name = "mul50" value="func:convertdistance(round)">
                 <param value = "55.4"/>
               </member>
             </member>
            </member>
            </code>
            <output>
            屏蔽执行blind函数包裹的部分
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BlindFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，无条件返回success
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BlindFunction.Create">
            <summary>
            创建BlindFunction对象，用于函数注册
            </summary>
            <returns>返回BlindFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ClassifyFunction">
            <summary>
            _list classify(s:sourcelist,q:condition)
            List分类函数.根据condition规则将List的元素分成若干个子List,返回的list为双层list
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ClassifyFunction.#ctor">
            <summary>
            构造函数，定义函数名称为classify，参数个数为0个
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.ClassifyFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.ClassifyFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证source和qualification参数
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>验证通过返回success,否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ClassifyFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ClassifyFunction.Create">
            <summary>
            创建ClassifyFunction对象，用于函数注册
            </summary>
            <returns>返回ClassifyFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.MultiCompareFunction">
            <summary>
            列表比较抽象类，不可实例化
            三参函数，继承自PrototypeFunc
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MultiCompareFunction.#ctor">
            <summary>
            构造函数，定义参数个数为3个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MultiCompareFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，根据条件获取指定数据.
            第一个参数:List类型，不可存在空元素
            第二个参数:String类型，比较条件，
                       当第一个参数List存储的元素是Entry时，本参数可不为空，描述条件是否比较依据项的路径。
                       如果为空则比较数据本身。
            第三个参数:String类型，比较数据类型，只能是string、long、double。
            返回值:Meta类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MultiCompareFunction.calcValue(MetaFly.Datum.Figure.ListData,System.String,System.String)">
            <summary>
            计算抽象函数
            返回值：Meta类型
            </summary>
            <param name="listdata">列表</param>
            <param name="compref">比较条件</param>
            <param name="style">比较类型</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MultiCompareFunction.canCalc(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Figure.ListData,System.String,System.String)">
            <summary>
            判断是否可计算
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="listdata">列表数据</param>
            <param name="compref">比较条件</param>
            <param name="style">比较类型</param>
            <returns>可计算返回</returns>
        </member>
        <member name="T:MetaFly.Interpreter.CustomFunction">
            <summary>
            自定义函数，用户所有自定义的函数均生成此对象
            参数个数根据配置获取，继承自PrototypeFunc
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CustomFunction.#ctor(MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数，函数名称和参数个数均根据配置获取
            </summary>
            <param name="paraminfo">自定义函数解释定义</param>
        </member>
        <member name="M:MetaFly.Interpreter.CustomFunction.#ctor(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数，函数名称和参数个数均根据配置获取
            </summary>
            <param name="paraminfo">自定义函数解释定义</param>
        </member>
        <member name="M:MetaFly.Interpreter.CustomFunction.#ctor(MetaFly.Parse.ParseParamAgent,System.Int32,System.String)">
            <summary>
            构造函数，函数名称和参数个数均根据配置获取
            </summary>
            <param name="paraminfo">自定义函数解释定义</param>
        </member>
        <member name="M:MetaFly.Interpreter.CustomFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现类PrototypeFunc的Calc函数，根据解释定义进行运算
            传入的参数依次命名为Name_varX;其中X表示参数索引
            在进行计算时不继承上级的别名变量表(aliaslist)
            返回运算的结果
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.CustomFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省数据，返回result计算的缺省值
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.CustomFunction.CreateFunction(MetaFly.Parse.ParseParamAgent)">
            <summary>
            创建自定义函数，分为自定义和导入两种情况
            </summary>
            <param name="paraminfo">参数定义</param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Interpreter.EleListFunction">
            <summary>
            array elelist(l:length,m:item)
            以item为默认结构，定义长度为length的ArrayItem
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EleListFunction.#ctor">
            <summary>
            构造函数，定义函数名称为elelist，参数个数为0个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EleListFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，定义元素数组，调用计算缺省值函数
            len参数：定义数组长度，应该大于等于0
            member参数：定义了数组结构，只能定义一个但是其可定义为iter或elelist
            返回CalcDefault函数定义的元素数组
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.EleListFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.EleListFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证len素和member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.EleListFunction.Create">
            <summary>
            创建EleListFunction对象，用于函数注册
            </summary>
            <returns>返回EleListFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.EnumListFunction">
            <summary>
            _enum enumlist(m...:item)
            创建枚举列表
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EnumListFunction.#ctor">
            <summary>
            构造函数，定义函数名称为enumlist，参数个数为0个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EnumListFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，创建枚举列表
            member参数:枚举名称和枚举值
            返回值：EnumList类型，枚举列表
            <example>
            创建枚举列表,返回创建的EnumListData
            <code>
            <member name="DIRECTION" value="func:enumlist">
             <member name = "UP" value="0"/>
             <member name = "DOWN" value="1"/>
             <member name = "BOTH" value="2"/>
             <member name = "NONE_DIRECTION" value="3"/>
            </member>
            </code>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.EnumListFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.EnumListFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.EnumListFunction.Create">
            <summary>
            创建EnumListFunction对象，用于函数注册
            </summary>
            <returns>返回EnumListFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.FindIndexFunction">
            <summary>
            _long findindex(s:sourcearray,q:condition)
            在数组中获得满足条件的元素下标索引    
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.FindIndexFunction.#ctor">
            <summary>
            构造函数，定义函数名称为findindex，参数个数为0个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.FindIndexFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，返回满足条件的元素下标索引
            source参数:Array类型
            qualification参数:布尔类型，条件定义
            返回值:Long类型，下标索引
            <example>
            返回source（ArrayItem）中，满足qualification（返回bool）条件元素在source中的下标索引值
            <code>
             <variable name="MTIBindex" value="func:findindex">
             <source value="member:mtibs" alias="selfMTIB"/>
             <qualification value="func:equal">
               <param value="alias:self"/>
               <param value = "alias:selfMTIB.ID"/>
             </qualification>
            </variable>
            </code>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.FindIndexFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证source子元素和qualification子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.FindIndexFunction.Create">
            <summary>
            创建FindIndexFunction对象，用于函数注册
            </summary>
            <returns>返回FindIndexFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ForeachFunction">
            <summary>
            array foreach(s:sourcelist,q?:qualification,l?:length,ii?:initindex,i:index,f?:filter,m:xpd)
            循环函数,遍历sourcelist生成array
            sourcelist：操作的数据源，由alias索引
            qualification：一次性条件条件，此处使用sourcelist中的alias索引，alias索引的是整个sourcelist，而非其遍历时的子元素。可空
            length：输出array的length。可空，为空时，array长度为sourcelist经filter过滤剩余个数
            initindex：array下标初始值。可空
            index:下标更新条件。array第一个元素下标，由此更新条件计算得出。可空
            filter：源数据过滤条件，当返回TRUE时执行xpd，否则continue循环
            xpd：array元素生成规则
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ForeachFunction.#ctor">
            <summary>
            构造函数，定义函数名称为foreach
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.ForeachFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.ForeachFunction.CalcSibling(MetaFly.Datum.Figure.ListData,System.Int64,System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent},MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            处理Sibling数据
            </summary>
            <param name="listdata">source列表</param>
            <param name="curindex">当前索引</param>
            <param name="siblingparamlist">Sibling列表</param>
            <param name="rtinfo">运行环境</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ForeachFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了EleListFunction的Verify函数，验证source,qualification,len,index_init,index,member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ForeachFunction.Create">
            <summary>
            创建ForeachFunction对象，用于函数注册
            </summary>
            <returns>返回ForeachFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.IterFunction">
            <summary>
            compound? iter(m?:xpd,o?:xpd,v?:xpd,t?:task,l?:log)
            顺序函数，用于创建compound数据结构，或者用作代码块
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.#ctor">
            <summary>
            构造函数，定义函数名称为iter
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，顺序函数
            func参数：自定义函数定义
            member参数：变量定义，
            membergroup参数：变量组定义，解析定义一定为iter，并将iter解释定义生成的变量全部作为本函数生成的变量。并不产生新的变量类型，只是改变了变量之间的关系。
            variable参数：临时变量定义，
            oper参数：操作定义，无变量生成，只完成解析定义操作。
            返回值：Compound类型。
            作用域的说明：
                  由于本解释器是顺序执行（即边解析边保存的），为了避免变量及函数访问和保存的混乱，对各种变量进行了作用域的限制。
                  1.作用域均是向下有效的，即后边的变量解析过程中才有权利访问前面定义的变量或函数(如果作用域条件满足),前面的变量则无法访问后面定义的变量或函数。
                    此前后关系是指变量实际解析存在的关系而不是在配置文件定义的关系。
                    一般的配置文件定义的过程是实际解析的过程，但自定义函数除外，只要当自定义函数实际被调用时才进行解析。
                  2.变量
                    1.仅iter函数可定义有名称的变量（elelist可定义无名称的变量),任何函数或参数定义均可定义别名（iter函数除外，如下面描述，iter函数定义alias无意义)
                    2.解析过程中存在的变量作用域自小到大依次为：
                      1.oper:无变量
                      2.alias:仅限于变量解析内部（调用自定义函数范围除外)；
                      3.variable:作用域仅限于iter函数解析内部；
                      4.member、membergroup:作用域与iter函数解析生成的变量（如果有）相同，iter函数解析内部访问直接通过名称完成，解析外部则需添加iter函数解析生成的变量名
                  3.自定义函数
                    1.仅iter函数可定义有自定义函数：
                    2.自定义函数仅限于iter函数解析内部，自定义函数内可访问之前定义的member变量和所在iter函数定义的variable，但不能访问任何非自定义函数内部定义的alias。
            变量及函数重名的说明
                  由于本解释器存在变量组合以及作用域的区别，所有变量重名进行了要求和限制。
                  1.变量：
                    1.member(variable):
                      iter函数内部不允许存在重名变量，iter函数允许存在与外部定义变量相同。
                      此名称变量的作用域发生改变：iter函数内部定义此变量之前可访问外部定义的变量，之后只能访问内部定义的变量，iter解析结束后变量作用域恢复正常。
                    2.alias:
                      变量解析过程允许出现重名别名，但后定义的会覆盖之前定义的。
                  2.函数：
                   为了避免混乱，本解析器在全局有效作用域范围内不允许存在重名函数（即不允许函数重载或重写）
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcFunc(MetaFly.Parse.ParseParamAgent,System.Collections.Generic.List{System.String},MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            自定义函数定义解析函数，只是将函数解析封装为CustomFunction加载到functionList之中，待函数调用时才真正进行解析。
            </summary>
            <param name="paraminfo">自定义函数解释定义</param>
            <param name="customFunctionNameList">自定义函数名称列表，iter函数解析结束后删除自定义函数时使用</param>
            <param name="rtinfo">解释定义</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcLog(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            日志输出解析
            </summary>
            <param name="paraminfo">log参数定义</param>
            <param name="rtinfo">上下文环境</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcMember(MetaFly.Parse.ParseParamAgent,System.Collections.Generic.List{System.String},MetaFly.Datum.Element.CompoundItem,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            member变量定义解析函数
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="memberNameList">变量名称列表，iter函数解析结束后删除变量时使用</param>
            <param name="item">iter函数定义的Compound变量，解析完成后将生成的变量添加到此变量中</param>
            <param name="rtinfo">运行环境</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcMembergroup(MetaFly.Parse.ParseParamAgent,System.Collections.Generic.List{System.String},MetaFly.Datum.Element.CompoundItem,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            membergroup变量定义解析函数
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="memberNameList">变量名称列表，iter函数解析结束后删除变量时使用</param>
            <param name="item">iter函数定义的Compount变量，解析完成后将生成的变量的子变量均添加到此变量中</param>
            <param name="rtinfo">运行环境</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcVariable(MetaFly.Parse.ParseParamAgent,System.Collections.Generic.List{System.String},MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            variable变量定义解析函数
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="memberNameList">变量名称列表，iter函数解析结束后删除变量时使用</param>
            <param name="rtinfo">运行环境</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcOper(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            oper变量定义解析函数
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义组合元素缺省值。
            返回定义了缺省值的组合元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcDefaultMember(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Element.CompoundItem,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            计算member缺省值
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="item">父级数据</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcDefaultMembergroup(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Element.CompoundItem,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            计算membergroup缺省值
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="item">父级数据</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.CalcDefaultFunc(MetaFly.Parse.ParseParamAgent,System.Collections.Generic.List{System.String},MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            在计算缺省值时创建自定义函数
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="customFunctionNameList">自定义函数名称列表</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证各子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.VerifyChild(MetaFly.Parse.ParseParamAgent)">
            <summary>
            验证func、variable、member、oper、membergroup元素
            variable:必须定义名称，可定义缺省值
            member:必须定义名称，可定义缺省值
            oper:可定义名称，不能定义缺省值
            membergroup:可定义名称，不能定义缺省值
            </summary>
            <param name="paraminfo">参数定义</param>
            <returns>通过返回success,否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterFunction.Create">
            <summary>
            创建IterFunction对象，用于函数注册
            </summary>
            <returns>返回IterFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.IterretFunction">
            <summary>
            resultvalue iterret(f?:func,v?:variable,o?:oper,l?:log,r:result)
            顺序函数，但返回值根据result参数解析
            func:支持局部的函数定义，可空
            variable：局部变量，可空
            oper：操作，可空
            log：打印日志，可空
            result：返回XPD解析结果
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IterretFunction.#ctor">
            <summary>
            构造函数，定义函数名称为iterret
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.IterretFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.IterretFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类IterFunction的CalcDefault函数，计算缺省值，定义组合元素缺省值。
            返回result参数定义的缺省值
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterretFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了IterFunction的Verify函数，验证各子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterretFunction.VerifyChild(MetaFly.Parse.ParseParamAgent)">
            <summary>
            重写了PrototypeFunc的VerifyChild函数，验证func、variable、oper、result子元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IterretFunction.Create">
            <summary>
            创建IterretFunction对象，用于函数注册
            </summary>
            <returns>返回IterretFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.ListFunction">
            <summary>
            _list list(m...:item)
            元素列表生成函数.解析所有item的结果，并以list结构将结果返回    
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ListFunction.#ctor">
            <summary>
            构造函数，定义函数名称为list，参数个数为0个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ListFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现了PrototypeFunc的Calc函数，返回列表
            member参数:Meta类型，List元素定义（可多个）
            <example>
            弱化版的iter函数，list仅支持member标签。
            该函数将member标签的解析结果依次存入ListData中返回 
            </example>
            返回值:List类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ListFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            实现了PrototypeFunc的Verify函数，验证member子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ListFunction.Create">
            <summary>
            创建ListFunction对象，用于函数注册
            </summary>
            <returns>返回ListFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.MaxFunction">
            <summary>
            simple max(p:sourcelist, p:compref, p:style)
            按规则取sourcelist列表中最大值(最小)函数
            compref:sourcelist的取值规则，值为空时，取根节点
            style：compref取值转化排序规则，例如："long",取值转化为long类型并升序排，返回最大值。"-long"，取值转化为long类型并降序排，返回最小值
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MaxFunction.#ctor">
            <summary>
            构造函数，定义函数名称为max
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MaxFunction.calcValue(MetaFly.Datum.Figure.ListData,System.String,System.String)">
             <summary>
             实现MultiCompareFunction定义calcValue函数，获取最大值
             返回值：Meta类型
             <example>
             三元函数，比较条件可省略，利用param1为listdata类型，对param1按照param2规则、param3类型进行排序，取排序后的序列的最后一个元素，作为返回值
             若升序排（param3：long），则max返回最大值，若降序排（param3：-long），则max返回最小值
             <code>
             <oper value="func:max">
              <param value = "func:child" >
                <param value="member:input.sgdfile"/>
                <param value = "ZC_area/Track_list/Track/Id"/>
              </param>
              <param value=""/>
              <param value = "long"/>
            </oper>
             </code>
             <output>
             返回Track下Id列表的最大值
             </output>
             </example>
             </summary>
             <param name="listdata">列表</param>
             <param name="compref">比较条件</param>
             <param name="style">比较类型</param>
             <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MaxFunction.canCalc(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Figure.ListData,System.String,System.String)">
            <summary>
            判断是否可计算
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="listdata">列表数据</param>
            <param name="compref">比较条件</param>
            <param name="style">比较类型</param>
            <returns>可计算返回</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MaxFunction.Create">
            <summary>
            创建MaxFunction对象，用于函数注册
            </summary>
            <returns>返回MaxFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.MinFunction">
            <summary>
            simple min(p:sourcelist, p:compref, p:style)
            按规则取sourcelist列表中最小值(最大)函数
            compref:sourcelist的取值规则，值为空时，取根节点
            style：compref取值转化排序规则，例如："long",取值转化为long类型并升序排，返回最小值。"-long"，取值转化为long类型并降序排，返回最大值
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MinFunction.#ctor">
            <summary>
            构造函数，定义函数名称为min
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MinFunction.calcValue(MetaFly.Datum.Figure.ListData,System.String,System.String)">
            <summary>
            实现MultiCompareFunction定义calcValue函数，获取最小值
            返回值：Meta类型
            </summary>
            <param name="listdata">列表</param>
            <param name="compref">比较条件</param>
            <param name="style">比较类型</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MinFunction.canCalc(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Figure.ListData,System.String,System.String)">
            <summary>
            判断是否可计算
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="listdata">列表数据</param>
            <param name="compref">比较条件</param>
            <param name="style">比较类型</param>
            <returns>可计算返回</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MinFunction.Create">
            <summary>
            创建MinFunction对象，用于函数注册
            </summary>
            <returns>返回MinFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.SelectFirstFunction">
            <summary>
            _list selectfirst(s:sourcelist,q:condition)
            从sourcelist列表中选择满足condition条件的第一个元素
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SelectFirstFunction.#ctor">
            <summary>
            构造函数，定义函数名称为selectfirst
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.SelectFirstFunction.calcValue(System.Collections.Generic.List{MetaFly.Datum.Figure.MetaData},MetaFly.Datum.Figure.MetaData)" -->
        <member name="M:MetaFly.Interpreter.SelectFirstFunction.Create">
            <summary>
            创建SelectFirstFunction对象，用于函数注册
            </summary>
            <returns>返回SelectFirstFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.SelectFunction">
            <summary>
            _list select(s:sourcelist,q:condition)
            从sourcelist列表中选择满足condition条件的所有元素
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SelectFunction.#ctor">
            <summary>
            构造函数，定义函数名称为select，参数个数为0个
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SelectFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，返回满足条件的元素
            source参数:List类型，不可存在空元素。
            qualification参数:Bool类型，条件定义；
            返回值:List类型，存储了满足条件的元素
            <example>
            遍历source列表，根据qualification条件筛选出目标数据，返回ListData集合
            <code>
            <source value="func:select" alias="block">
             <source value="alias:self" alias="allblock"/>
             <qualification value="func:exist">
               <param value="func:child">
                 <param value="alias:allblock"/>
                 <param value="Work_zone/Section_id"/>
               </param>
             </qualification>
            </source>
            </code>
            <output>
            返回存在Work_zone/Section_id的所有allblock组成的ListData
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SelectFunction.calcValue(System.Collections.Generic.List{MetaFly.Datum.Figure.MetaData},MetaFly.Datum.Figure.MetaData)">
            <summary>
            保存满足条件的数据至列表
            返回值:false，继续查找
            </summary>
            <param name="itemData">列表</param>
            <param name="item">满足条件的元素</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SelectFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证source,qualification子元素
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SelectFunction.Create">
            <summary>
            创建SelectFunction对象，用于函数注册
            </summary>
            <returns>返回SelectFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.SortFunction">
            <summary>
            _list sort(p:sourcelist, p:compref, p:style)
            列表排序函数,返回一个新的排序后的list
            sourcelist:被排序源。排序不影响sourcelist的顺序
            compref：sourcelist的取值规则，值为空时，取根节点。多排时，以";"分号分隔
            style，升降序规则，与compref对应，多排时，以";"分号分隔
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SortFunction.#ctor">
            <summary>
            构造函数，定义函数名称为sort
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.SortFunction.calcValue(MetaFly.Datum.Figure.ListData,System.String,System.String)">
            <summary>
            实现MultiCompareFunction定义calcValue函数，获取排序的列表
            返回值：Meta类型
            <example>
            根据param2（规则）、param3（升降序）对param1（Arrayitem）进行排序。与reorderfunction不同的是，本函数先拷贝param1，
            对拷贝的数据进行排序，返回排序后的结果，并不会影响param1中数据的顺序
            <code>
            <variable name="xmlBlockSortbyID" value="func:sort">
             <param value="func:child">
               <param value="member:input.sgdfile"/>
               <param value="ZC_area/Block"/>
             </param>
             <param value="Id"/>
             <param value="long"/>
            </variable>    
            </code>
            <output>
            输出block按照id升序排后的ListData
            </output>
            </example>
            </summary>
            <param name="listdata">列表</param>
            <param name="compref">比较条件</param>
            <param name="style">比较类型</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SortFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.SortFunction.Create">
            <summary>
            创建SortFunction对象，用于函数注册
            </summary>
            <returns>返回SortFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.TransformFunction">
            <summary>
            _list transform(s:sourcelist, m:oper)
            对sourcelist列表的每一元素按oper操作后，将操作结果存入新列表返回
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.TransformFunction.#ctor">
            <summary>
            构造函数，定义函数名称为transform，参数个数为0个
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Interpreter.TransformFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)" -->
        <member name="M:MetaFly.Interpreter.TransformFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证source子元素和member子元素。
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.TransformFunction.Create">
            <summary>
            创建TransformFunction对象，用于函数注册
            </summary>
            <returns>返回TransformFunction</returns>       
        </member>
        <!-- Badly formed XML comment ignored for member "T:MetaFly.Interpreter.PrototypeFunc" -->
        <member name="F:MetaFly.Interpreter.PrototypeFunc.parameterCount">
            <summary>
            函数参数个数，用于Verify函数
            </summary>
        </member>
        <member name="P:MetaFly.Interpreter.PrototypeFunc.Name">
            <summary>
            函数名称
            </summary>
        </member>
        <member name="F:MetaFly.Interpreter.PrototypeFunc.functionList">
            <summary>
            保存当前作用域内可访问的函数，不包括用户自定义函数，以名称为主键
            </summary>
        </member>
        <member name="F:MetaFly.Interpreter.PrototypeFunc.functionAssemblyList">
            <summary>
            加载解释函数的程序集名称列表
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.#ctor(System.Int32)">
            <summary>
            构造函数，初始化参数个数
            </summary>
            <param name="paramcount">参数个数</param>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.ParseParameters(System.Collections.Generic.List{MetaFly.Datum.Element.TermItem}@,MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            初始化函数参数列表
            </summary>
            <param name="parameterlist">参数列表</param>
            <param name="paraminfo">函数参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.InitParameter(MetaFly.Datum.Element.TermItem,System.Boolean@)">
            <summary>
            初始化布尔参数
            </summary>
            <param name="term">参数数据</param>
            <param name="data">数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.InitParameter(MetaFly.Datum.Element.TermItem,System.Int64@)">
            <summary>
            初始化整型参数
            </summary>
            <param name="term">参数数据</param>
            <param name="data">数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.InitParameter(MetaFly.Datum.Element.TermItem,System.Double@)">
            <summary>
            初始化浮点参数
            </summary>
            <param name="term">参数数据</param>
            <param name="data">数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.InitParameter(MetaFly.Datum.Element.TermItem,System.String@)">
            <summary>
            初始化字符串参数
            </summary>
            <param name="term">参数数据</param>
            <param name="data">数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.InitParameter(MetaFly.Datum.Element.TermItem,MetaFly.Datum.Figure.EntryData@)">
            <summary>
            初始化输入参数
            </summary>
            <param name="term">参数数据</param>
            <param name="data">数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.InitParameter(MetaFly.Datum.Element.TermItem,MetaFly.Datum.Figure.ListData@)">
            <summary>
            初始化List参数
            </summary>
            <param name="term">参数数据</param>
            <param name="data">数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            解析抽象函数，子类具体定义实现
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            计算缺省值的缺省函数
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>缺省元素</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            验证解释定义函数
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.RegistFunction(System.String,System.Int64)">
            <summary>
            注册函数，调用MetaFly解析前需要运行的函数，用来注册内置函数
            采用反射机制，但只能注册同一程序集内定义的函数。
            <param name="assemblyname">程序集名称</param>
            <param name="funcDefaultVal">缺省值</param>
            </summary>
        </member>
        <member name="F:MetaFly.Interpreter.PrototypeFunc.funcDefaultValue">
            <summary>
            函数解析中的缺省值
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.AddFunc(MetaFly.Interpreter.ExportFunc,System.Lazy{MetaFly.Interpreter.PrototypeFunc})">
            <summary>
            添加函数
            </summary>
            <param name="func">函数定义</param>
            <returns>成功返回true，没有重复定义；否则返回false</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.FindFunc(System.String)">
            <summary>
            返回指定名称的函数对象
            </summary>
            <param name="name">函数名称</param>
            <returns>函数对象，没有定义返回null</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.LogInfo(MetaFly.Summer.Generic.LogLevel,System.String)">
            <summary>
            同时输出到控制台和文本中
            </summary>
            <param name="logLevel">日志等级</param>
            <param name="info">Log信息</param>
        </member>
        <member name="M:MetaFly.Interpreter.PrototypeFunc.LogError(System.String,System.String)">
            <summary>
            报错输出日志信息
            </summary>
            <param name="errorCode"></param>
            <param name="errorInfo"></param>
        </member>
        <member name="T:MetaFly.Interpreter.TrinaryFunction">
            <summary>
            三元函数抽象类
            继承自PrototypeFunc
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.TrinaryFunction.#ctor">
            <summary>
            构造函数，明确参数个数为3个
            </summary>
        </member>
        <member name="T:MetaFly.Interpreter.ArithUnaryFunction">
            <summary>
            一元算术运算抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            继承自UnaryFunction
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ArithUnaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.ArithUnaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，完成了算术运算并返回结果.
            第一个参数:Double类型
            返回值:Double类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ArithUnaryFunction.calcValue(System.Double)">
            <summary>
            抽象函数，子类用以实现计算过程
            </summary>
            <param name="param">计算参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.CeilFunction">
            <summary>
            _double ceil(p:value)
            向上取整函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CeilFunction.#ctor">
            <summary>
            构造函数，定义函数名称为ceil
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CeilFunction.calcValue(System.Double)">
            <summary>
            实现类ArithUnaryFunction的calcValue函数，向上取整
            </summary>
            <param name="param">参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.CeilFunction.Create">
            <summary>
            创建CeilFunction对象，用于函数注册
            </summary>
            <returns>返回CeilFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.FloorFunction">
            <summary>
            _double floor(p:value)
            向下取整函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.FloorFunction.#ctor">
            <summary>
            构造函数，定义函数名称为floor
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.FloorFunction.calcValue(System.Double)">
            <summary>
            实现类ArithUnaryFunction的calcValue函数，向下取整
            </summary>
            <param name="param">参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.FloorFunction.Create">
            <summary>
            创建FloorFunction对象，用于函数注册
            </summary>
            <returns>返回FloorFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.RoundFunction">
            <summary>
            _double round(p:value)
            四舍五入函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.RoundFunction.#ctor">
            <summary>
            构造函数，定义函数名称为round
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.RoundFunction.calcValue(System.Double)">
            <summary>
            实现类ArithUnaryFunction的calcValue函数，四舍五入
            </summary>
            <param name="param">参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.RoundFunction.Create">
            <summary>
            创建RoundFunction对象，用于函数注册
            </summary>
            <returns>返回RoundFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.BoolCompUnaryFunction">
            <summary>
            一元算术比较抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.BoolCompUnaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.BoolCompUnaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，完成了逻辑运算并返回结果.
            第一个参数:Bool类型
            返回值:Bool类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.BoolCompUnaryFunction.calcValue(System.Boolean)">
            <summary>
            抽象函数，子类用以实现计算过程
            </summary>
            <param name="param">参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.EvenFunction">
            <summary>
            _bool even(p:value)
            判断整数是否为偶数函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EvenFunction.#ctor">
            <summary>
            构造函数，定义函数名称为even
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.EvenFunction.calcValue(System.Int64)">
            <summary>
            实现类ArithCompUnaryFunction的calcValue函数，判断整数是否为偶数
            </summary>
            <param name="param">参数</param>
            <returns>运算结果，如果为偶数返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Interpreter.EvenFunction.Create">
            <summary>
            创建EvenFunction对象，用于函数注册
            </summary>
            <returns>返回EvenFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ArithCompUnaryFunction">
            <summary>
            一元算术比较抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ArithCompUnaryFunction.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名称</param>
        </member>
        <member name="M:MetaFly.Interpreter.ArithCompUnaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，完成了逻辑运算并返回结果.
            第一个参数:Long类型
            返回值:Bool类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ArithCompUnaryFunction.calcValue(System.Int64)">
            <summary>
            抽象函数，子类用以实现计算过程
            </summary>
            <param name="param">运算参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.NotFunction">
            <summary>
            _bool not(p:value)
            布尔取反函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.NotFunction.#ctor">
            <summary>
            构造函数，定义函数名称为not
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.NotFunction.calcValue(System.Boolean)">
            <summary>
            实现类BoolCompUnaryFunction的calcValue函数，取反
            </summary>
            <param name="param">第一个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.NotFunction.Create">
            <summary>
            创建NotFunction对象，用于函数注册
            </summary>
            <returns>返回NotFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.OddFunction">
            <summary>
            _bool odd(p:value)
            判断整数是否为奇数函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.OddFunction.#ctor">
            <summary>
            构造函数，定义函数名称为odd
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.OddFunction.calcValue(System.Int64)">
            <summary>
            实现类ArithCompUnaryFunction的calcValue函数，判断整数是否为奇数
            </summary>
            <param name="param">第一个参数</param>
            <returns>运算结果，如果为奇数返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Interpreter.OddFunction.Create">
            <summary>
            创建OddFunction对象，用于函数注册
            </summary>
            <returns>返回OddFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.CountFunction">
            <summary>
            _long count(p:sourcelist)
            计算List元素个数的函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CountFunction.#ctor">
            <summary>
            构造函数，定义函数名称为count
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CountFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数， 计算List元素个数
            第一个参数:List类型
            返回值：Long类型，列表元素个数
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.CountFunction.Create">
            <summary>
            创建CountFunction对象，用于函数注册
            </summary>
            <returns>返回CountFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ExistFunction">
            <summary>
            _bool exist(p:sourcelist)
            判断List是否存在元素，存在返回TRUE
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ExistFunction.#ctor">
            <summary>
            构造函数，定义函数名称为exist
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ExistFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，判断List是否存在元素
            第一个参数:List类型
            返回值：Bool类型
            <example>
            通常与child函数组合使用
            <code>
            <oper value="func:exist"> exist判断List中是否存在元素，存在则返回TRUE，否则返回FALSE
                <param value="func:child"> child函数取AA中的BB/CC子标签，存入一个List中，若不存在BB/CC子标签则child返回一个空List
                    <param value="member:AA"/>
                    <param value="BB/CC"/>
                </param>
            </oper>
            </code>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ExistFunction.Create">
            <summary>
            创建ExistFunction对象，用于函数注册
            </summary>
            <returns>返回ExistFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.FirstFunction">
            <summary>
            meta first(p:sourcelist)
            返回sourcelist第一个元素函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.FirstFunction.#ctor">
            <summary>
            构造函数，定义函数名称为first
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.FirstFunction.calcValue(MetaFly.Datum.Figure.ListData)">
            <summary>
            实现类NavigateUnaryFunction的calcValue函数，取List第一个元素
            </summary>
            <param name="param">第一个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.FirstFunction.Create">
            <summary>
            创建FirstFunction对象，用于函数注册
            </summary>
            <returns>返回FirstFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.LastFunction">
            <summary>
            meta last(p:sourcelist)
            返回sourcelist最后一个元素函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LastFunction.#ctor">
            <summary>
            构造函数，定义函数名称为last
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.LastFunction.calcValue(MetaFly.Datum.Figure.ListData)">
            <summary>
            实现类NavigateUnaryFunction的calcValue函数，取List最后一个元素
            </summary>
            <param name="param">第一个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.LastFunction.Create">
            <summary>
            创建LastFunction对象，用于函数注册
            </summary>
            <returns>返回LastFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.MergeListFunction">
            <summary>
            _list mergelist(p:sourcelist)
            以拼接的方式将二维sourelist合并为一维，并返回
            sourcelist：二维ListData，要求其子元素必须为一个ListData
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MergeListFunction.#ctor">
            <summary>
            构造函数，定义函数名称为mergelist
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MergeListFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，如果list的元素是list，则把此list的元素添加到list中
            第一个参数:List类型
            返回值:List类型，新List
            <example>
            针对ListData（param1），遍历其子元素，将子元素依次存入ListData输出，该子元素可能为孤立元素，此时直接存入，
            该子元素也可能是ListData元素，此时调用AddRange将该子元素存入ListData
            <code>
             <variable name="xmlUpCloseTracklist" value="func:mergelist">
             <param value="func:transform">
               <source value="func:sort" alias="block">
                 <param value="func:child">
                   <param value="member:input.sgdfile"/>
                   <param value="ZC_area/Block"/>
                 </param>
                 <param value="Id"/>
                 <param value="long"/>
               </source>
               <member value="func:select">
                 <source value="func:child" alias="closetrack">
                   <param value="alias:block"/>
                   <param value="Closed_track_end"/>
                 </source>
                 <qualification value="func:devicedir">
                   <param value="alias:closetrack"/>
                 </qualification>
               </member>
             </param>
            </variable>
            </code>
            <output>
            transform函数对升序排列的Block进行select操作，操作结果保存在ListData中，mergelist函数对该ListData统一存放在ListData中
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MergeListFunction.CalcDefault(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            重写类PrototypeFunc的CalcDefault函数，计算缺省值，定义数组元素。
            返回ListData元素
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>返回缺省数据</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MergeListFunction.Create">
            <summary>
            创建MergeListFunction对象，用于函数注册
            </summary>
            <returns>返回MergeListFunction</returns>
        </member>
        <member name="T:MetaFly.Interpreter.ListUnaryFunction">
            <summary>
            一元列表操作抽象类，完成了函数参数的解析并返回运算结果，不可实例化
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ListUnaryFunction.#ctor">
            <summary>
            构造函数，明确函数名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MetaFly.Interpreter.ListUnaryFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，完成了逻辑运算并返回结果.
            第一个参数：List类型。
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ListUnaryFunction.calcValue(MetaFly.Datum.Figure.ListData)">
            <summary>
            抽象函数，子类用以实现巡航过程
            </summary>
            <param name="param">第一个参数</param>
            <returns>运算结果</returns>
        </member>
        <member name="T:MetaFly.Interpreter.CopyFunction">
            <summary>
            term copy(p:source)
            复制函数，MetaFly中均是对象引用，如果需要值引用则要调用本函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CopyFunction.#ctor">
            <summary>
            构造函数，定义函数名称为copy
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.CopyFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，创建新元素并赋值
            第一个参数:TermItem类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.CopyFunction.Create">
            <summary>
            创建CopyFunction对象，用于函数注册
            </summary>
            <returns>返回CopyFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.GetTypeFunction">
            <summary>
            _string gettype(p:entry)
            获取输入数据类型.
            对于XML型输入，返回该节点的标签名
            对于矩阵型输入，返回该节点的表名或者列明，这取决于节点类型
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.GetTypeFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，获取输入数据的类型
            第一个参数:Entry类型
            <example>
            次函数仅针对输入数据类型（EntryData），对于xml类型的输入，返回param的标签名
            <code>
            <member name="Test" value="func:iter">
             <member name="test" value="func:gettype">
               <param value="func:child">
                   <param value="member:input.vsxmlfile"/>
                   <param value="EOA/Validity_time"/>
                 </param>       
             </member>
             <oper value="func:print(member:test)"/>
            </member>
            </code>
            <output>
            Validity_time
            </output>
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.GetTypeFunction.Create">
            <summary>
            创建GetTypeFunction对象，用于函数注册
            </summary>
            <returns>返回GetTypeFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.IsNullFunction">
            <summary>
            _bool isnull(p:source)
            判断TermItem元素是否为空函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IsNullFunction.#ctor">
            <summary>
            构造函数，定义函数名称为isnull
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IsNullFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，判断数据是否为空
            第一个参数:简单类型
            返回值:Bool类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IsNullFunction.Create">
            <summary>
            创建IsNullFunction对象，用于函数注册
            </summary>
            <returns>返回IsNullFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.IsNumStrFunction">
            <summary>
            判断字符串是否可转换为整型函数
            一元函数，继承自UnaryFunction
            <example>
            判断string是否能转换为long，能则返回true，否则返回false
            <code>
            <member name="Test" value="func:iter">
            <member name="test" value="100.111"/>        
            <oper value="func:print">
             <param value="func:isnumstr">
               <param value="member:test"/>
             </param>      
            </oper>
            </member>
            </code>
            <output>
            FALSE
            </output>
            </example>
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IsNumStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为isnumstr
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.IsNumStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，判断字符串是否可转换为整型
            第一个参数:String类型
            返回值:Bool类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.IsNumStrFunction.Create">
            <summary>
            创建IsNumFunction对象，用于函数注册
            </summary>
            <returns>返回IsNumStrFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.JudgeFunction">
            <summary>
            casevalue judge(p:condition,c...:cbranch,d?:dbranch)
            功能类似switch。将condition的返回值作为字符串与cbranch的cond进行匹配，若匹配成功则执行该case的value，否则执行default，若default不存在，则报错
            condition：条件
            cbranch：case分支。可多选
            dbranch:default分支。可选
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.JudgeFunction.#ctor">
            <summary>
            构造函数，定义函数名称为judge
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.JudgeFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，分支执行函数
            第一个参数:String类型，条件参数
            case参数:当参数等于cond定义时，取该case的value;其中cond可定义为member、alias，但不可定义为func类型。
            default参数：当参数不等于任何一个case的cond定义时，取default的value。
            case和default参数可定义action，如果为halt，则中断解析过程
            返回值:对应的case（default）定义value解析结果。
            <examlpe>
            该函数param配置将被解析为string类型，因此case为string的匹配
            <code>
            <default value="func:judge(member:type2)">
             <case cond="integer" value="Integer"/>
             <case cond="boolean" value="Boolean"/>
             <case cond="speed" value="Speed"/>
             <case cond="distance" value="Distance"/>
             <case cond="acceleration" value="Acceleration"/>
             <case cond="time" value="Time"/>
            </default>
            </code>
            <output>
            返回对应case的value值。若无case匹配，且无default分支，则报错
            </output>
            </examlpe>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.JudgeFunction.Verify(System.Collections.Generic.List{MetaFly.Parse.ParseParamAgent})">
            <summary>
            重写了PrototypeFunc的Verify函数，验证param子元素、case子元素和default子元素。
            </summary>
            <param name="paraminfolist">参数定义</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Interpreter.JudgeFunction.Create">
            <summary>
            创建JudgeFunction对象，用于函数注册
            </summary>
            <returns>返回JudgeFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.MbrrefFunction">
            <summary>
            term mbrref(p:memberName)
            根据数据名称获取数据变量
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MbrrefFunction.#ctor">
            <summary>
            构造函数，定义函数名称为mbrref
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.MbrrefFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现PrototypeFunc的Calc函数，根据数据名称获取数据
            第一个参数:String类型
            返回值:TermItem型
            <example>
            指针指向param。即引用传递,注意此处传递的param是变量名，不加：member、alias
            <code>
            <member name="Test" value="func:iter">
             <member name="test" value="100"/> 
             <member name="ref" value="func:mbrref">
               <param value="test"/>      
             </member>
             <oper value="func:print(member:ref)"/>    100
             <oper value="func:inc(member:ref)"/>      自加
             <oper value="func:print(member:test)"/>   101
             <oper value="func:print(member:ref)"/>    101  
            </member>
            </code>
            </example>
            <output>
            100
            101
            101
            </output>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.MbrrefFunction.Create">
            <summary>
            创建MemberFunction对象，用于函数注册
            </summary>
            <returns>返回MemberFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.ParentFunction">
            <summary>
            entry parent(p:entrydata)
            计算输入元素的父元素函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ParentFunction.#ctor">
            <summary>
            构造函数，定义函数名称为parent
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ParentFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数， 计算输入元素的父元素
            第一个参数:Entry类型
            返回值:Entry类型
            <example>
            返回param的上级数据（EntryData）
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ParentFunction.Create">
            <summary>
            创建ParentFunction对象，用于函数注册
            </summary>
            <returns>返回ParentFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.PrintFunction">
            <summary>
            _string print(p:str)
            打印日志信息至控制台
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PrintFunction.#ctor">
            <summary>
            构造函数，定义函数名称为print
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.PrintFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，打印日志信息，输出至控制台
            第一个参数:String类型
            返回值:success
            <example>
            用法一：直接输出特性字符串hello world
            <code>
            <oper value="func:print(hello world)"/>
            </code>
            用法二：输出数组元素Berth_loop_Freq中对应下标的值
            <code>
            <oper value="func:print(member:Berth_loop_Freq.0)"/> or <oper value="func:print(member:Berth_loop_Freq.1)"/>  .数字 表示数组的下标  
            </code>
            用法三：直接打印name组合变量的值
            <code>
            <oper value="func:print(member:XXXX)"/>
            </code>
            print函数可输出member：和alias：的值
            </example>
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.PrintFunction.Create">
            <summary>
            创建PrintFunction对象，用于函数注册
            </summary>
            <returns>返回PrintFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.StrLenFunction">
            <summary>
            _long strlen(p:strlen)
            返回字符串长度函数
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.StrLenFunction.#ctor">
            <summary>
            构造函数，定义函数名称strlen
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.StrLenFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，返回字符串长度
            第一个参数:String类型
            返回值:Long类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.StrLenFunction.Create">
            <summary>
            创建StrLenFunction对象，用于函数注册
            </summary>
            <returns>返回StrLenFunction</returns>       
        </member>
        <member name="T:MetaFly.Interpreter.ToStrFunction">
            <summary>
            _string tostr(p:entrydata)
            输入类型转换成字符串
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ToStrFunction.#ctor">
            <summary>
            构造函数，定义函数名称为tostr
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.ToStrFunction.Calc(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            实现UnaryFunction的Calc函数，输入类型转换成字符串
            第一个参数:Entry类型
            返回值:String类型
            </summary>
            <param name="paraminfo">参数定义</param>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Interpreter.ToStrFunction.Create">
            <summary>
            创建ToStrFunction对象，用于函数注册
            </summary>
            <returns>返回ToStrFunction</returns>        
        </member>
        <member name="T:MetaFly.Interpreter.UnaryFunction">
            <summary>
            一元函数抽象类
            继承自PrototypeFunc
            </summary>
        </member>
        <member name="M:MetaFly.Interpreter.UnaryFunction.#ctor">
            <summary>
            构造函数，明确参数个数为1个
            </summary>
        </member>
        <member name="T:MetaFly.Common.ExtendReflector">
            <summary>
            读取MetaFly扩展配置文件MFConfig.xml
            </summary>
        </member>
        <member name="P:MetaFly.Common.ExtendReflector.MFConfigXmlPath">
            <summary>
            XML扩展配置路径属性
            </summary>
        </member>
        <member name="F:MetaFly.Common.ExtendReflector.MFConfigXmlDefaultPath">
            <summary>
            默认配置路径
            </summary>
        </member>
        <member name="M:MetaFly.Common.ExtendReflector.GetMFConfigXmlPath">
            <summary>
            获取MetaFly配置XML路径
            </summary>
            <returns>配置XML路径</returns>
        </member>
        <member name="P:MetaFly.Common.ExtendReflector.MetaFlyConfigXml">
            <summary>
            XML扩展配置属性
            </summary>
        </member>
        <member name="M:MetaFly.Common.ExtendReflector.CreateExportInstanceByBaseClass``1(System.String,System.String)">
            <summary>
            根据baseClassName和style加载className指定的输出扩展类，即加载Export标签下满足条件的类
            </summary>
            <typeparam name="T">返回值泛型</typeparam>
            <param name="baseClassName">Export子标签名</param>
            <param name="style">注册style</param>
            <returns>加载成功，返回T类型实例，加载不成功返回T类型默认值</returns>
        </member>
        <member name="M:MetaFly.Common.ExtendReflector.IsPerformanceMode">
            <summary>
            获取性能测试配置
            </summary>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Common.ErrorException">
            <summary>
            错误异常
            </summary>
        </member>
        <member name="T:MetaFly.Common.Result.HaltException">
            <summary>
            中断异常
            </summary>
        </member>
        <member name="T:MetaFly.Common.MfStreamWriter">
            <summary>
            MetaFly写流器，封装StreamWriter
            </summary>
        </member>
        <member name="F:MetaFly.Common.MfStreamWriter.streamWriter">
            <summary>
            为解决StreamWirter最后一行会有空白，造成双链对比不一致
            </summary>
        </member>
        <member name="P:MetaFly.Common.MfStreamWriter.Encoding">
            <summary>
            写流器编码格式
            </summary>
        </member>
        <member name="M:MetaFly.Common.MfStreamWriter.#ctor(System.IO.StreamWriter)">
            <summary>
            构造器
            </summary>
            <param name="sw"></param>
        </member>
        <member name="M:MetaFly.Common.MfStreamWriter.WriteLine(System.String)">
            <summary>
            写行
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:MetaFly.Common.MfStreamWriter.WriteLine(System.String,System.Object)">
            <summary>
            格式化输出放
            </summary>
            <param name="format">格式</param>
            <param name="arg0">输出值</param>
        </member>
        <member name="M:MetaFly.Common.MfStreamWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            格式化输出行
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:MetaFly.Common.MfStreamWriter.Close">
            <summary>
            关闭写流器
            </summary>
        </member>
        <member name="M:MetaFly.Common.MfStreamWriter.Dispose">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="T:MetaFly.Common.Executor">
            <summary>
            执行器，用于执行xml配置的解析，包括draft和final部分
            </summary>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseParamAgentWithAppendFormatMessage(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo,System.String,System.String[])">
            <summary>
            解析ParseParamAgent，错误信息将被AppendFormat到FunctionResult
            </summary>
            <param name="agent">XML解释代理</param>
            <param name="rtinfo">上下文环境</param>
            <param name="errorMessage">错误信息格式</param>
            <param name="messageParams">错误信息填充参数，需匹配格式</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseParamAgentWithAppendMessage(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo,System.String)">
            <summary>
            解析ParseParamAgent，错误信息将被AppendFormat到FunctionResult
            </summary>
            <param name="agent">XML解释代理</param>
            <param name="rtinfo">上下文环境</param>
            <param name="errorMessage">错误信息格式</param>        
            <returns></returns>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseParamAgentWithCreateMessage(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo,System.String,System.String[])">
            <summary>
            解析ParseParamAgent，错误信息将被Create
            </summary>
            <param name="agent">XML解释代理</param>
            <param name="rtinfo">上下文环境</param>
            <param name="errorMessage">错误信息格式</param>
            <param name="messageParams">错误信息填充参数，需匹配格式</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseXmlDraft(System.Collections.Generic.Dictionary{System.String,MetaFly.Datum.Element.TermItem},MetaFly.Summer.IO.XmlVisitor,System.Collections.Generic.IEnumerable{System.String},System.Int64)">
            <summary>
            根据输入数据，解析单个draft
            </summary>
            <param name="inputlist">输入数据</param>
            <param name="draft">xml配置规则</param>
            <param name="externalAssembly">外置程序集</param>
            <param name="funcDefaultVal">函数默认值</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseXmlDrafts(System.Collections.Generic.Dictionary{System.String,MetaFly.Datum.Element.TermItem},System.Collections.Generic.IEnumerable{MetaFly.Summer.IO.XmlVisitor},System.Collections.Generic.IEnumerable{System.String},System.Int64)">
            <summary>
            批量解析draft下的member子标签，前面解析的member结果可在后面的member中使用
            </summary>
            <param name="inputlist">输入数据</param>
            <param name="drafts">xml配置规则集合</param>
            <param name="externalAssembly">外置程序集</param>
            <param name="funcDefaultVal">SimpleItem缺省默认值</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseXmlFinalWithStreamExporter(System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem,System.Boolean)">
            <summary>
            使用StreamExporter输出final配置,二进制输出
            </summary>
            <param name="outputPath">输出文件全URI</param>
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>
            <param name="isBigEndian">是否按大端输出</param>
            <returns>是否输出成功</returns>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseXmlFinalWithStreamExporterByFileMode(System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem,System.IO.FileMode,System.Boolean)">
            <summary>
            使用StreamExporter输出final配置,二进制输出.支持文件的追加
            </summary>
            <param name="outputPath">输出文件全URI</param>
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>
            <param name="mode">输出文件打开模式</param>
            <param name="isBigEndian">是否按大端输出</param>
            <returns>是否输出成功</returns>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseXmlFinalWithStringExporter(System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem)">
            <summary>
            使用StringExporter输出final配置,文本输出
            </summary>
            <param name="outputPath">输出文件全URI</param>
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>       
            <returns>是否输出成功</returns>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseXmlFinalWithXmlFmtExporter(System.String,System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem)">
            <summary>
            使用XmlFmtExporter输出final配置，XML文本输出
            </summary>
            <param name="outputPath">输出文件全URI</param>
            <param name="rootNodeName">XML输出文本的根节点名</param>
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>        
            <returns>是否输出成功</returns>
        </member>
        <member name="M:MetaFly.Common.Executor.ParseXmlFinalWithIniFmtExporter(System.String,MetaFly.Summer.IO.XmlVisitor,MetaFly.Datum.Element.TermItem,System.String,System.Boolean)">
            <summary>
            使用XmlFmtExporter输出final配置，XML文本输出
            </summary>
            <param name="outputPath">输出文件全URI</param>        
            <param name="finalConf">final配置</param>
            <param name="outputData">对应输出数据</param>   
            <param name="fileName">final配置文件名</param>  
            <param name="isUseStreamWriter">默认使用StreamWriter作为输出流，设置为false指定使用MfStreamWriter，该流可以解决StreamWirter最后一行会有空白的问题</param>  
            <returns>是否输出成功</returns>
        </member>
        <member name="M:MetaFly.Common.Executor.CreateMetaWriter(System.String,System.Boolean)">
            <summary>
            根据大小端生成二进制文件写入器
            </summary>
            <param name="fileName">文件名称</param>
            <param name="isBigEndian">文件名称</param>
            <returns>二进制文件写入器</returns>
        </member>
        <member name="M:MetaFly.Common.Executor.CreateMetaWriterWithFileMode(System.String,System.IO.FileMode,System.Boolean)">
            <summary>
            根据大小端生成二进制文件写入器
            </summary>
            <param name="fileName">文件名称</param>
            <param name="mode">输出文件打开模式</param>
            <param name="isBigEndian">文件名称</param>
            <returns>二进制文件写入器</returns>
        </member>
        <member name="T:MetaFly.Common.LogFormat">
            <summary>
            日志信息格式化类
            </summary>
        </member>
        <member name="M:MetaFly.Common.LogFormat.Format(System.String)">
            <summary>
            格式化日志信息，添加日期信息
            </summary>
            <param name="loginfo">日志</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="T:MetaFly.Common.OperatorHelper">
            <summary>
            操作符实现类：
            动态索引{}解析
            log解析
            </summary>
        </member>
        <member name="M:MetaFly.Common.OperatorHelper.BraceProcessor(System.String,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            寻址路径上包含{}的路径转换。将花括弧中的索引（member;/alias:）替换为真实值
            A.{B}.C.{D}.E or {A}.B.C.{D}.E   --> A.B.C.D.E
            支持{}的嵌套使用{member：XXX.{member:XX}}
            </summary>
            <param name="path">索引路径</param>
            <param name="rtinfo">上下文环境</param>
            <returns>是否进行了替换操作，是，则返回true，否，则返回false</returns>
        </member>
        <member name="M:MetaFly.Common.OperatorHelper.LogProcessor(MetaFly.Parse.ParseParamAgent,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            log标签解析
            </summary>
            <param name="logParam">log代理</param>
            <param name="rtinfo">运行时</param>
        </member>
        <member name="T:MetaFly.Common.BigEndianReader">
            <summary>
            大端数据输入类
            </summary>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.#ctor(System.IO.Stream)">
            <summary>
            构造函数，定义输出流
            </summary>
            <param name="stream">流对象</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.#ctor(System.String)">
            <summary>
            构造函数，根据文件流定义
            </summary>
            <param name="filename">文件名称</param> 
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.#ctor(System.Byte[])">
            <summary>
            构造函数，根据二进制流定义
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Read(System.Byte@)">
            <summary>
            以大端方式读取BYTE
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Read(System.Char@)">
            <summary>
            以大端方式读取char
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Read(System.Int16@)">
            <summary>
            以大端方式读取INT16
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Read(System.UInt16@)">
            <summary>
            以大端方式读取UINT16
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Read(System.Int32@)">
            <summary>
            以大端方式读取INT32
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Read(System.UInt32@)">
            <summary>
            以大端方式读取UINT32
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Read(System.Single@)">
            <summary>
            以大端方式读取float
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Read(System.Double@)">
            <summary>
            以大端方式读取double
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Conversion(System.Int16)">
            <summary>
            静态函数，将16位数转换为大端形式
            </summary>
            <param name="dataval">需转换的数据</param>
            <returns>大端数据</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Conversion(System.UInt16)">
            <summary>
            静态函数，将16位数转换为大端形式
            </summary>
            <param name="dataval">需转换的数据</param>
            <returns>大端数据</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Conversion(System.Int32)">
            <summary>
            静态函数，将32位数转换为大端形式
            </summary>
            <param name="dataval">需转换的数据</param>
            <returns>大端数据</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Conversion(System.UInt32)">
            <summary>
            静态函数，将32位数转换为大端形式
            </summary>
            <param name="dataval">需转换的数据</param>
            <returns>大端数据</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Conversion(System.UInt64)">
            <summary>
            静态函数，将64位数转换为大端形式
            </summary>
            <param name="dataval">需转换的数据</param>
            <returns>大端数据</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Conversion(System.Single)">
            <summary>
            静态函数，将单精度浮点数转换为大端形式
            </summary>
            <param name="dataval">需转换的数据</param>
            <returns>大端数据</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianReader.Conversion(System.Double)">
            <summary>
            静态函数，将双精度浮点数转换为大端形式
            </summary>
            <param name="dataval">需转换的数据</param>
            <returns>大端数据</returns>
        </member>
        <member name="T:MetaFly.Common.LittleEndianReader">
            <summary>
            小端数据输入类
            </summary>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.#ctor(System.IO.Stream)">
            <summary>
            构造函数，定义输出流
            </summary>
            <param name="stream">流对象</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.#ctor(System.String)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param> 
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.#ctor(System.Byte[])">
            <summary>
            构造函数，根据二进制流定义
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.Read(System.Byte@)">
            <summary>
            以小端方式读取BYTE
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.Read(System.Char@)">
            <summary>
            以小端方式读取char
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.Read(System.Int16@)">
            <summary>
            以小端方式读取INT16
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.Read(System.UInt16@)">
            <summary>
            以小端方式读取UINT16
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.Read(System.Int32@)">
            <summary>
            以小端方式读取INT32
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.Read(System.UInt32@)">
            <summary>
            以小端方式读取UINT32
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.Read(System.Single@)">
            <summary>
            以小端方式读取float
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianReader.Read(System.Double@)">
            <summary>
            以小端方式读取double
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="T:MetaFly.Common.MetaReader">
            <summary>
            二进制数据读取器抽象类，实现了IDisposable接口
            </summary>
        </member>
        <member name="F:MetaFly.Common.MetaReader.sw">
            <summary>
            二进制流
            </summary>
        </member>
        <member name="F:MetaFly.Common.MetaReader.swlen">
            <summary>
            字节流长度
            </summary>
        </member>
        <member name="M:MetaFly.Common.MetaReader.#ctor(System.IO.Stream)">
            <summary>
            构造函数，定义输出流
            </summary>
            <param name="stream">流对象</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.#ctor(System.String)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.#ctor(System.Byte[])">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="buffer">二进制数据流</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Close">
            <summary>
            关闭流
            </summary>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Dispose">
            <summary>
            实现IDisposable接口，调用Close函数
            </summary>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.Int64,System.Int64@)">
            <summary>
            读取指定长度的数据并转换为相应的有符号整数
            </summary>
            <param name="length">数据长度</param>
            <param name="data">数据</param>
            <returns>能够读出指定字节返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Common.MetaReader.ReadU(System.Int64,System.Int64@)">
            <summary>
            读取指定长度的数据并转换为相应的无符号整数
            </summary>
            <param name="length">数据长度</param>
            <param name="data">数据</param>
            <returns>能够读出指定字节返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.Int64,System.Double@)">
            <summary>
            读取指定长度的数据并转换为相应的浮点数
            </summary>
            <param name="length">数据长度</param>
            <param name="data">数据</param>
            <returns>能够读出指定字节返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.Int64,System.String@)">
            <summary>
            读取指定长度的数据并转换为字符串
            </summary>
            <param name="length">数据长度</param>
            <param name="data">数据</param>
            <returns>能够读出指定字节返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Common.MetaReader.CanRead(System.Int64)">
            <summary>
            检查数据流在当前位置是否能读取指定字节
            </summary>
            <param name="length">数据长度</param>
            <returns>能够读出指定字节返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.Byte@)">
            <summary>
            读取BYTE的抽象函数
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.Char@)">
            <summary>
            读取char的抽象函数
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.Int16@)">
            <summary>
            读取INT16的抽象函数
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.UInt16@)">
            <summary>
            读取UINT16的抽象函数
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.Int32@)">
            <summary>
            读取INT32的抽象函数
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.UInt32@)">
            <summary>
            读取UINT32的抽象函数
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.Single@)">
            <summary>
            读取float的抽象函数
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.Double@)">
            <summary>
            读取double的抽象函数
            </summary>
            <param name="data">返回结果</param>
        </member>
        <member name="M:MetaFly.Common.MetaReader.Read(System.String@,System.Int32)">
            <summary>
            读取String的虚函数
            </summary>
            <param name="data">返回结果</param>
            <param name="count">字符串长度</param>
        </member>
        <member name="T:MetaFly.Common.MetaDataHelper">
            <summary>
            MetaData转换辅助类
            </summary>
        </member>
        <member name="M:MetaFly.Common.MetaDataHelper.TranformMetaData2Bool(MetaFly.Datum.Figure.MetaData,System.Boolean@,MetaFly.IAnalysisDescribe)">
            <summary>
            将MetaData转换为bool
            </summary>
            <param name="value">转换后的数据</param>
            <param name="valuedata">需转换的数据</param>
            <param name="errobj">解释定义对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaDataHelper.TranformMetaData2Long(MetaFly.Datum.Figure.MetaData,System.Int64@,MetaFly.IAnalysisDescribe)">
            <summary>
            将MetaData转换为long
            </summary>
            <param name="value">转换后的数据</param>
            <param name="valuedata">需转换的数据</param>
            <param name="errobj">解释定义对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaDataHelper.TranformMetaData2Double(MetaFly.Datum.Figure.MetaData,System.Double@,MetaFly.IAnalysisDescribe)">
            <summary>
            将MetaData转换为string
            </summary>
            <param name="value">转换后的数据</param>
            <param name="valuedata">需转换的数据</param>
            <param name="errobj">解释定义对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaDataHelper.TranformMetaData2String(MetaFly.Datum.Figure.MetaData,System.String@,MetaFly.IAnalysisDescribe)">
            <summary>
            将MetaData转换为double
            </summary>
            <param name="value">转换后的数据</param>
            <param name="valuedata">需转换的数据</param>
            <param name="errobj">解释定义对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaDataHelper.TranformMetaData2Entry(MetaFly.Datum.Figure.MetaData,MetaFly.Datum.Figure.EntryData@,MetaFly.IAnalysisDescribe)">
            <summary>
            将MetaData转换为double
            </summary>
            <param name="value">转换后的数据</param>
            <param name="valuedata">需转换的数据</param>
            <param name="errobj">解释定义对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaDataHelper.TranformMetaData2List(MetaFly.Datum.Figure.MetaData,MetaFly.Datum.Figure.ListData@,MetaFly.IAnalysisDescribe)">
            <summary>
            将MetaData转换为List
            </summary>
            <param name="value">转换后的数据</param>
            <param name="valuedata">需转换的数据</param>
            <param name="errobj">解释定义对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Common.BigEndianWriter">
            <summary>
            大端数据输出类
            继承自MetaWriter
            </summary>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.#ctor(System.IO.Stream)">
            <summary>
            构造函数，定义输出流
            </summary>
            <param name="stream">流对象</param>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.#ctor(System.String)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param> 
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.#ctor(System.String,System.IO.FileMode)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param> 
            <param name="mode">打开方式</param> 
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.Transform(System.Int64,System.Byte@)">
            <summary>
            实现了MetaWriter的Transform，将long型数据转换为byte型数据，数据范围(-128, 256)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.Transform(System.Int64,System.SByte@)">
            <summary>
            实现了MetaWriter的TransformR，将long型数据反向转换为sbyte型数据，数据范围[-128, 127]
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.Transform(System.Int64,System.UInt16@)">
            <summary>
            实现了MetaWriter的Transform，将long型数据转换为short型数据，数据范围(-32768, 65536)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.Transform(System.Int64,System.UInt32@)">
            <summary>
            实现了MetaWriter的Transform，将long型数据转换为int型数据，数据范围(-2147483648, 4294967296)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.Transform(System.Int64,System.Int16@)">
            <summary>
            实现了MetaWriter的Transform，将long型数据转换为short型数据，数据范围(-2147483648, 2147483647)
            </summary>
            <param name="longdata"></param>
            <param name="outdata"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.Transform(System.Int64,System.UInt64@)">
            <summary>
            实现了MetaWriter的Transform，将long型数据转换为ulong型数据
            </summary>
            <param name="dataval"></param>
            <param name="outdata"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.Transform(System.Double,System.Single@)">
            <summary>
            实现了MetaWriter的Transform，将双精度浮点数数据转换为单精度型数据,没有判断数值范围
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.Transform(System.Double,System.Double@)">
            <summary>
            实现了MetaWriter的Transform，将双精度浮点数数据转换为双精度数据
            </summary>
            <param name="doubledata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.TransformR(System.Int64,System.Byte@)">
            <summary>
            实现了MetaWriter的TransformR，将long型数据反向转换为byte型数据，数据范围(-128, 256)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.TransformR(System.Int64,System.UInt16@)">
            <summary>
            实现了MetaWriter的TransformR，将long型数据反向转换为short型数据，数据范围(-32768, 65536)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.BigEndianWriter.TransformR(System.Int64,System.UInt32@)">
            <summary>
            实现了MetaWriter的TransformR，将long型数据反向转换为int型数据，数据范围(-2147483648, 4294967296)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Common.LittleEndianWriter">
            <summary>
            小端数据输出类
            继承自MetaWriter
            </summary>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.#ctor(System.IO.Stream)">
            <summary>
            构造函数，定义输出流
            </summary>
            <param name="stream">流对象</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.#ctor(System.String)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.#ctor(System.String,System.IO.FileMode)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param>
            <param name="mode">打开方式</param>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.Transform(System.Int64,System.Byte@)">
            <summary>
            实现了MetaWriter的Transform，将long型数据转换为byte型数据，数据范围(-128, 256)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.Transform(System.Int64,System.SByte@)">
            <summary>
            实现了MetaWriter的TransformR，将long型数据反向转换为sbyte型数据，数据范围[-128, 127]
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.Transform(System.Int64,System.UInt16@)">
            <summary>
            实现了MetaWriter的Transform，将long型数据转换为short型数据，数据范围(-32768, 65536)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.Transform(System.Int64,System.UInt32@)">
            <summary>
            实现了MetaWriter的Transform，将long型数据转换为int型数据，数据范围(-2147483648, 4294967296)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.TransformR(System.Int64,System.Byte@)">
            <summary>
            实现了MetaWriter的TransformR，将long型数据反向转换为byte型数据，数据范围(-128, 256)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.Transform(System.Double,System.Single@)">
            <summary>
            实现了MetaWriter的Transform，将双精度浮点数数据转换为单精度型数据,没有判断数值范围
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.Transform(System.Double,System.Double@)">
            <summary>
            实现了MetaWriter的Transform，将双精度浮点数数据转换为双精度数据
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.TransformR(System.Int64,System.UInt16@)">
            <summary>
            实现了MetaWriter的TransformR，将long型数据反向转换为short型数据，数据范围(-32768, 65536)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.LittleEndianWriter.TransformR(System.Int64,System.UInt32@)">
            <summary>
            实现了MetaWriter的TransformR，将long型数据反向转换为int型数据，数据范围(-2147483648, 4294967296)
            </summary>
            <param name="dataval">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Common.MetaWriter">
            <summary>
            二进制数据输出器抽象类，实现了IDisposable接口
            </summary>
        </member>
        <member name="F:MetaFly.Common.MetaWriter.sw">
            <summary>
            二进制输出流
            </summary>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.#ctor(System.IO.Stream)">
            <summary>
            构造函数，定义输出流
            </summary>
            <param name="stream">流对象</param>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.#ctor(System.String)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.#ctor(System.String,System.IO.FileMode)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param>
            <param name="mode">打开方式</param>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Close">
            <summary>
            关闭流
            </summary>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Dispose">
            <summary>
            实现IDisposable接口，调用Close函数
            </summary>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Write(System.Int64,System.Int64)">
            <summary>
            按1、2、4个字节方式写入整型数据，
            </summary>
            <param name="data">数据</param>
            <param name="length">写入字节数</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Write(System.Double,System.Int64)">
            <summary>
            按4个字节方式写入浮点数据，
            </summary>
            <param name="data">数据</param>
            <param name="length">写入字节数</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.WriteR(System.Int64,System.Int64)">
            <summary>
            按1、2、4个字节方式反向写入整形数据，
            </summary>
            <param name="data">数据</param>
            <param name="length">写入字节数</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Write(System.String,System.Int64)">
            <summary>
            根据长度写入字符串。
            如果字符串长度大于写入长度则报错，如果字符串长度小于写入长度则补零
            </summary>
            <param name="data">数据</param>
            <param name="length">长度</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Write(System.Byte)">
            <summary>
            写入BYTE数据
            </summary>
            <param name="data">数据</param>
            <returns>返回true</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入BYTE数组
            </summary>
            <param name="data">数据</param>
            <param name="index">开始位置</param>
            <param name="len">长度</param>
            <returns>返回true</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Transform(System.Int64,System.Byte@)">
            <summary>
            将long型数据转换为byte型数据抽象函数，由子类实现
            </summary>
            <param name="longdata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Transform(System.Int64,System.UInt16@)">
            <summary>
            将long型数据转换为short型数据抽象函数，由子类实现
            </summary>
            <param name="longdata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Transform(System.Int64,System.UInt32@)">
            <summary>
            将long型数据转换为int型数据抽象函数，由子类实现
            </summary>
            <param name="longdata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Transform(System.Int64,System.UInt64@)">
            <summary>
            将long型数据转换为ulong型数据抽象函数，由子类实现
            </summary>
            <param name="longdata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Transform(System.Double,System.Single@)">
            <summary>
            将double型数据转换为float型数据抽象函数，由子类实现
            </summary>
            <param name="longdata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.Transform(System.Double,System.Double@)">
            <summary>
            将double型数据转换为double型数据抽象函数，由子类实现
            </summary>
            <param name="longdata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.TransformR(System.Int64,System.Byte@)">
            <summary>
            将long型数据反向转换为byte型数据抽象函数，由子类实现
            </summary>
            <param name="longdata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.TransformR(System.Int64,System.UInt16@)">
            <summary>
            将long型数据反向转换为short型数据抽象函数，由子类实现
            </summary>
            <param name="longdata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Common.MetaWriter.TransformR(System.Int64,System.UInt32@)">
            <summary>
            将long型数据反向转换为int型数据抽象函数，由子类实现
            </summary>
            <param name="longdata">输入数据</param>
            <param name="outdata">输出数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Common.XPDDataPools">
            <summary>
            XPD解释定义池
            </summary>
        </member>
        <member name="F:MetaFly.Common.XPDDataPools.xpddatalist">
            <summary>
            文件名称和XPD解释定义关系字典
            </summary>
        </member>
        <member name="M:MetaFly.Common.XPDDataPools.GetXPDData(System.String)">
            <summary>
            获取指定文件名称的XPD解释定义对象，如果在关系字典中存在则直接返回，否则根据文件创建后并添加到字典后返回该对象
            </summary>
            <param name="filenamename">解释定义文件名称</param>
            <returns>如果创建或查找成功返回XPD对象，否则返回空</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.BinoutData">
            <summary>
            二进制流输出数据类型
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.BinoutData.#ctor(MetaFly.Common.MetaWriter)">
            <summary>
            构造函数
            </summary>
            <param name="metaWriter"></param>
        </member>
        <member name="M:MetaFly.Datum.Figure.BinoutData.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="filename"></param>
            <param name="bigendian"></param>
        </member>
        <member name="M:MetaFly.Datum.Figure.BinoutData.Dispose">
            <summary>
            释放MetaWriter资源
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.BinoutData.WriteMetaData(MetaFly.Datum.Figure.MetaData,System.String,System.Int64)">
            <summary>
            按指定格式（style），指定长度（outlength），输出MetaData到二进制流
            </summary>
            <param name="data">输出数据</param>
            <param name="style">格式</param>
            <param name="outlength">输出长度</param>
            <returns>输出结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.INodeTrackable.NodePath">
            <summary>
            查询当前节点在节点树上的路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.LogWriterData">
            <summary>
            日志输出数据类
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.LogWriterData.sw">
            <summary>
            输出文件句柄
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.LogWriterData.#ctor(System.IO.StreamWriter)">
            <summary>
            构造函数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.LogWriterData.Write(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="data">日志</param>
        </member>
        <member name="P:MetaFly.Datum.Figure.LogWriterData.IsNull">
            <summary>
            判断是否为空
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.LogWriterData.Dispose">
            <summary>
            实现了Dispose接口，关闭输出流
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.LogWriterData.Create(MetaFly.Datum.Figure.StringData,System.Int64)">
            <summary>
            根据序列化字符串生成LogWriterData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="style">序列化类型</param>
            <returns>LogWriterData对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.BasicData">
            <summary>
            基本数据抽象类
            继承自MetaData
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.BasicData.Value">
            <summary>
            数据，以字符串形式保存
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.BasicData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.BasicData.ToString">
            <summary>
            重写输出字符串函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.BoolData">
            <summary>
            布尔类型数据定义类
            继承自BasicData
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.BoolData.Value">
            <summary>
            数据，以字符串形式保存
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.BoolData.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.BoolData.String">
            <summary>
            重写了BasicData的String函数，转换为字符串
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.BoolData.op_Explicit(MetaFly.Datum.Figure.BoolData)~System.Boolean">
            <summary>
            强制转换成bool类型
            </summary>
            <param name="data">BoolData数据</param>
            <returns>bool值</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.BoolData.Create(MetaFly.Datum.Figure.StringData,System.Int64)">
            <summary>
            根据序列化字符串生成BoolData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="style">序列化类型</param>
            <returns>BoolData对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.StreamData">
            <summary>
            二进制流数据输入类
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.#ctor(MetaFly.Common.MetaReader)">
            <summary>
            构造函数，定义输出器
            </summary>
            <param name="stream">输出器</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数，根据文件名定义输出器
            </summary>
            <param name="filename">文件名称</param>
            <param name="bigendian">是否按大端方式解析</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.#ctor(System.Byte[],System.Boolean)">
            <summary>
            构造函数，根据缓冲区定义输出器
            </summary>
            <param name="buffer">输出缓冲区</param>
            <param name="bigenddian">是否按大端方式解析</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.Read(System.Int64)">
            <summary>
            读取指定长度的数据并转换为相应的有符号整数
            </summary>
            <param name="length">数据长度</param>
            <returns>LongData数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.ReadU(System.Int64)">
            <summary>
            读取指定长度的数据并转换为相应的无符号整数
            </summary>
            <param name="length">数据长度</param>
            <returns>LongData数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.ReadD(System.Int64)">
            <summary>
            读取指定长度的数据并转换为字符串
            </summary>
            <param name="length">数据长度</param>
            <returns>StringData数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.ReadS(System.Int64)">
            <summary>
            读取指定长度的数据并转换为字符串
            </summary>
            <param name="length">数据长度</param>
            <returns>StringData数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.CanRead(System.Int64)">
            <summary>
            是否可读
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.Create(MetaFly.Datum.Figure.StringData,System.Int64)">
            <summary>
            根据序列化字符串生成StreamData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="style">序列化类型</param>
            <returns>StreamData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StreamData.Create(MetaFly.Datum.Figure.StringData,System.Boolean)">
            <summary>
            根据序列化字符串生成StreamData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="isBigEndian">大端true，小端false</param>
            <returns>StreamData对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.DoubleData">
            <summary>
            浮点类型数据定义类
            继承自BasicData
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.DoubleData.Value">
            <summary>
            数据，以字符串形式保存
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.DoubleData.#ctor(System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.DoubleData.Long">
            <summary>
            重写了BasicData的Long函数，转换为整型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.DoubleData.String">
            <summary>
            重写了BasicData的String函数，转换为字符串
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.DoubleData.op_Explicit(MetaFly.Datum.Figure.DoubleData)~System.Double">
            <summary>
            强制转换成double类型
            </summary>
            <param name="data">DoubleData数据</param>
            <returns>double值</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.DoubleData.Create(MetaFly.Datum.Figure.StringData,System.Int64)">
            <summary>
            根据序列化字符串生成DoubleData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="style">序列化类型</param>
            <returns>DoubleData对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.EntryData">
            <summary>
            输入类型类
            继承自MetaData
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.EntryData.LineNumber">
            <summary>
            数据所在行
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EntryData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.EntryData.Type">
            <summary>
            返回数据类型函数
            </summary>
            <returns>数据类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EntryData.Validate(System.String)">
            <summary>
            验证函数
            </summary>
            <param name="rules">规则定义</param>
            <returns>通过返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EntryData.Child(System.String,System.Int32)">
            <summary>
            获取子节点函数
            </summary>
            <param name="path">路径</param>
            <param name="type">类型</param>
            <returns>子节点列表数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EntryData.ChildFirst(System.String)">
            <summary>
            获取第一个子节点函数
            </summary>
            <param name="path">路经</param>
            <returns>子节点数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EntryData.Parent">
            <summary>
            获取父节点函数
            </summary>
            <returns>父节点数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EntryData.Prev(System.String)">
            <summary>
            前一个指定名称的节点函数
            </summary>
            <param name="name">名称</param>
            <returns>节点数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EntryData.Next(System.String)">
            <summary>
            后一个指定名称的节点函数
            </summary>
            <param name="name">名称</param>
            <returns>节点数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EntryData.NodePath">
            <summary>
            获取该实例的节点位置
            </summary>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.MaxtrixEntryData">
            <summary>
            封装了二维数据表数据类以实现抽象类EntryData的抽象函数，从而满足MetaFly解析要求
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MaxtrixEntryData.Value">
            <summary>
            二维数据表数据
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.#ctor(MetaFly.Datum.Figure.MatrixElement)">
            <summary>
            构造函数
            </summary>
            <param name="value">二维数据表数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.Type">
            <summary>
            返回类型，即表名或列名
            </summary>
            <returns>类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.NodePath">
            <summary>
            返回当前实例的节点路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.Validate(System.String)">
            <summary>
            根据定义验证数据是否符合要求
            </summary>
            <param name="rules">验证规则描述</param>
            <returns>验证通过返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.Bool">
            <summary>
            将数据强制转换为布尔类型
            </summary>
            <returns>转换为布尔类型的数据，如果不能转换返回null</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.String">
            <summary>
            将数据强制转换为字符串类型
            </summary>
            <returns>转换为字符串类型的数据，如果不能转换返回null</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.Long">
            <summary>
            将数据强制转换为整数类型
            </summary>
            <returns>转换为整数类型的数据，如果不能转换返回null</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.Double">
            <summary>
            将数据强制转换为浮点类型
            </summary>
            <returns>转换为浮点类型的数据，如果不能转换返回null</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.Child(System.String,System.Int32)">
            <summary>
            根据路径获取数据列表
            本函数仿XML的XPATH，但没有全部实现，目前可使用的有：
            1.普通路径：
                比如X.Y,返回X表的所有Y列数据
            2.带参数的路径
                比如X[W=N],返回X表中W列等于N的所有行数据
                比如X[W=N].Y,返回X表中W列等于N的所有Y列数据
                比如X[N].Y,返回X表中第N个数据Y列数据
            3.如果path为空，或者为"*",按存储顺序依次所有数据
            </summary>
            <param name="path">路径</param>
            <param name="type">获取类型，0：同行满足条件的数据独立存储，1：同行满足条件的数据合并存储</param>
            <returns>封装了数据列表的ListData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.ChildFirst(System.String)">
            <summary>
            根据路径返回第一个数据
            本函数仿XML的XPATH，但没有全部实现，目前可使用的有：
            1.普通路径：
                比如X.Y,返回X表的所有Y列数据
            2.带参数的路径
                比如X[W=N],返回X表中W列等于N的所有行数据
                比如X[W=N].Y,返回X表中W列等于N的所有Y列数据
                比如X[N].Y,返回X表中第N个数据Y列数据
            3.如果path为空，或者为"*",按存储顺序依次所有数据
            </summary>
            <param name="path">路径</param>
            <returns>封装了数据的EntryData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.Parent">
            <summary>
            返回当前数据的父数据
            如果当前数据是MatrixDataSet返回null
            </summary>
            <returns>封装了父数据的EntryData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.Prev(System.String)">
            <summary>
            返回当前数据的上一个数据
            </summary>
            <returns>封装了上一个数据的EntryData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.Next(System.String)">
            <summary>
            返回当前数据的下一个数据
            </summary>
            <returns>封装了下一个数据的EntryData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixEntryData.ToString">
            <summary>
            重写输出字符串函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.MatrixDataSet">
            <summary>
            封装了二维数据表类，继承自MatrixElement
            支持多个数据表集合
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MatrixDataSet.TableList">
            <summary>
            数据列表
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MatrixDataSet.TableGroupName">
            <summary>
            表群名称
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MatrixDataSet.firstRow">
            <summary>
            第一条行数据
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixDataSet.Value">
            <summary>
            显示值
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixDataSet.Validate(System.String)">
            <summary>
            验证函数
            </summary>
            <param name="rules">规则定义</param>
            <returns>返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixDataSet.#ctor(System.String,System.Collections.Generic.List{System.Data.DataTable},System.Collections.Generic.List{MetaFly.Datum.Figure.RowSeqInfo})">
            <summary>
            构造函数
            </summary>
            <param name="name">群名称</param>
            <param name="datalist">数据集列表</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixDataSet.Type">
            <summary>
            返回类型
            </summary>
            <returns>类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixDataSet.FirstChild">
            <summary>
            第一个数据表
            </summary>
            <returns>数据表</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixDataSet.LastChild">
            <summary>
            最后一个数据表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixDataSet.ChildrenByPath(System.String,System.Int32,System.String)">
            <summary>
            根据PATH获取满足条件的数据列表
            </summary>
            <param name="path">路径</param>
            <param name="type">类型</param>
            <param name="cond2">条件</param>
            <returns>数据列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixDataSet.ToString">
            <summary>
            重写Tostring函数，返回名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixDataSet.CreateFromDataTable(System.String,System.Collections.Generic.List{System.Data.DataTable})">
            <summary>
            根据名称和数据表列表返回MatrixDataSet
            </summary>
            <param name="name">名称</param>
            <param name="datalist">数据表列表</param>
            <returns>MatrixDataSet对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixDataSet.CreateFromDataTable(System.String,System.Collections.Generic.List{System.Data.DataTable},System.Collections.Generic.List{MetaFly.Datum.Figure.RowSeqInfo})">
            <summary>
            根据名称和数据表列表返回MatrixDataSet
            </summary>
            <param name="name">名称</param>
            <param name="datalist">数据表列表</param>
            <param name="dataseqlist"></param>
            <returns>MatrixDataSet对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.MatrixElement">
            <summary>
            二维数据表元素抽象类
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixElement.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.Type">
             <summary>
            类型
             </summary>
             <returns>类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.Validate(System.String)">
            <summary>
            验证抽象函数
            </summary>
            <param name="rules">验证规则</param>
            <returns></returns>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixElement.Parent">
            <summary>
            获取父节点数据
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixElement.prev">
            <summary>
            获取前一个节点数据
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixElement.next">
            <summary>
            获取后一个节点数据
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.SetRelationship(MetaFly.Datum.Figure.MatrixElement)">
            <summary>
            设置节点间关系
            </summary>
            <param name="element">关联节点</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.ClearRelationShip">
            <summary>
            清除节点间关系
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.Prev(System.String)">
            <summary>
            返回前一个指定名称的节点
            </summary>
            <param name="name">节点名称</param>
            <returns>节点数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.Next(System.String)">
            <summary>
            返回后一个指定名称的节点
            </summary>
            <param name="name">节点名称</param>
            <returns>节点数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.FirstChild">
            <summary>
            返回第一个子节点（如果存在)，否则返回null
            </summary>
            <returns>节点数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.LastChild">
            <summary>
            返回最后一个子节点（如果存在)，否则返回null
            </summary>
            <returns>节点数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.ChildrenByPath(System.String,System.Int32,System.String)">
            <summary>
            根据XPath返回节点列表
            </summary>
            <param name="path">XPATH定义</param>
            <param name="type">查找类型</param>
            <param name="cond">条件</param>
            <returns>节点数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.Satisfy(System.Int32,MetaFly.Datum.Figure.MatrixElement,MetaFly.Datum.Figure.Condition)">
            <summary>
            判断某项数据是否满足查找条件
            </summary>
            <param name="index">数据下标</param>
            <param name="ele">数据</param>
            <param name="cond">条件1</param>
            <param name="cond2">条件2</param>
            <returns>满足返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.ParsePath(System.String,System.String@)">
            <summary>
            解析XPath
            </summary>
            <param name="path">XPath</param>
            <param name="cond">返回查找条件</param>
            <returns>路径名称</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElement.ParseCond(System.String)">
            <summary>
            解析条件
            </summary>
            <param name="cond">条件</param>
            <param name="cond2">返回条件参数2</param>
            <returns>条件参数</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MetaFly.Datum.Figure.MatrixElementEqualityComparer" -->
        <member name="M:MetaFly.Datum.Figure.MatrixElementEqualityComparer.Equals(MetaFly.Datum.Figure.MatrixElement,MetaFly.Datum.Figure.MatrixElement)">
            <summary>
            比较2个数据是否相等
            </summary>
            <param name="x">数据X</param>
            <param name="y">数据Y</param>
            <returns>相等返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixElementEqualityComparer.GetHashCode(MetaFly.Datum.Figure.MatrixElement)">
            <summary>
            获取哈希值
            </summary>
            <param name="obj">数据</param>
            <returns>哈希值</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.EqualItem">
            <summary>
            等于条件抽象
            </summary>
        </member>
        <member name="T:MetaFly.Datum.Figure.Condition">
            <summary>
            []组合筛选条件抽象
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.Condition.style">
            <summary>
            and, or
            </summary>
        </member>
        <member name="T:MetaFly.Datum.Figure.MatrixItem">
            <summary>
            二维数据表项类，继承自MatrixElement
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixItem.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixItem.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MatrixItem.value">
            <summary>
            数值
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixItem.#ctor(System.String,System.String,MetaFly.Datum.Figure.MatrixRow)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="val">值</param>
            <param name="parent">父节点</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixItem.Type">
             <summary>
            类型
             </summary>
             <returns>类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixItem.Validate(System.String)">
            <summary>
            验证函数
            </summary>
            <param name="rules">验证规则</param>
            <returns>返回false，无相应的验证规则要求</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixItem.Prev(System.String)">
            <summary>
            返回前一个指定名称的项数据
            </summary>
            <param name="name">节点名称</param>
            <returns>项数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixItem.Next(System.String)">
            <summary>
            返回后一个指定名称的项数据
            </summary>
            <param name="name">节点名称</param>
            <returns>项数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixItem.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>数据字符串</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixItem.Equals(MetaFly.Datum.Figure.MatrixItem,MetaFly.Datum.Figure.MatrixItem)">
            <summary>
            判断2个数据项是否相等
            </summary>
            <param name="x">数据项x</param>
            <param name="y">数据项y</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixItem.GetHashCode(MetaFly.Datum.Figure.MatrixItem)">
            <summary>
            返回数据线哈希值
            </summary>
            <param name="obj">数据项</param>
            <returns>哈希值</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.MaxtrixPortion">
            <summary>
            二维数据表行部分类，继承自MatrixRow
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixPortion.#ctor(System.Collections.Generic.List{MetaFly.Datum.Figure.MatrixItem},MetaFly.Datum.Figure.MatrixElement)">
            <summary>
            构造函数
            </summary>
            <param name="paritemlist">数据项列表</param>
            <param name="parent">父节点数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixPortion.Prev(System.String)">
            <summary>
            返回前一个指定名称的节点
            </summary>
            <param name="name">节点名称</param>
            <returns>返回null</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MaxtrixPortion.Next(System.String)">
            <summary>
            返回后一个指定名称的节点
            </summary>
            <param name="name">节点名称</param>
            <returns>返回null</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.MatrixRow">
            <summary>
            二维数据表行类，继承自MatrixElement
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MatrixRow.parItemList">
            <summary>
            数据项列表
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixRow.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.Validate(System.String)">
            <summary>
            验证函数
            </summary>
            <param name="rules">验证规则</param>
            <returns>正确返回true，错误返回false</returns>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixRow.Value">
            <summary>
            以格式化字符串的方式返回值
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.#ctor(System.Collections.Generic.List{MetaFly.Datum.Figure.MatrixItem},MetaFly.Datum.Figure.MatrixElement)">
            <summary>
            复制构造函数
            </summary>
            <param name="paritemlist">数据项列表</param>
            <param name="parent">父节点数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},MetaFly.Datum.Figure.MatrixTable)">
            <summary>
            构造函数
            </summary>
            <param name="namelist">数据项名称列表</param>
            <param name="contentlist">数据线值列表</param>
            <param name="parent">父节点数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.#ctor(System.Collections.Generic.List{System.String},System.Data.DataRow,MetaFly.Datum.Figure.MatrixTable)">
            <summary>
            构造函数
            </summary>
            <param name="namelist">数据项名称列表</param>
            <param name="contentlist">数据线值列表</param>
            <param name="parent">父节点数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.Init(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},MetaFly.Datum.Figure.MatrixTable)">
            <summary>
            初始化
            </summary>
            <param name="namelist">数据项名称列表</param>
            <param name="contentlist">数据线值列表</param>
            <param name="parent">父节点数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.Type">
             <summary>
            类型
             </summary>
             <returns>类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.Prev(System.String)">
            <summary>
            返回前一个指定名称的行数据
            </summary>
            <param name="name">节点名称</param>
            <returns>项数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.Next(System.String)">
            <summary>
            返回后一个指定名称的行数据
            </summary>
            <param name="name">节点名称</param>
            <returns>项数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.FirstChild">
            <summary>
            返回第一个数据项
            </summary>
            <returns>数据项</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.LastChild">
            <summary>
            返回最后一个数据项
            </summary>
            <returns>数据项</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.ChildrenByPath(System.String,System.Int32,System.String)">
            <summary>
            根据PATH获取满足条件的数据项列表
            </summary>
            <param name="path">路径</param>
            <param name="type">类型</param>
            <param name="cond">条件</param>
            <returns>数据项列表</returns>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixRow.Item(System.Int32)">
            <summary>
            返回指定下标数据
            </summary>
            <param name="index">下标索引</param>
            <returns>数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.ToString">
            <summary>
            格式化输出数据
            </summary>
            <returns>数据字符串</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.Create(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},MetaFly.Datum.Figure.MatrixTable)">
            <summary>
            创建二维数据表的一行数据
            </summary>
            <param name="namelist">数据项名称列表</param>
            <param name="contentlist">数据项值列表</param>
            <param name="parent">父节点数据</param>
            <returns>行数据对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixRow.Create(System.Collections.Generic.List{System.String},System.Data.DataRow,MetaFly.Datum.Figure.MatrixTable)">
            <summary>
            创建二维数据表的一行数据
            </summary>
            <param name="namelist">数据项名称列表</param>
            <param name="contentlist">数据项值列表</param>
            <param name="parent">父节点数据</param>
            <returns>行数据对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.MatrixTable">
            <summary>
            二维数据表类，继承自MatrixElement
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixTable.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MatrixTable.itemNameList">
            <summary>
            表头名称列表
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MatrixTable.parRowList">
            <summary>
            数据行列表
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixTable.Value">
            <summary>
            以格式化字符串的方式返回值
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.#ctor(System.String,System.Collections.Generic.List{System.String},MetaFly.Datum.Figure.MatrixDataSet)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据表名称</param>
            <param name="namelist">表头名称列表</param>
            <param name="parent">父节点数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.#ctor(System.String,System.Data.DataColumnCollection,MetaFly.Datum.Figure.MatrixDataSet)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据表名称</param>
            <param name="namelist">表头名称列表</param>
            <param name="parent">父节点数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.Init(System.String,System.Collections.Generic.List{System.String},MetaFly.Datum.Figure.MatrixDataSet)">
            <summary>
            初始化
            </summary>
            <param name="name">数据表名称</param>
            <param name="namelist">表头名称列表</param>
            <param name="parent">父节点数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.Check(System.Collections.Generic.List{System.String})">
            <summary>
            检查数据表头是否符合要求
            </summary>
            <param name="namelist">数据表头</param>
            <returns>符合返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.Add(System.Collections.Generic.List{System.String},MetaFly.Datum.Figure.MatrixRow)">
            <summary>
            添加一行数据
            </summary>
            <param name="contentlist">数据项列表</param>
            <param name="prevparrow">前一行数据</param>
            <returns>当前创建的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.Add(System.Data.DataRow,MetaFly.Datum.Figure.MatrixRow)">
            <summary>
            添加一行数据
            </summary>
            <param name="contentlist">数据项列表</param>
            <param name="prevparrow">前一行数据</param>
            <returns>当前创建的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.Type">
             <summary>
            类型
             </summary>
             <returns>类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.Validate(System.String)">
            <summary>
            验证函数
            </summary>
            <param name="rules">验证规则</param>
            <returns>正确返回true，错误返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.FirstChild">
            <summary>
            返回第一个数据行
            </summary>
            <returns>数据项</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.LastChild">
            <summary>
            返回最后一个数据行
            </summary>
            <returns>数据项</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.Children(System.String)">
            <summary>
            根据条件返回数据列表
            </summary>
            <param name="cond">查找条件</param>
            <returns>数据列表</returns>
        </member>
        <member name="P:MetaFly.Datum.Figure.MatrixTable.Item(System.Int32)">
            <summary>
            返回指定下标数据
            </summary>
            <param name="index">下标索引</param>
            <returns>数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.ChildrenByPath(System.String,System.Int32,System.String)">
            <summary>
            根据PATH获取满足条件的数据项列表
            </summary>
            <param name="path">路径</param>
            <param name="type">类型</param>
            <param name="cond">条件</param>
            <returns>数据项列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.ToString">
            <summary>
            格式化输出数据
            </summary>
            <returns>字符串数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MatrixTable.AddToList(MetaFly.Datum.Figure.MatrixRow,MetaFly.Datum.Figure.MatrixRow)">
            <summary>
            添加数据行至列表
            </summary>
            <param name="parrow">要添加的数据行</param>
            <param name="prevparrow">前一行数据</param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.XmlEntryData">
            <summary>
            封装了Xml数据类以实现抽象类EntryData的抽象函数，从而满足MetaFly解析要求
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.XmlEntryData.Value">
            <summary>
            XML数据
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.XmlEntryData.LineNumber">
            <summary>
            数据所在行
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.#ctor(MetaFly.Summer.IO.XmlVisitorBase)">
            <summary>
            构造函数
            </summary>
            <param name="value">XML数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Type">
            <summary>
            返回数据名称
            </summary>
            <returns>数据名称</returns>
        </member>
        <member name="P:MetaFly.Datum.Figure.XmlEntryData.IsNull">
            <summary>
            判断数据是否为空
            </summary>
            <returns>如果为空返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Validate(System.String)">
            <summary>
            格式验证（预留）
            </summary>
            <param name="rules">规则定义</param>
            <returns>正确返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Bool">
            <summary>
            重写了BasicData的Bool函数，转换为布尔类型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.GetAttribute(System.String)">
            <summary>
            根据属性名获取属性值
            </summary>
            <param name="attriName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="F:MetaFly.Datum.Figure.XmlEntryData.param">
            <summary>
            需过滤的前导符
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.String">
            <summary>
            转换为字符串函数
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.IsExportable">
            <summary>
            检查Value是否包含多余一个子标签，当Value的子标签个数大于1的时候，Value.Value将是所有子标签内容的拼接结果，这种情况是不允许输出的
            </summary>
            <returns>大于1，返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Long">
            <summary>
            转换为整型函数
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Double">
            <summary>
            转换为浮点型函数
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Child(System.String,System.Int32)">
            <summary>
            根据路径获取数据列表
            路径语法等同于XPATH，可取element和attribute      
            </summary>
            <param name="path">路径</param>
            <param name="type">获取类型，0：获取element，1：获取element或attribute，2：获取element或attribute，忽略attribute大小写</param>
            <returns>封装了数据列表的ListData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.ChildFirst(System.String)">
            <summary>
            根据路径获取数据列表
            路径语法等同于XPATH，可取element和attribute      
            </summary>
            <param name="path">路径</param>
            <returns>封装了数据的EntryData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Parent">
            <summary>
            返回当前数据的父数据
            如果当前数据是MatrixDataSet返回null
            </summary>
            <returns>封装了父数据的EntryData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Prev(System.String)">
            <summary>
            返回当前数据的上一个数据
            </summary>
            <returns>封装了上一个数据的EntryData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Next(System.String)">
            <summary>
            返回当前数据的下一个数据
            </summary>
            <returns>封装了下一个数据的EntryData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.ToString">
            <summary>
            重写输出字符串函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XmlEntryData.Create(MetaFly.Datum.Figure.StringData,System.Int64)">
            <summary>
            根据序列化字符串生成MetaData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="style">序列化类型</param>
            <returns>MetaData对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.EnumData">
            <summary>
            枚举类型数据定义类
            继承自BasicData
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.EnumData.Value">
            <summary>
            数据，以字符串形式保存
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.EnumData.Index">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.EnumData.Val">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumData.#ctor(System.String,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="value">枚举名称</param>
            <param name="index">枚举值</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumData.GetValue">
            <summary>
            获取枚举值
            </summary>
            <returns>枚举值</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumData.Long">
            <summary>
            重写了BasicData的Long函数，转换为整型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumData.Double">
            <summary>
            重写了BasicData的Double函数，转换为双浮点型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumData.String">
            <summary>
            重写了BasicData的String函数，转换为字符串
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumData.ToString">
            <summary>
            重写输出字符串函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumData.CreateList">
            <summary>
            创建空EnumListData
            </summary>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.EnumListData">
            <summary>
            枚举列表定义类
            继承自ListData
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumListData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumListData.#ctor(System.Collections.Generic.List{MetaFly.Datum.Figure.EnumData})">
            <summary>
            复制构造函数
            </summary>
            <param name="valuelist">枚举值列表</param>
        </member>
        <member name="P:MetaFly.Datum.Figure.EnumListData.Item(System.String)">
            <summary>
            重写[]操作符，查找指定名称的枚举值，
            </summary>
            <param name="name">数据名称</param>
            <returns>找到的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumListData.FindIndex(System.String)">
            <summary>
            查找指定名称的枚举下标
            </summary>
            <param name="data">枚举名称</param>
            <returns>下标</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumListData.Long">
            <summary>
            重写了BasicData的Long函数，转换为整型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.EnumListData.String">
            <summary>
            重写了BasicData的String函数，转换为字符串
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.ListData">
            <summary>
            列表类型定义类
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.ListData.ValueList">
            <summary>
            列表数据
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.ListData.IndexList">
            <summary>
            列表索引数据，提高查找效率
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            复制构造函数
            </summary>
            <param name="valuelist">long类型列表数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            复制构造函数
            </summary>
            <param name="valuelist">string类型列表数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.#ctor(System.Collections.Generic.List{MetaFly.Datum.Figure.MetaData})">
            <summary>
            构造函数
            </summary>
            <param name="valuelist">列表数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.GetValue">
            <summary>
            获取列表
            </summary>
            <returns>返回列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Count">
            <summary>
            获取列表的元素个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Clear">
            <summary>
            清空列表
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Add(MetaFly.Datum.Figure.MetaData)">
            <summary>
            添加数据至列表，如果是第一次出现则更新IndexList
            </summary>
            <param name="data">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.AddRange(MetaFly.Datum.Figure.ListData)">
            <summary>
            批量添加数据至列表
            </summary>
            <param name="listdata">数据列表</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.RemoveRange(MetaFly.Datum.Figure.ListData)">
            <summary>
            批量删除数据
            </summary>
            <param name="listdata">数据列表</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.First">
            <summary>
            获取第一个数据
            </summary>
            <returns>第一个数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Get(System.Int64)">
            <summary>
            获取指定位置的数据
            </summary>
            <param name="index">下标</param>
            <returns>指定位置的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Last">
            <summary>
            获取最后一个数据
            </summary>
            <returns>最后一个数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Value">
            <summary>
            依次返回列表中的数据
            </summary>
            <returns>yield数据</returns>
        </member>
        <member name="P:MetaFly.Datum.Figure.ListData.Item(System.Int64)">
            <summary>
            重写[]操作符，返回指定位置的数据，
            </summary>
            <param name="index">下标</param>
            <returns>指定位置的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Sort(System.String,System.String)">
            <summary>
            排序
            </summary>
            <param name="compref">比较规则</param>
            <param name="style">比较类型</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Min(System.String,System.String)">
            <summary>
            根据比较规则获取最小值
            </summary>
            <param name="compref">比较规则</param>
            <param name="style">比较类型</param>
            <returns>最小值</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Max(System.String,System.String)">
            <summary>
            根据比较规则获取最大值
            </summary>
            <param name="compref">比较规则</param>
            <param name="style">比较类型</param>
            <returns>最大值</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.FindIndex(System.String)">
            <summary>
            查找指定数据的下标，没有则返回-1
            </summary>
            <param name="data">数据</param>
            <returns>下标</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.SetIndexDic">
            <summary>
            设置列表索引数据函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Meta">
            <summary>
            转换为Meta类型函数，返回列表第一个数据
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Bool">
            <summary>
            重写了BasicData的Bool函数，将列表第一个数据转换为布尔类型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Long">
            <summary>
            重写了BasicData的Long函数，将列表第一个数据转换为整型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Double">
            <summary>
            重写了BasicData的Double函数，将列表第一个数据转换为浮点类型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.String">
            <summary>
            重写了BasicData的String函数，将列表第一个数据转换为字符串类型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Entry">
            <summary>
            重写了BasicData的Entry函数，将列表第一个数据转换为输入类型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.ToString">
            <summary>
            重写输出字符串函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Clone">
            <summary>
            克隆列表
            </summary>
            <returns>克隆的列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.AddList(MetaFly.Datum.Figure.ListData)">
            <summary>
            添加列表
            </summary>
            <param name="listdata2">要添加的列表数据</param>
            <returns>新创建的列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.SubList(MetaFly.Datum.Figure.ListData)">
            <summary>
            删除列表
            </summary>
            <param name="listdata2">要删除的列表数据</param>
            <returns>新创建的列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Distinct(System.String)">
            <summary>
            剔除列表中的重复项
            </summary>
            <param name="compref">比较依据</param>
            <returns>新创建的列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.Create(MetaFly.Datum.Figure.MetaData)">
            <summary>
            根据数据创建同类型的ListData
            </summary>
            <param name="data">参考数据</param>
            <returns>新创建的列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>当前项</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.ListData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>当前项</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.LongData">
            <summary>
            整型数据定义类
            继承自BasicData
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.LongData.Value">
            <summary>
            数据，以字符串形式保存
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.LongData.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.LongData.Double">
            <summary>
            重写了BasicData的Double函数，转换为浮点类型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.LongData.String">
            <summary>
            重写了BasicData的String函数，转换为字符串
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.LongData.op_Explicit(MetaFly.Datum.Figure.LongData)~System.Int64">
            <summary>
            强制转换成long类型
            </summary>
            <param name="data">LongData数据</param>
            <returns>long值</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.LongData.Create(MetaFly.Datum.Figure.StringData,System.Int64)">
            <summary>
            根据序列化字符串生成LongData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="style">序列化类型</param>
            <returns>LongData对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.MetaData">
            <summary>
            MetaData定义类
            </summary>
            <remarks>
            公司：CASCO
            作者：张广宇
            创建日期：2014-6-18
            </remarks>
        </member>
        <member name="F:MetaFly.Datum.Figure.MetaData.NullMeta">
            <summary>
            空数据
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.ToString">
            <summary>
            输出字符串函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="P:MetaFly.Datum.Figure.MetaData.IsNull">
            <summary>
            判断数据是否为空
            </summary>
            <returns>为空返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.Bool">
            <summary>
            转换为布尔类型函数
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.Long">
            <summary>
            转换为整型函数
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.Double">
            <summary>
            转换为浮点型函数
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.String">
            <summary>
            转换为字符串函数
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.Entry">
            <summary>
            转换为输入类型函数
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.List">
            <summary>
            转换为List类型函数
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.CreateList">
             <summary>
            生成兼容类型的List类型对象
             </summary>
             <returns>List对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.IsExportable">
            <summary>
            检查数据是否可输出
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaData.ValueTo``1">
            <summary>
            当前ListData的第一个元素向指定类型T的值转换
            T属于集合: {long, int, double, float, string, bool, byte, MetaData}
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>转换结果</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.MetaDataComparer">
            <summary>
            MetaData比较类，实现了IComparer接口
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MetaDataComparer.comRefList">
            <summary>
            比较依据
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MetaDataComparer.styleList">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MetaDataComparer.orderList">
            <summary>
            比较顺序，升序还是降序
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaDataComparer.#ctor(System.String,System.String)">
            <summary>
            比较器构造函数
            </summary>
            <param name="comref">比较依据</param>
            <param name="style">比较类型</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaDataComparer.CompareMetaData(MetaFly.Datum.Figure.MetaData,MetaFly.Datum.Figure.MetaData,System.String)">
            <summary>
            简单数据比较函数
            </summary>
            <param name="x">数据X</param>
            <param name="y">数据Y</param>
            <param name="style">类型</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaDataComparer.Style(System.Int32)">
            <summary>
            获取比较类型
            </summary>
            <param name="index">下标</param>
            <returns>比较类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaDataComparer.Order(System.Int32)">
            <summary>
            获取比较顺序
            </summary>
            <param name="index">下标</param>
            <returns>比较顺序</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaDataComparer.Compare(MetaFly.Datum.Figure.MetaData,MetaFly.Datum.Figure.MetaData)">
            <summary>
            原数据比较函数
            </summary>
            <param name="x">数据X</param>
            <param name="y">数据Y</param>
            <returns>比较结果</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.MetaDataEqualityComparer">
            <summary>
            MetaData比较类，实现了IEqualityComparer接口
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.MetaDataEqualityComparer.comRefList">
            <summary>
            比较依据
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaDataEqualityComparer.#ctor(System.String)">
            <summary>
            比较器构造函数
            </summary>
            <param name="comref">比较依据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaDataEqualityComparer.EqualsType(MetaFly.Datum.Figure.MetaData,MetaFly.Datum.Figure.MetaData)">
            <summary>
            比较原数据类型是否一致
            </summary>
            <param name="x">数据X</param>
            <param name="y">数据Y</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaDataEqualityComparer.Equals(MetaFly.Datum.Figure.MetaData,MetaFly.Datum.Figure.MetaData)">
            <summary>
            比较原数据是否相等
            </summary>
            <param name="x">数据X</param>
            <param name="y">数据Y</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.MetaDataEqualityComparer.GetHashCode(MetaFly.Datum.Figure.MetaData)">
            <summary>
            获取原数据HashCode
            </summary>
            <param name="obj">原数据</param>
            <returns>HashCode</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.StringData">
            <summary>
            字符串数据定义类
            继承自BasicData
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.StringData.Value">
            <summary>
            数据，以字符串形式保存
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.StringData.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.StringData.Bool">
            <summary>
            重写了BasicData的Bool函数，转换为布尔类型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StringData.Long">
            <summary>
            重写了BasicData的Long函数，转换为整型，如果以0x\0X开头，则为16进制
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StringData.Double">
            <summary>
            重写了BasicData的Double函数，转换为浮点型
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StringData.op_Explicit(MetaFly.Datum.Figure.StringData)~System.String">
            <summary>
            强制转换成string类型
            </summary>
            <param name="data">StringData数据</param>
            <returns>string值</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.StringData.Create(MetaFly.Datum.Figure.StringData,System.Int64)">
            <summary>
            根据序列化字符串生成StringData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="style">序列化类型</param>
            <returns>StringData对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.XPDData">
            <summary>
            XPD定义类
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.XPDData.FileName">
            <summary>
            定义文件名称
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.XPDData.XmlExplain">
            <summary>
            XML的解释定义
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.XPDData.xmlsubexplainlist">
            <summary>
            已查找的子解释定义列表
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.XPDData.availablenamelist">
            <summary>
            允许查找的节点名称列表
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.XPDData.#cctor">
            <summary>
            静态构造函数，配置允许查找的节点
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.XPDData.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:MetaFly.Datum.Figure.XPDData.GetXmlExplain(System.String,System.String,System.String)">
            <summary>
            根据节点名称获取子节点
            </summary>
            <param name="elename">XML节点名称</param>
            <param name="path">将各子节点的name串联的路径</param>
            <param name="style">节点类型</param>
            <returns>XML子节点</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XPDData.GetChildExplain(MetaFly.Summer.IO.XmlVisitor,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据名称获得相应的解释定义
            </summary>
            <param name="xmlcur">当前解释节点</param>
            <param name="name">需要查找的解释定义</param>
            <param name="elenamelist">指定的查找元素类型列表</param>
            <returns>相应的解释定义节点</returns>
        </member>
        <member name="P:MetaFly.Datum.Figure.XPDData.IsNull">
            <summary>
            判断数据是否为空
            </summary>
            <returns>为空返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XPDData.ToString">
            <summary>
            重写输出字符串函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.XPDData.Create(MetaFly.Datum.Figure.StringData,System.Int64)">
            <summary>
            根据序列化字符串生成XPDData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="style">序列化类型</param>
            <returns>XPDData对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Figure.NullData">
            <summary>
            空数据定义类
            </summary>
            <remarks>
            公司：CASCO
            作者：张广宇
            创建日期：2015-4-10
            </remarks>
        </member>
        <member name="M:MetaFly.Datum.Figure.NullData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Figure.NullData.nulldata">
            <summary>
            空数据
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Figure.NullData.IsNull">
            <summary>
            重写是否为空属性，返回true
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Figure.NullData.Create">
            <summary>
            返回空对象
            </summary>
            <returns>NUllData对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Figure.NullData.Create(MetaFly.Datum.Figure.StringData,System.Int64)">
            <summary>
            根据序列化字符串生成MetaData对象
            </summary>
            <param name="buffer">序列化字符串</param>
            <param name="style">序列化类型</param>
            <returns>MetaData对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Element.ArrayItem">
            <summary>
            数组数据定义类，实现了IEnumerable接口
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Element.ArrayItem.length">
            <summary>
            数组长度
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.ArrayItem.memberList">
            <summary>
            数据字典，key为下标
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.ArrayItem.defaultItem">
            <summary>
            缺省数据，如果下标在memberList不存在则为缺省值
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Element.ArrayItem.DefaultItem">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.#ctor(System.Int64,MetaFly.Datum.Element.TermItem)">
            <summary>
            构造函数
            </summary>
            <param name="len">长度</param>
            <param name="defaultitem">缺省数据</param>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.#ctor(MetaFly.Datum.Element.ArrayItem)">
            <summary>
            复制构造函数
            </summary>
            <param name="item">要复制的数据</param>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.GetIndexInit">
            <summary>
            获取ArrayItem中第一个元素的下标
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.FindIndex(System.Func{MetaFly.Datum.Element.TermItem,System.Boolean})">
            <summary>
            根据谓词查找符合谓词条件的第一个元素下标
            </summary>
            <param name="predicate">谓词条件，</param>
            <returns>所查找元素下标；若未查找到元素，则返回-1</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.FindAllIndex(System.Func{MetaFly.Datum.Element.TermItem,System.Boolean})">
            <summary>
            根据谓词查找符合谓词条件的元素下标
            </summary>
            <param name="predicate">谓词条件，</param>
            <returns>所查找元素下标；若未查找到元素，则返回-1</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Datum.Element.ArrayItem.#ctor(System.Int64,System.Collections.Generic.List{MetaFly.Datum.Element.TermItem},MetaFly.Datum.Element.TermItem)" -->
        <member name="M:MetaFly.Datum.Element.ArrayItem.ArrayGroupBy(System.String)">
            <summary>
            分组依据，路径
            </summary>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.IsAppendable(MetaFly.Datum.Element.TermItem)">
            <summary>
            检查当前添加元素是否可添加进当前数组，具体规则是：
            1. 模板为null，可以随意添加。
            2. 模板非null，则必须要添加元素和模板匹配
            目的是：提供类似泛型的类型检查，使得ArrayItem是类型安全的
            </summary>
            <param name="item">当前添加值</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.#ctor(System.Collections.Generic.List{MetaFly.Datum.Element.TermItem},MetaFly.Datum.Element.TermItem)">
            <summary>
            列表构造函数，生成ArrayItem对象长度为itemList的长度
            </summary>
            <param name="itemList">赋值集合</param>        
            <param name="defaultitem">缺省数据</param>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Length">
            <summary>
            返回数组长度
            </summary>
            <returns>返回数组长度</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.SetLength(System.Int64)">
            <summary>
            设置数组的长度
            </summary>
            <param name="len">长度值</param>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Count">
            <summary>
            返回数组有效数据个数
            </summary>
            <returns>返回数组有效数据个数</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.AddOrAppend(MetaFly.Datum.Element.TermItem)">
            <summary>
            添加或者追加数据。
            当前array长度（容量）大于实际元素个数时，data添加到最后一个元素末尾
            反之，则扩容array，并将元素追加到最后
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.IndexList">
            <summary>
            返回数据下标列表
            </summary>
            <returns>返回数据下标列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.ToList(System.String)">
            <summary>
            将数组数据的某项转换为List数据
            </summary>
            <param name="path">数据名称路径</param>
            <returns>List数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Sort(System.String,System.String)">
            <summary>
            根据数据排序
            </summary>
            <param name="compref">比较数据项</param>
            <param name="style">比较类型</param>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Distinct(System.String,System.String)">
            <summary>
            根据数据去除重复项
            </summary>
            <param name="compref">比较数据项</param>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Set(System.Int64,MetaFly.Datum.Element.TermItem)">
            <summary>
            设置某项数据，会检查数据下标是否溢出
            </summary>
            <param name="index">下标</param>
            <param name="item">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.AppendSet(System.Int64,MetaFly.Datum.Element.TermItem,System.Boolean)">
            <summary>
            扩容容量并添加数据至指定位置
            </summary>
            <param name="index">追加元素下标</param>
            <param name="item">追加值</param>
            <param name="checkAppendable">是否检查元素的可追加性</param>
            <returns>是否追加成功</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.AppendSet(MetaFly.Datum.Element.TermItem,System.Boolean)">
            <summary>
            扩容容量并添加数据至数据尾部
            </summary>
            <param name="item"></param>
            <param name="checkAppendable"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Set(System.Int64,MetaFly.Datum.Figure.MetaData)">
            PS：在使用ArrayItem的Set函数回填函数值时，其索引为long类型的index，XML规定的ArryItem就像一个模板，规定好了各个index对应什么字段，在C#代码按照index回填后，xml规定的模板就不能再有改动，否则会造成数据错误。
            <summary>
            设置某项数据，数据不能为null
            </summary>
            <param name="index">下标</param>
            <param name="data">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Set(System.Int64,System.Int64)">
            <summary>
            设置某项数据
            </summary>
            <param name="index">下标</param>
            <param name="data">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Set(System.Int64,System.Double)">
            <summary>
            设置某项数据
            </summary>
            <param name="index">下标</param>
            <param name="data">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Set(System.Int64,System.String)">
            <summary>
            设置某项数据
            </summary>
            <param name="index">下标</param>
            <param name="data">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Get(System.String,System.Boolean)">
            <summary>
            获取某项数据，会检查数据下标是否溢出
            </summary>
            <param name="name">路径</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Get(System.Int64,System.Boolean)">
            <summary>
            获取当前对象指定下标值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.AppendGet(System.Int64)">
            <summary>
            获取某项数据，当数据下标大于容量，会扩充容量
            </summary>
            <param name="index">数据下标</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Append">
            <summary>
            扩充容量并返回最后一个数据
            </summary>
            <returns>返回最后一个数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Remove(System.String)">
            <summary>
            删除数组元素中指定名称的数据
            </summary>
            <param name="name">要删除的数据名称</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.RemoveAt(System.Int64)">
            <summary>
            移除指定下标的元素
            </summary>
            <param name="index">下标</param>
            <returns>成功删除返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.RemoveLikeList(System.Int64)">
            <summary>
            删除指定下标的元素，其后元素顺次前移一位
            </summary>
            <param name="index">指定下标</param>
            <returns>成功删除返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.AddRange(MetaFly.Datum.Element.ArrayItem)">
            <summary>
            两个同结构的ArrayItem合并
            </summary>
            <param name="addItem">被添加的ArrayItem</param>
            <returns>当前数组</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.AddRange(System.Collections.Generic.IEnumerable{MetaFly.Datum.Element.TermItem})">
            <summary>
            批量添加同结构的元素到当前数组
            </summary>
            <param name="addItem">被添加的元素集合</param>
            <returns>当前数组</returns>
        </member>
        <member name="P:MetaFly.Datum.Element.ArrayItem.Item(System.String)">
            <summary>
            重写[]操作符，查找指定名称的数据，
            根据下标查找数据
            </summary>
            <param name="name">数据名称</param>
            <returns>找到的数据</returns>
        </member>
        <member name="P:MetaFly.Datum.Element.ArrayItem.Item(System.Int64)">
            <summary>
            重写[]操作符，查找指定名称的数据，
            根据下标查找数据
            </summary>
            <param name="index">下标</param>
            <returns>找到的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Clone">
            <summary>
            复制对象
            </summary>
            <returns>复制结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Clear">
            <summary>
            清空当前ArrayItem，长度设置为零
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.Wipe">
            <summary>
            擦除当前ArrayItem数据，数组长度不变
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Datum.Element.ArrayItem.ToString" -->
        <member name="M:MetaFly.Datum.Element.ArrayItem.GetEnumerator">
            <summary>
             返回一个循环访问ArrayItem集合的枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Datum.Element.ArrayItem.ArrayItemEnumerator">
            <summary>
            ArrayItem迭代器,迭代ArrayItem.memberList
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.ArrayItem.ArrayItemEnumerator.arrayItem">
            <summary>
            当前迭代对象
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.ArrayItemEnumerator.#ctor(MetaFly.Datum.Element.ArrayItem)">
            <summary>
            ArrayItem迭代器构造函数
            </summary>
            <param name="arrayitem"></param>
        </member>
        <member name="T:MetaFly.Datum.Element.ArrayItem.ArrayGroup">
            <summary>
            ArrayItem的分组封装类
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Element.ArrayItem.ArrayGroup.Key">
            <summary>
            分组键名
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.ArrayGroup.#ctor(System.String,System.Collections.Generic.IEnumerable{MetaFly.Datum.Element.TermItem})">
            <summary>
            构造函数
            </summary>
            <param name="k">分组键名</param>
            <param name="val">查询分组值</param>
        </member>
        <member name="M:MetaFly.Datum.Element.ArrayItem.ArrayGroup.GetEnumerator">
            <summary>
            迭代查询分组值
            </summary>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Datum.Element.CompoundItem">
            <summary>
            组合数据定义类
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.CompoundItem.mbrNameList">
            <summary>
            数据名称列表
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.CompoundItem.memberList">
            <summary>
            数据字典，key为名称
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.#ctor(MetaFly.Datum.Element.CompoundItem)">
            <summary>
            复制构造函数
            </summary>
            <param name="item">要复制的数据</param>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.#ctor(System.Collections.Generic.Dictionary{System.String,MetaFly.Datum.Element.TermItem})">
            <summary>
            复制构造函数
            </summary>
            <param name="itemlist">要复制的数据</param>
        </member>
        <member name="P:MetaFly.Datum.Element.CompoundItem.Values">
            <summary>
            CompoundItem类型的当前值集合
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Element.CompoundItem.Keys">
            <summary>
            CompoundItem类型当前键集合
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Names">
            <summary>
            返回名称列表
            </summary>
            <returns>返回名称列表</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Members">
            <summary>
            返回组合数据
            </summary>
            <returns>返回组合数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Remove(System.String)">
            <summary>
            删除指定名称的数据
            </summary>
            <param name="name">要删除的数据名称</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Add(System.String,MetaFly.Datum.Element.TermItem)">
            <summary>
            按名称增加数据，如果已经存在返回false
            </summary>
            <param name="name">数据名称</param>
            <param name="item">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.AddOrReplace(System.String,MetaFly.Datum.Element.TermItem)">
            <summary>
            添加或者替换CompoundItem中元素
            </summary>
            <param name="name"></param>
            <param name="item"></param>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Add(System.String,MetaFly.Datum.Figure.MetaData)">
            <summary>
            按名称增加数据
            </summary>
            <param name="name">数据名称</param>
            <param name="data">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Add(System.String,System.Int64)">
            <summary>
            按名称增加数据
            </summary>
            <param name="name">数据名称</param>
            <param name="item">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Add(System.String,System.String)">
            <summary>
            按名称增加数据
            </summary>
            <param name="name">数据名称</param>
            <param name="item">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Count">
            <summary>
            返回数据的个数
            </summary>
            <returns>返回数据的个数</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Get(System.String,System.Boolean)">
            <summary>
            获取指定名称的数据
            </summary>
            <param name="name">数据名称</param>
            <returns>返回的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Set(System.String,MetaFly.Datum.Element.TermItem)">
            <summary>
            设置指定名称的数据，如果不存在该名称的数据则返回false
            </summary>
            <param name="name">名称</param>
            <param name="item">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Set(System.String,MetaFly.Datum.Figure.MetaData)">
            <summary>
            设置指定名称的数据，如果数据为null则返回false
            </summary>
            <param name="name">名称</param>
            <param name="data">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Set(System.String,System.Int64)">
            <summary>
            设置指定名称的数据
            </summary>
            <param name="name">名称</param>
            <param name="item">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Set(System.String,System.String)">
            <summary>
            设置指定名称的数据
            </summary>
            <param name="name">名称</param>
            <param name="item">数据</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="P:MetaFly.Datum.Element.CompoundItem.Item(System.String)">
            <summary>
            重写[]操作符，查找指定名称的数据，
            根据名称查找数据
            </summary>
            <param name="name">数据名称</param>
            <returns>找到的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.Clone">
            <summary>
            复制对象
            </summary>
            <returns>复制结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.ToString">
            <summary>
            重写输出字符串函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            CompoundItem的memberList迭代器
            </summary>
            <returns>memberList中的键值对</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.GetEnumerator">
            <summary>
            CompoundItem的memberList键值对迭代器
            </summary>
            <returns>memberList中的键值对</returns>        
        </member>
        <member name="T:MetaFly.Datum.Element.CompoundItem.KeyCollection">
            <summary>
            CompoundItem的键的集合
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.KeyCollection.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            键集合构造函数
            </summary>
            <param name="mbrNameList"></param>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.KeyCollection.GetEnumerator">
            <summary>
            返回循环访问CompoundItem键集合的枚举数
            </summary>
            <returns>当前键</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回循环访问CompoundItem键集合的枚举数
            </summary>
            <returns>当前键</returns>
        </member>
        <member name="T:MetaFly.Datum.Element.CompoundItem.ValueCollection">
            <summary>
            CompoundItem的值的集合
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.ValueCollection.#ctor(System.Collections.Generic.Dictionary{System.String,MetaFly.Datum.Element.TermItem})">
            <summary>
            值集合构造函数
            </summary>
            <param name="memberList"></param>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.ValueCollection.GetEnumerator">
            <summary>
            返回循环访问CompoundItem值集合的枚举数。
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="T:MetaFly.Datum.Element.CompoundItem.ValueCollection.Enumerator">
            <summary>
            枚举CompoundItem值的元素
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.ValueCollection.Enumerator.#ctor(System.Collections.Generic.IEnumerable{MetaFly.Datum.Element.TermItem})">
            <summary>
            构造函数
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:MetaFly.Datum.Element.CompoundItem.ValueCollection.Enumerator.Current">
            <summary>
            获取枚举数当前位置的元素。
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.ValueCollection.Enumerator.Dispose">
            <summary>
             释放由 Enumerator 使用的所有资源
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.ValueCollection.Enumerator.MoveNext">
            <summary>
            使枚举数前进到下一个元素。
            </summary>
            <returns> 如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.CompoundItem.ValueCollection.Enumerator.Reset">
            <summary>
            复位
            </summary>
        </member>
        <member name="T:MetaFly.Datum.Element.SimpleItem">
            <summary>
            简单数据定义类
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.SimpleItem.valueData">
            <summary>
            Meta数据
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.#ctor(MetaFly.Datum.Figure.MetaData)">
            <summary>
            构造函数
            </summary>
            <param name="val">要保存的数据</param>
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.#ctor(MetaFly.Datum.Element.SimpleItem)">
            <summary>
            复制构造函数
            </summary>
            <param name="item">要保存的数据</param>
        </member>
        <member name="P:MetaFly.Datum.Element.SimpleItem.Value">
            <summary>
            Value属性定义
            </summary>
        </member>
        <member name="P:MetaFly.Datum.Element.SimpleItem.Item(System.String)">
            <summary>
            重写[]操作符，查找指定名称的数据，
            枚举数据根据枚举名称查找
            </summary>
            <param name="name">数据名称</param>
            <returns>找到的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.Clone">
            <summary>
            复制对象
            </summary>
            <returns>复制结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.ToString">
            <summary>
            重写输出字符串函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.GetEnumerator">
            <summary>
            单值迭代器
            </summary>
            <returns>当前SimpleItem对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            单值迭代器
            </summary>
            <returns>当前SimpleItem对象</returns>       
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.Create(MetaFly.Datum.Figure.MetaData)">
            <summary>
            创建数据对象
            </summary>
            <param name="val">要保存的数据</param>
            <returns>创建的简单数据对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.Create(System.Int64)">
            <summary>
            创建数据对象
            </summary>
            <param name="val">要保存的数据</param>
            <returns>创建的简单数据对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.Create(System.String)">
            <summary>
            创建数据对象
            </summary>
            <param name="val">要保存的数据</param>
            <returns>创建的简单数据对象</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.SimpleItem.Create(System.Double)">
            <summary>
            创建数据对象
            </summary>
            <param name="val">要保存的数据</param>
            <returns>创建的简单数据对象</returns>
        </member>
        <member name="T:MetaFly.Datum.Element.TermItem">
            <summary>
            抽象数据类
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Bool">
            <summary>
            数据转换布尔类型，不能转换返回空
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Long">
            <summary>
            数据转换整数类型，不能转换返回空
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Double">
            <summary>
            数据转换浮点类型，不能转换返回空
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.String">
            <summary>
            数据转换字符串类型，不能转换返回空
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Compound">
            <summary>
            数据转换组合类型，不能转换返回空。
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Array">
            <summary>
            数据转换数组类型，不能转换返回空
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Simple">
            <summary>
            数据转换数组类型，不能转换返回空
            </summary>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.ToString">
            <summary>
            值的字符串输出
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Find(System.String)">
            <summary>
            根据路径查找指定元素，路径用"."间隔
            </summary>
            <param name="path">数据路径</param>
            <returns>找到的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.FindAll(System.String)">
            <summary>
            根据路径查找指定所有元素，路径用"."间隔
            目前只提供对ArrayItem的通配符（*）查找
            Exp：path = "tracks2.*.id"  or *.id； 星号代表匹配数组所有元素，即取所有数组元素下id节点数据
            </summary>
            <param name="path">数据路径</param>
            <returns>找到的数据，类型为List</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Get(System.String,System.Boolean)">
            <summary>
            查找当前集合中对应路径值
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:MetaFly.Datum.Element.TermItem.Item(System.String)">
            <summary>
            重写[]操作符，查找指定名称的数据，
            </summary>
            <param name="name">数据名称</param>
            <returns>找到的数据</returns>
        </member>
        <member name="P:MetaFly.Datum.Element.TermItem.Item(System.Int64)">
            <summary>
            重写[]操作符，查找指定名称的数据，
            数组类型数据根据下标查找
            </summary>
            <param name="index">下标</param>
            <returns>找到的数据</returns>
        </member>
        <member name="P:MetaFly.Datum.Element.TermItem.Value">
            <summary>
            Value属性定义
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Clone">
            <summary>
            复制函数
            </summary>
            <returns>复制的数据</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.ValueTo``1">
            <summary>
            转换TermItem为T类型
            T属于集合：{long, int, double, float, string, bool, byte, MetaData}
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Flush(MetaFly.Datum.Element.TermItem)">
            <summary>
            冲洗掉原有数据
            </summary>
            <param name="termItem"></param>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItem.Clone(MetaFly.Datum.Element.TermItem)">
            <summary>
            复制数据
            </summary>
            <param name="item">要复制的数据</param>
            <returns>复制的数据</returns>
        </member>
        <member name="T:MetaFly.Datum.Element.TermItemComparer">
            <summary>
            TermItem比较器
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.TermItemComparer.comRefList">
            <summary>
            比较依据
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.TermItemComparer.styleList">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.TermItemComparer.orderList">
            <summary>
            比较顺序，升序还是降序
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemComparer.#ctor(System.String,System.String)">
            <summary>
            比较器构造函数
            </summary>
            <param name="comref">比较依据</param>
            <param name="style">比较类型</param>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemComparer.CompareTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            简单数据比较函数
            </summary>
            <param name="x">数据X</param>
            <param name="y">数据Y</param>
            <param name="style">类型</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemComparer.Style(System.Int32)">
            <summary>
            获取比较类型
            </summary>
            <param name="index">下标</param>
            <returns>比较类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemComparer.Order(System.Int32)">
            <summary>
            获取比较顺序
            </summary>
            <param name="index">下标</param>
            <returns>比较顺序</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemComparer.Compare(MetaFly.Datum.Element.TermItem,MetaFly.Datum.Element.TermItem)">
            <summary>
            原数据比较函数
            </summary>
            <param name="x">数据X</param>
            <param name="y">数据Y</param>
            <returns>比较结果</returns>
        </member>
        <member name="T:MetaFly.Datum.Element.TermItemEqualityComparer">
            <summary>
            TermItem的IEqualityComparer实现
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.TermItemEqualityComparer.comRefList">
            <summary>
            比较依据
            </summary>
        </member>
        <member name="F:MetaFly.Datum.Element.TermItemEqualityComparer.styleList">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemEqualityComparer.Style(System.Int32)">
            <summary>
            获取比较类型
            </summary>
            <param name="index">下标</param>
            <returns>比较类型</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemEqualityComparer.#ctor(System.String,System.String)">
            <summary>
            比较器构造函数
            </summary>
            <param name="comref">比较依据</param>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemEqualityComparer.EqualsType(MetaFly.Datum.Element.TermItem,MetaFly.Datum.Element.TermItem)">
            <summary>
            比较原数据类型是否一致
            </summary>
            <param name="x">数据X</param>
            <param name="y">数据Y</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemEqualityComparer.EqualsTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            根据数据类型比较两个数据是否相等，如果没有定义类型，则比较数据本身
            </summary>
            <param name="x">第一个数据</param>
            <param name="y">第二个数据</param>
            <param name="style">数据类型</param>
            <returns>相等返回true，否则返回false</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemEqualityComparer.Equals(MetaFly.Datum.Element.TermItem,MetaFly.Datum.Element.TermItem)">
            <summary>
            比较原数据是否相等
            </summary>
            <param name="x">数据X</param>
            <param name="y">数据Y</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemEqualityComparer.GetTermItemHashStr(MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            根据数据类型返回数据的Hash字符串
            </summary>
            <param name="obj">数据</param>
            <param name="style">类型</param>
            <returns>Hash字符串</returns>
        </member>
        <member name="M:MetaFly.Datum.Element.TermItemEqualityComparer.GetHashCode(MetaFly.Datum.Element.TermItem)">
            <summary>
            获取原数据HashCode
            </summary>
            <param name="obj">原数据</param>
            <returns>HashCode</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStreamDouble">
            <summary>
            二进制流输出方式的输出浮点类型信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStreamDouble.ExportMetaData(MetaFly.Common.MetaWriter,System.Int64,MetaFly.Datum.Figure.MetaData)">
            <summary>
            二进制流方式输出整数数据
            </summary>
            <param name="sw">输出流</param>
            <param name="length">输出数据长度</param>
            <param name="termitem">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStreamIPAddress">
            <summary>
            二进制流输出方式的输出IP地址类型信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStreamIPAddress.ExportMetaData(MetaFly.Common.MetaWriter,System.Int64,MetaFly.Datum.Figure.MetaData)">
            <summary>
            二进制流方式输出整数数据
            </summary>
            <param name="sw">输出流</param>
            <param name="length">输出数据长度</param>
            <param name="termitem">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStreamLong">
            <summary>
            二进制流输出方式的输出整数类型信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStreamLong.ExportMetaData(MetaFly.Common.MetaWriter,System.Int64,MetaFly.Datum.Figure.MetaData)">
            <summary>
            二进制流方式输出整数数据
            </summary>
            <param name="sw">输出流</param>
            <param name="length">输出数据长度</param>
            <param name="termitem">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStreamBase">
            <summary>
            二进制流输出方式的输出信息抽象类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStreamBase.ExportMetaData(MetaFly.Common.MetaWriter,System.Int64,MetaFly.Datum.Figure.MetaData)">
            <summary>
            二进制流方式输出基本数据
            </summary>
            <param name="sw">输出流</param>
            <param name="length">输出数据长度</param>
            <param name="termitem">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleStreamBase.EnableNameList">
            <summary>
            配置允许属性标签
            新增invalid属性，用于对变量进行无效值筛选，变量值为无效值时，禁止输出
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStreamBase.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStreamEnum">
            <summary>
            二进制流输出方式的输出枚举信息类
            </summary>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStreamRLong">
            <summary>
            二进制流输出方式的输出整数类型信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStreamRLong.ExportMetaData(MetaFly.Common.MetaWriter,System.Int64,MetaFly.Datum.Figure.MetaData)">
            <summary>
            二进制流方式输出整数数据
            </summary>
            <param name="sw">输出流</param>
            <param name="length">输出数据长度</param>
            <param name="termitem">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStreamString">
            <summary>
            二进制流输出方式的输出字符串类型信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStreamString.ExportMetaData(MetaFly.Common.MetaWriter,System.Int64,MetaFly.Datum.Figure.MetaData)">
            <summary>
            二进制流方式输出字符串数据
            </summary>
            <param name="sw">输出流</param>
            <param name="length">输出数据长度</param>
            <param name="termitem">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportAdapter">
            <summary>
            数据输出基类，处理compound、array等类型的输出数据，实现了IDisposable接口
            </summary>
            <remarks>
            公司：CASCO
            作者：张广宇
            创建日期：2014-6-18
            </remarks>
        </member>
        <member name="F:MetaFly.Export.ExportAdapter.termItemList">
            <summary>
            正在输出数据列表
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.End">
            <summary>
            结束输出操作抽象函数
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.Dispose">
            <summary>
            实现IDisposable接口，调用End函数
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.Export(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem)">
            <summary>
            输出接口函数
            </summary>
            <param name="meminfo">输出解释定义</param>
            <param name="termitem">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.CreateSimpleMbrInfo(System.String,MetaFly.Export.ExportMbrSimpleInfo@)">
            <summary>
            创建基本输出配置对象，因为不同输出格式的基本输出配置项不同，所以定义为抽象函数，具体由各个子类实现
            </summary>
            <param name="style">类型字符串</param>
            <param name="membinfo">创建的基本输出配置对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.ExportSimpleItem(MetaFly.Export.ExportMbrOther,MetaFly.Datum.Element.SimpleItem,System.String,System.Boolean)">
            <summary>
            输出SimpleItem数据抽象函数，由子类具体实现
            </summary>
            <param name="meminfo">输出定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="useful">是否输出有效数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.ModifyCompoundContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportContext@)">
            <summary>
            更新Compound数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.RestoreCompoundContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            恢复Compound数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.ModifyArrayContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportContext@)">
            <summary>
            更新Array数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.RestoreArrayContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            恢复Array数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.ModifyArrayContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.Int64,MetaFly.Export.ExportContext,MetaFly.Export.ExportContext@)">
            <summary>
            更新Array数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="index">输出数据的索引</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.RestoreArrayContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.Int64)">
            <summary>
            恢复Array数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="index">输出数据的索引</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.ModifyImportContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportContext@)">
            <summary>
            更新Compound数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.RestoreImportContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            恢复Compound数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.PushMember(MetaFly.Datum.Element.TermItem)">
            <summary>
            添加已知数据
            </summary>
            <param name="termitem">添加数据至查找列表</param>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.PopMember">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.FindMember(System.String)">
            <summary>
            根据路径查找数据
            </summary>
            <param name="namepath">路径</param>
            <returns>数据</returns>
        </member>
        <member name="M:MetaFly.Export.ExportAdapter.FindMemberR(System.String)">
            <summary>
            根据路径反向查找数据
            </summary>
            <param name="namepath">路径</param>
            <returns>数据</returns>
        </member>
        <member name="T:MetaFly.Export.ExportContext">
            <summary>
            输出上下文环境定义
            </summary>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSynArray">
            <summary>
            同步数组输出定义项信息类，继承自ExportMbrArray
            同步数组：即多个数组按照下标交替同步输出
            输出风格限制：synarray的下一级中仅能使用array和text
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSynArray.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSynArray.ExportTermItem(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            输出TermItem数据
            </summary>
            <param name="termitem">输出数据（数组类型Array）</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSynArray.GetSynArrayLength(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            获取synarray同步数组输出长度
            </summary>
            <param name="originLs">起始点列表</param>
            <param name="lengthLs">终止点列表</param>
            <param name="synArrayLength">各数组输出长度</param>
            <returns>各数组输出长度中最大值</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSynArray.VerifyTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Export.ExportAdapter)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="ea">输出适配器</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSynArray.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="T:MetaFly.Export.ExportValuePattern">
            <summary>
            输出参数模式定义类
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportValuePattern.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:MetaFly.Export.ExportValuePattern.CalcFunc">
            <summary>
            求值委托定义
            </summary>
            <param name="value">值</param>
            <returns>求值</returns>
        </member>
        <member name="F:MetaFly.Export.ExportValuePattern.Calc">
            <summary>
            求值委托
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportValuePattern.spaceSymbol">
            <summary>
            间隔符
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportValuePattern.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="pattern">模式定义</param>
        </member>
        <member name="T:MetaFly.Export.IniArrayExportContext">
            <summary>
            Ini格式输出上下文定义类
            </summary>
        </member>
        <member name="P:MetaFly.Export.IniArrayExportContext.IndexName">
            <summary>
            数据索引变量名称
            </summary>
        </member>
        <member name="F:MetaFly.Export.IniArrayExportContext.IndexPattern">
            <summary>
            数组索引计算模式定义
            </summary>
        </member>
        <member name="P:MetaFly.Export.IniArrayExportContext.IndexTerm">
            <summary>
            数组索引记录数据
            </summary>
        </member>
        <member name="M:MetaFly.Export.IniArrayExportContext.#ctor(MetaFly.Export.StringExportContext,MetaFly.Export.ExportValuePattern,MetaFly.Datum.Element.CompoundItem)">
            <summary>
            构造函数
            </summary>
            <param name="context">string类型的上下文</param>
            <param name="indexterm">数据索引记录数据</param>
        </member>
        <member name="M:MetaFly.Export.IniArrayExportContext.SetIndexItem(System.Int64)">
            <summary>
            更新索引
            </summary>
            <param name="index">索引值</param>
        </member>
        <member name="T:MetaFly.Export.IniFmtExporter">
            <summary>
            INI格式输出数据
            继承自StringExporter
            </summary>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.#ctor(System.IO.Stream,System.Boolean,System.String,System.Text.Encoding)">
            <summary>
            构造函数，定义输出流
            </summary>
            <param name="stream">流对象</param>
            <param name="isUseStreamWriter">是否选择StreamWriter作为写流器</param>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.#ctor(System.String,System.Boolean,System.String,System.Text.Encoding)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param>
            <param name="isUseStreamWriter">是否选择StreamWriter作为写流器</param>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.ExportSimpleItem(MetaFly.Export.ExportMbrOther,MetaFly.Datum.Element.SimpleItem,System.String,System.Boolean)">
            <summary>
            重写现了StringExporter的ExportSimpleItem函数，按照INI格式输出SimpleItem数据，useful属性控制是否只输出为空变量
            section：节头([value])
            paramval：名称数值对(name = value)
            pure：纯数据输出
            comment：注释(;value)
            text：文本输出
            </summary>
            <param name="meminfo">输出定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="useful">是否只输出有效数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.CreateSimpleMbrInfo(System.String,MetaFly.Export.ExportMbrSimpleInfo@)">
            <summary>
            创建INI文本方式输出下的基本输出配置对象
            </summary>
            <param name="style">类型字符串</param>
            <param name="meminfo">创建的基本输出配置对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.ExportPrefix(MetaFly.Export.ExportMbrInfo,System.String,System.String)">
            <summary>
            重写了StringExporter的ExportPrefix函数，合成数据的附加信息
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="itemname">数据名称</param>
            <param name="extrainfo">原有的附加信息</param>
            <returns>新的附加信息</returns>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.ModifyArrayContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportContext@)">
            <summary>
            更新Array数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>     
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.RestoreArrayContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            恢复Array数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.ModifyArrayContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.Int64,MetaFly.Export.ExportContext,MetaFly.Export.ExportContext@)">
            <summary>
            更新Array数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="index">输出数据的索引</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.FormatSimpleItem(MetaFly.Export.ExportMbrOther,System.Boolean,MetaFly.Datum.Element.SimpleItem,System.String@)">
            <summary>
            处理简单数据位输出形式
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="useful">是否只输出有效数据</param>
            <param name="termitem">输出数据</param>
            <param name="value">输出字符串</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.IniFmtExporter.ModifyArrayIndexContext(MetaFly.Export.ExportMbrInfo,MetaFly.Export.ExportContext@)">
            <summary>
            设置数组索引参数
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.StreamExporter">
            <summary>
            二进制形式输出数据
            </summary>
        </member>
        <member name="F:MetaFly.Export.StreamExporter.sw">
            <summary>
            数据输出器
            </summary>
        </member>
        <member name="M:MetaFly.Export.StreamExporter.#ctor(MetaFly.Common.MetaWriter)">
            <summary>
            构造函数，定义输出器
            </summary>
            <param name="stream">输出器</param>
        </member>
        <member name="M:MetaFly.Export.StreamExporter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数，定义输出器
            </summary>
            <param name="filename">文件名称</param>
            <param name="bigendian">是否大端输出</param>
        </member>
        <member name="M:MetaFly.Export.StreamExporter.End">
            <summary>
            实现了ExportAdapter的End函数，关闭数据流
            </summary>
        </member>
        <member name="M:MetaFly.Export.StreamExporter.ExportSimpleItem(MetaFly.Export.ExportMbrOther,MetaFly.Datum.Element.SimpleItem,System.String,System.Boolean)">
            <summary>
            实现了ExportAdapter的ExportSimpleItem函数，输出SimpleItem数据,useful属性控制该变量是否输出
            </summary>
            <param name="meminfo">输出定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="useful">是否只输出有效数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StreamExporter.CreateSimpleMbrInfo(System.String,MetaFly.Export.ExportMbrSimpleInfo@)">
            <summary>
            创建二进制流输出下的基本输出配置对象
            </summary>
            <param name="style">类型字符串</param>
            <param name="meminfo">创建的基本输出配置对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleIniBase">
            <summary>
            INI文本方式的输出类型信息抽象类
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrSimpleIniBase.isNeedPrefix">
            <summary>
            是否需求前缀信息
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniBase.ExportMetaData(System.IO.TextWriter,System.String,System.String)">
            <summary>
            INI文本方式输出基本数据
            </summary>
            <param name="sw">输出流</param>
            <param name="prefix">前缀</param>
            <param name="value">值</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniBase.VerifyEA(System.Collections.Generic.List{MetaFly.Export.ExportParamInfo})">
            <summary>
            基于指定输出适配器验证配置
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniBase.Create(System.String,MetaFly.Export.ExportMbrSimpleInfo@)">
            <summary>
            以类静态函数方式创建INI文本方式输出下的基本输出配置对象
            </summary>
            <param name="style">类型字符串</param>
            <param name="meminfo">创建的基本输出配置对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleIniComment">
            <summary>
            INI文本方式的输出类型注释信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniComment.ExportMetaData(System.IO.TextWriter,System.String,System.String)">
            <summary>
            以INI的注释方式输出基本数据
            </summary>
            <param name="sw">输出流</param>
            <param name="prefix">前缀</param>
            <param name="value">值</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleIniComment.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniComment.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleIniParamval">
            <summary>
            INI文本方式的输出类型键值对信息类
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrSimpleIniParamval.isNeedPrefix">
            <summary>
            是否需求前缀信息
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniParamval.ExportMetaData(System.IO.TextWriter,System.String,System.String)">
            <summary>
            以INI的键值对方式输出基本数据
            </summary>
            <param name="sw">输出流</param>
            <param name="prefix">前缀</param>
            <param name="value">值</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleIniParamval.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniParamval.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleIniPure">
            <summary>
            INI文本方式的输出类型文本信息类，文本内容与输出数据直接相关
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniPure.ExportMetaData(System.IO.TextWriter,System.String,System.String)">
            <summary>
            以文本方式输出基本数据
            </summary>
            <param name="sw">输出流</param>
            <param name="prefix">前缀</param>
            <param name="value">值</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleIniPure.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniPure.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleIniSection">
            <summary>
            INI文本方式的输出类型节信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniSection.ExportMetaData(System.IO.TextWriter,System.String,System.String)">
            <summary>
            以INI的节方式输出基本数据
            </summary>
            <param name="sw">输出流</param>
            <param name="prefix">前缀</param>
            <param name="value">值</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleIniSection.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniSection.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleIniText">
            <summary>
            INI文本方式的输出类型文本信息类，文本内容与输出数据无直接关系
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniText.ExportMetaData(System.IO.TextWriter,System.String,System.String)">
            <summary>
            以文本方式输出基本数据
            </summary>
            <param name="sw">输出流</param>
            <param name="prefix">前缀</param>
            <param name="value">值</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniText.VerifyTermItem(MetaFly.Datum.Element.TermItem)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <returns>正确返回success，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleIniText.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleIniText.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportFormatHelper">
            <summary>
            字符串输出辅助静态类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportFormatHelper.FormatSimpleItem(MetaFly.Export.IniFmtExporter,MetaFly.Export.ExportMbrOther,System.Boolean,MetaFly.Datum.Element.SimpleItem,System.String,System.String@)">
            <summary>
            格式化简单类型输出数据
            </summary>
            <param name="ea">输出IniFmtExporter适配器</param>
            <param name="meminfo">输出定义</param>
            <param name="useful">是否只输出有效值，为true时为空不输出</param>
            <param name="termitem">输出数据</param>
            <param name="valuestyle">输出类型</param>
            <param name="value">输出值</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportFormatHelper.FormatSimpleItem(MetaFly.Export.XmlFmtExporter,MetaFly.Export.ExportMbrOther,System.Boolean,MetaFly.Datum.Element.SimpleItem,System.String,System.String@)">
            <summary>
            格式化简单类型输出数据
            </summary>
            <param name="ea">输出XmlFmtExporter适配器</param>
            <param name="meminfo">输出定义</param>
            <param name="useful">是否只输出有效值，为true时为空不输出</param>
            <param name="termitem">输出数据</param>
            <param name="valuestyle">输出类型</param>
            <param name="value">输出值</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportFormatHelper.FormatSimpleItem(MetaFly.Export.ExportMbrOther,System.Boolean,MetaFly.Datum.Element.SimpleItem,System.String,System.String@,MetaFly.Export.ExportAdapter)">
            <summary>
            格式化简单类型输出数据
            </summary>
            <param name="meminfo">输出定义</param>
            <param name="useful">是否只输出有效值，为true时为空不输出</param>
            <param name="termitem">输出数据</param>
            <param name="valuestyle">输出类型</param>
            <param name="value">输出值</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Export.ExportFormatHelper.FormatMetaData(MetaFly.Export.IniFmtExporter,MetaFly.Export.ExportMbrOther,System.Object,System.String@)" -->
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Export.ExportFormatHelper.FormatMetaData(MetaFly.Export.XmlFmtExporter,MetaFly.Export.ExportMbrOther,System.Object,System.String@)" -->
        <member name="M:MetaFly.Export.ExportFormatHelper.FormatMetaData(MetaFly.Export.ExportMbrOther,System.Object,System.String@,MetaFly.Export.ExportAdapter)">
            <summary>
            格式化基本输出数据
            </summary>
            <param name="meminfo">输出定义</param>
            <param name="value">输出数据</param>
            <param name="fmtvalue">格式化定义</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回success,否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStrDouble">
            <summary>
            字符串方式的输出类型浮点信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStrDouble.ExportMetaData(MetaFly.Datum.Figure.MetaData,System.String@)">
            <summary>
            字符串方式转换Double数据
            </summary>
            <param name="metadata">输出数据</param>
            <param name="value">转换数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStrBase">
            <summary>
            字符串方式的输出类型信息抽象类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStrBase.ExportMetaData(MetaFly.Datum.Figure.MetaData,System.String@)">
            <summary>
            字符串方式转换基础数据
            </summary>
            <param name="metadata">输出数据</param>
            <param name="value">转换数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleStrBase.EnableNameList">
            <summary>
            配置允许属性标签
            新增invalid属性标签，当输出配置中出现该标签时，若name索引值等于invalid属性值，则不输出该变量。
            即输出变量值等于无效值时，则不输出该变量
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStrBase.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStrBase.Create(System.String,MetaFly.Export.ExportMbrSimpleInfo@)">
            <summary>
            以类静态函数方式创建字符串文本方式输出下的基本输出配置对象
            </summary>
            <param name="style">类型字符串</param>
            <param name="meminfo">创建的基本输出配置对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStrEntry">
            <summary>
            字符串方式的输出类型输入信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStrEntry.ExportMetaData(MetaFly.Datum.Figure.MetaData,System.String@)">
            <summary>
            字符串方式转换Entry数据
            </summary>
            <param name="metadata">输出数据</param>
            <param name="value">转换数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStrEnum">
            <summary>
            字符串方式的输出类型枚举信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStrEnum.ExportMetaData(MetaFly.Datum.Figure.MetaData,System.String@)">
            <summary>
            字符串方式转换枚举数据
            </summary>
            <param name="metadata">输出数据</param>
            <param name="value">转换数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStrLong">
            <summary>
            字符串方式的输出类型整型信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStrLong.ExportMetaData(MetaFly.Datum.Figure.MetaData,System.String@)">
            <summary>
            字符串方式转换整型数据
            </summary>
            <param name="metadata">输出数据</param>
            <param name="value">转换数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleStrString">
            <summary>
            字符串方式的输出类型字符串信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleStrString.ExportMetaData(MetaFly.Datum.Figure.MetaData,System.String@)">
            <summary>
            字符串方式转换字符串数据
            </summary>
            <param name="metadata">输出数据</param>
            <param name="value">转换数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.StringExportContext">
            <summary>
            字符串输出上下文定义类
            </summary>
        </member>
        <member name="P:MetaFly.Export.StringExportContext.Prefix">
            <summary>
            输出前缀
            </summary>
        </member>
        <member name="M:MetaFly.Export.StringExportContext.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="prefix">需保存的前缀信息</param>
        </member>
        <member name="T:MetaFly.Export.StringExporter">
            <summary>
            字符串形式输出数据
            继承自ExportAdapter
            </summary>
        </member>
        <member name="F:MetaFly.Export.StringExporter.prefix">
            <summary>
            输出前缀
            </summary>
        </member>
        <member name="F:MetaFly.Export.StringExporter.sw">
            <summary>
            字符串输出流
            </summary>
        </member>
        <member name="F:MetaFly.Export.StringExporter.ingoreSign">
            <summary>
            输出前缀是否忽略数据签名
            </summary>
        </member>
        <member name="M:MetaFly.Export.StringExporter.#ctor(System.IO.StreamWriter)">
            <summary>
            构造函数，定义输出流
            </summary>
            <param name="writer">流写入对象，输出文本最后一行为换行符</param>
        </member>
        <member name="M:MetaFly.Export.StringExporter.#ctor(System.IO.Stream,System.Boolean,System.String,System.Text.Encoding)">
            <summary>
            构造函数，定义输出流
            </summary>
            <param name="stream">流对象</param>
            <param name="isUseStreamWriter">选择使用StreamWriter或者MfStreamWriter</param>
        </member>
        <member name="M:MetaFly.Export.StringExporter.#ctor(System.String,System.Boolean,System.String,System.Text.Encoding)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param>
            <param name="isUseStreamWriter">是否使用StreamWriter作为写流器</param>
        </member>
        <member name="M:MetaFly.Export.StringExporter.End">
            <summary>
            实现了ExportAdapter的End函数，关闭数据流
            </summary>
        </member>
        <member name="M:MetaFly.Export.StringExporter.ExportSimpleItem(MetaFly.Export.ExportMbrOther,MetaFly.Datum.Element.SimpleItem,System.String,System.Boolean)">
            <summary>
            实现了ExportAdapter的ExportSimpleItem函数，输出SimpleItem数据,useful属性控制该变量是否输出
            </summary>
            <param name="meminfo">输出定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="useful">是否只输出有效数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.CreateSimpleMbrInfo(System.String,MetaFly.Export.ExportMbrSimpleInfo@)">
            <summary>
            创建字符串文本方式输出下的基本输出配置对象
            </summary>
            <param name="style">类型字符串</param>
            <param name="meminfo">创建的基本输出配置对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.ExportPrefix(System.Int64,System.String)">
            <summary>
            合成数组类型的附加信息
            </summary>
            <param name="index">下标</param>
            <param name="extrainfo">原有的附加信息</param>
            <returns>新的附加信息</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.ExportPrefix(MetaFly.Export.ExportMbrInfo,System.String,System.String)">
            <summary>
            合成数据的附加信息
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="itemname">数据名称</param>
            <param name="extrainfo">原有的附加信息</param>
            <returns>新的附加信息</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.ModifyCompoundContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportContext@)">
            <summary>
            更新Compound数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.RestoreCompoundContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            恢复Compound数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.ModifyArrayContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportContext@)">
            <summary>
            更新Array数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>     
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.RestoreArrayContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            恢复Array数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.ModifyArrayContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.Int64,MetaFly.Export.ExportContext,MetaFly.Export.ExportContext@)">
            <summary>
            更新Array数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="index">输出数据的索引</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.RestoreArrayContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.Int64)">
            <summary>
            恢复Array数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="index">输出数据的索引</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.ModifyImportContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportContext@)">
            <summary>
            更新Import数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.StringExporter.RestoreImportContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            恢复Import数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleXmlValue">
            <summary>
            XML方式的输出类型值信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlValue.ExportMetaData(MetaFly.Summer.IO.XmlVisitor,System.String,System.String,System.String)">
            <summary>
            以修改元素值方式输出基本数据
            </summary>
            <param name="xmltag">需修改的XML元素</param>
            <param name="spacename">名字空间</param>
            <param name="prefix">前缀</param>
            <param name="value">数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleXmlValue.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlValue.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleXmlAttr">
            <summary>
            XML方式的输出类型属性信息类
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrSimpleXmlAttr.isNeedPrefix">
            <summary>
            是否需求前缀信息
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlAttr.ExportMetaData(MetaFly.Summer.IO.XmlVisitor,System.String,System.String,System.String)">
            <summary>
            以修改属性方式输出基本数据
            </summary>
            <param name="xmltag">需修改的XML元素</param>
            <param name="spacename">名字空间</param>
            <param name="prefix">前缀</param>
            <param name="value">数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleXmlAttr.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlAttr.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleXmlBase">
            <summary>
            XML方式的输出类型信息抽象类
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrSimpleXmlBase.isNeedPrefix">
            <summary>
            是否需求前缀信息
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlBase.ExportMetaData(MetaFly.Summer.IO.XmlVisitor,System.String,System.String,System.String)">
            <summary>
            以XML格式输出基本数据
            </summary>
            <param name="xmltag">需修改的XML元素</param>
            <param name="spacename">名字空间</param>
            <param name="prefix">前缀</param>
            <param name="value">数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlBase.VerifyEA(System.Collections.Generic.List{MetaFly.Export.ExportParamInfo})">
            <summary>
            基于指定输出适配器验证配置
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlBase.Create(System.String,MetaFly.Export.ExportMbrSimpleInfo@)">
            <summary>
            以类静态函数方式创建XML文本方式输出下的基本输出配置对象
            </summary>
            <param name="style">类型字符串</param>
            <param name="meminfo">创建的基本输出配置对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleXmlName">
            <summary>
            XML方式的输出类型名称信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlName.ExportMetaData(MetaFly.Summer.IO.XmlVisitor,System.String,System.String,System.String)">
            <summary>
            以修改元素名称方式输出基本数据
            </summary>
            <param name="xmltag">需修改的XML元素</param>
            <param name="spacename">名字空间</param>
            <param name="prefix">前缀</param>
            <param name="value">数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleXmlName.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlName.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleXmlNode">
            <summary>
            XML方式的输出类型子元素信息类
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrSimpleXmlNode.isNeedPrefix">
            <summary>
            是否需求前缀信息
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlNode.ExportMetaData(MetaFly.Summer.IO.XmlVisitor,System.String,System.String,System.String)">
            <summary>
            以添加子元素名称方式输出基本数据
            </summary>
            <param name="xmltag">需修改的XML元素</param>
            <param name="spacename">名字空间</param>
            <param name="prefix">前缀</param>
            <param name="value">数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrSimpleXmlNode.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleXmlNode.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="P:MetaFly.Export.XmlArrayExportContext.IndexName">
            <summary>
            数据索引变量名称
            </summary>
        </member>
        <member name="F:MetaFly.Export.XmlArrayExportContext.IndexPattern">
            <summary>
            数组索引计算模式定义
            </summary>
        </member>
        <member name="P:MetaFly.Export.XmlArrayExportContext.IndexTerm">
            <summary>
            数组索引记录数据
            </summary>
        </member>
        <member name="M:MetaFly.Export.XmlArrayExportContext.#ctor(MetaFly.Export.XmlExportContext,MetaFly.Export.ExportValuePattern,MetaFly.Datum.Element.CompoundItem)">
            <summary>
            构造函数
            </summary>
            <param name="prefix">需保存的前缀信息</param>
            <param name="xmltag">需保存的XML节点</param>
        </member>
        <member name="M:MetaFly.Export.XmlArrayExportContext.SetIndexItem(System.Int64)">
            <summary>
            更新索引
            </summary>
            <param name="index">索引值</param>
        </member>
        <member name="T:MetaFly.Export.XmlExportContext">
            <summary>
            XML输出上下文定义类
            </summary>
        </member>
        <member name="P:MetaFly.Export.XmlExportContext.XmlTag">
            <summary>
            输出XML节点
            </summary>
        </member>
        <member name="M:MetaFly.Export.XmlExportContext.#ctor(System.String,MetaFly.Summer.IO.XmlVisitor)">
            <summary>
            构造函数
            </summary>
            <param name="prefix">需保存的前缀信息</param>
            <param name="xmltag">需保存的XML节点</param>
        </member>
        <member name="T:MetaFly.Export.XmlFmtExporter">
            <summary>
            XML格式输出
            </summary>
        </member>
        <member name="F:MetaFly.Export.XmlFmtExporter.prefix">
            <summary>
            预输出元素名称
            </summary>
        </member>
        <member name="P:MetaFly.Export.XmlFmtExporter.XmlTag">
            <summary>
            当前操作的XML节点
            </summary>
        </member>
        <member name="P:MetaFly.Export.XmlFmtExporter.FileName">
            <summary>
            字符串输出流
            </summary>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.#ctor(System.String,MetaFly.Summer.IO.XmlVisitor)">
            <summary>
            构造函数，定义文件流
            </summary>
            <param name="filename">文件名称</param>
            <param name="xmlroot">根节点</param>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.End">
            <summary>
            实现了ExportAdapter的End函数，关闭数据流
            </summary>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.ExportSimpleItem(MetaFly.Export.ExportMbrOther,MetaFly.Datum.Element.SimpleItem,System.String,System.Boolean)">
            <summary>
            重写现了StringExporter的ExportSimpleItem函数，按照INI格式输出SimpleItem数据，useful属性控制是否只输出为空变量
            name：element名称
            attr：element属性
            value：element值
            node：element子节点
            </summary>
            <param name="meminfo">输出定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="useful">是否只输出有效数据</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.ExportPrefix(MetaFly.Export.ExportMbrInfo,System.String,System.String)">
            <summary>
            合成数据的附加信息
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="itemname">数据名称</param>
            <param name="extrainfo">原有的附加信息</param>
            <returns>新的附加信息</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.ModifyCompoundContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportContext@)">
            <summary>
            更新Compound数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.CreateXmlTag(MetaFly.Export.ExportMbrInfo)">
            <summary>
            创建新的XmlTag并更换为当前XmlTag
            </summary>
            <param name="meminfo">解释定义</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.RestoreCompoundContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            恢复Compound数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.ModifyArrayContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportContext@)">
            <summary>
            更新Array数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.RestoreArrayContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.String)">
            <summary>
            恢复Array数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="termname">数据名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.ModifyArrayContext(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.TermItem,System.Int64,MetaFly.Export.ExportContext,MetaFly.Export.ExportContext@)">
            <summary>
            更新Array数据输出环境上下文
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="index">输出数据的索引</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.RestoreArrayContent(MetaFly.Export.ExportContext,MetaFly.Datum.Element.TermItem,System.Int64)">
            <summary>
            恢复Array数据输出环境上下文
            </summary>
            <param name="context">用来恢复的之前保存的上下文</param>
            <param name="termitem">输出数据</param>
            <param name="index">输出数据的索引</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.CreateSimpleMbrInfo(System.String,MetaFly.Export.ExportMbrSimpleInfo@)">
            <summary>
            创建XML文本方式输出下的基本输出配置对象
            </summary>
            <param name="style">类型字符串</param>
            <param name="meminfo">创建的基本输出配置对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.ExportMetaData(MetaFly.Export.ExportMbrOther,System.Boolean,MetaFly.Datum.Element.SimpleItem,System.String@)">
            <summary>
            处理简单数据位输出形式
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="useful">是否只输出有效数据</param>
            <param name="termitem">输出数据</param>
            <param name="value">输出字符串</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.XmlFmtExporter.ModifyArrayIndexContext(MetaFly.Export.ExportMbrInfo,MetaFly.Export.ExportContext@)">
            <summary>
            设置数组索引参数
            </summary>
            <param name="meminfo">解释定义</param>
            <param name="context">需保存的上下文</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrComplex">
            <summary>
            复杂名称定义输出类（以逗号间隔），继承自ExportMbrInfo
            包含一个ExportMbrInfo对象，存放真正的输出定义项
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportMbrComplex.memInfo">
            <summary>
            输出定义项信息类
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportMbrComplex.nameList">
            <summary>
            分解后的名称列表
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComplex.#ctor(MetaFly.Export.ExportMbrInfo,System.Collections.Generic.Queue{System.String},MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="meminfo">输出定义项信息类</param>
            <param name="namelist">复杂名称定义列表</param>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComplex.ExportTermItem(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            输出负责名称定义的TermItem数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComplex.Verify">
            <summary>
            验证解释定义
            </summary>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComplex.VerifyEA(MetaFly.Export.ExportMbrInfo.CreateSimpleMbrInfo)">
            <summary>
            基于指定输出适配器验证配置
            </summary>
            <param name="createsmbr">创建基本类型输出配置类委托函数</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComplex.VerifyTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Export.ExportAdapter)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="ea">输出适配器</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComplex.ExportComplex(MetaFly.Datum.Element.TermItem,System.String,System.Collections.Generic.Queue{System.String},MetaFly.Export.ExportAdapter)">
            <summary>
            根据XPath输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="namelist">path名称列表</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComplex.ExportComplexCompoundItem(MetaFly.Datum.Element.CompoundItem,System.String,System.Collections.Generic.Queue{System.String},MetaFly.Export.ExportAdapter)">
            <summary>
            根据XPath输出复合数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="namelist">path名称列表</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComplex.ExportComplexArrayItem(MetaFly.Datum.Element.ArrayItem,System.String,System.Collections.Generic.Queue{System.String},MetaFly.Export.ExportAdapter)">
            <summary>
            根据XPath输出数组数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="namelist">path名称列表</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComplex.ExportComplexArrayItem(MetaFly.Datum.Element.ArrayItem,System.Int64,System.Collections.Generic.Queue{System.String},MetaFly.Export.ExportContext,MetaFly.Export.ExportAdapter)">
            <summary>
            根据XPath输出数组的某一个数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="index">输出数据下标</param>
            <param name="namelist">path名称列表</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrSimpleInfo">
            <summary>
            基本输出类型信息类，抽象类
            由各个输出适配器创建具体输出类型对象
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrSimpleInfo.DefautExportMode">
            <summary>
            缺省输出方式
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleInfo.VerifyEA(System.Collections.Generic.List{MetaFly.Export.ExportParamInfo})">
            <summary>
            基于指定输出适配器验证配置
            </summary>
            <param name="paraminfolist">参数定义列表</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleInfo.VerifyTermItem(MetaFly.Datum.Element.TermItem)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <returns>正确返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrSimpleInfo.GetTypeAttrList">
            <summary>
            重写获取简单类型所允许的属性名称列表，抽象函数
            </summary>
            <returns>属性名称列表</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrArray">
            <summary>
            数组输出定义项信息类，继承自ExportMbrComboBase
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrArray.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrArray.ExportTermItem(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            输出TermItem数据
            </summary>
            <param name="termitem">输出数据（数组类型Array）</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrArray.ExportArrayItem(MetaFly.Export.ExportMbrInfo,MetaFly.Datum.Element.ArrayItem,System.Int64,MetaFly.Export.ExportContext,MetaFly.Export.ExportAdapter)">
            <summary>
            根据XPath输出数组的某一个数据
            </summary>
            <param name="meminfo">输出解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="index">输出数据下标</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrArray.VerifyTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Export.ExportAdapter)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="ea">输出适配器</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrArray.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrArray.GetTypeAttrList">
            <summary>
            返回配置允许属性标签
            </summary>
            <returns>配置允许属性标签</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrArray.GetFirstSubMemberInfoList">
            <summary>
            获取ExportMbrArray中第一个SubMemberInfoList
            </summary>
            <returns>列表中首个SubMemberInfoList</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrComboBase">
            <summary>
            组合数据输出基类，继承自ExportMbrInfo
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportMbrComboBase.SubMemberInfoList">
            <summary>
            子输出定义列表
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComboBase.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComboBase.VerifyEA(MetaFly.Export.ExportMbrInfo.CreateSimpleMbrInfo)">
            <summary>
            基于指定输出适配器验证配置
            </summary>
            <param name="createsmbr">创建基本类型输出配置类委托函数</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComboBase.Verify">
            <summary>
            验证输出解释定义
            </summary>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComboBase.VerifySubMbr">
            <summary>
            验证子输出解释定义
            </summary>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrComboBase.GetTypeAttrList">
            <summary>
            返回配置允许属性标签
            </summary>
            <returns>配置允许属性标签</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrCompound">
            <summary>
            复合输出定义项信息类，继承自ExportMbrComboBase
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrCompound.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrCompound.ExportTermItem(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            输出TermItem数据
            </summary>
            <param name="termitem">输出数据（复合类型Compound）</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrCompound.VerifyTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Export.ExportAdapter)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="ea">输出适配器</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrCompound.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrCompound.GetTypeAttrList">
            <summary>
            返回配置允许属性标签
            </summary>
            <returns>配置允许属性标签</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrImport">
            <summary>
            导入输出定义项信息类，继承自ExportMbrLinkBase
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrImport.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrImport.ExportTermItem(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            输出TermItem数据
            </summary>
            <param name="termitem">输出数据（导入类型Import）</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrImport.VerifyTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Export.ExportAdapter)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="ea">输出适配器</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrImport.Verify">
            <summary>
            验证解释定义
            </summary>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrImport.AdjustSubMbr">
            <summary>
            调整子输出配置信息，将导入配置添加到子输出配置列表中
            </summary>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrImport.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrImport.GetTypeAttrList">
            <summary>
            返回配置允许属性标签
            </summary>
            <returns>配置允许属性标签</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrInfo">
            <summary>
            输出定义项信息类
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrInfo.Name">
            <summary>
            名字
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportMbrInfo.ValueInfoList">
            <summary>
            输出属性定义列表
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportMbrInfo.XmlDesc">
            <summary>
            XML描述
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrInfo.FileName">
            <summary>
            输出定义文件名称
            </summary>
        </member>
        <member name="T:MetaFly.Export.ExportMbrInfo.style">
            <summary>
            输出类型枚举
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrInfo.DescribeObj">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrInfo.DescribeLineNo">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象所在行
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrInfo.DescribeStr">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象字符串
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.Export(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            输出数据（序列化数据）
            </summary>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.ExportTermItem(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            根据输出适配器输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.Verify">
            <summary>
            验证解释定义
            </summary>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrInfo.CreateSimpleMbrInfo">
            <summary>
            创建基本类型输出配置类委托函数
            </summary>
            <param name="style">基本类型</param>
            <param name="meminfo">创建的基本类型信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.VerifyEA(MetaFly.Export.ExportMbrInfo.CreateSimpleMbrInfo)">
            <summary>
            基于指定输出适配器验证配置
            </summary>
            <param name="createsmbr">创建基本类型输出配置类委托函数</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.VerifyTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Export.ExportAdapter)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="ea">输出适配器</param>
            <returns>正确返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.ToString">
            <summary>
            重写Tostring函数，返回XML定义
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.InitParamValue(System.String,System.String@,MetaFly.Export.ExportAdapter)">
            <summary>
            获取字符串型数据参数
            </summary>
            <param name="valname">变量名称</param>
            <param name="value">变量值</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.InitParamValue(System.String,System.Boolean@,MetaFly.Export.ExportAdapter)">
            <summary>
            获取布尔类型数据参数
            </summary>
            <param name="valname">变量名称</param>
            <param name="value">变量值</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.InitParamValue(System.String,System.Int64@,MetaFly.Export.ExportAdapter)">
            <summary>
            获取整数类型数据参数
            </summary>
            <param name="valname">变量名称</param>
            <param name="value">变量值</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.HasParam(System.String)">
            <summary>
            判断是否存在指定名称的参数
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.InitParamValue(System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            解析并返回相应的数据
            </summary>
            <param name="name">数据名次</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.InitParamValue(System.String)">
            <summary>
            返回指定属性配置
            </summary>
            <param name="name">数据名次</param>
            <returns>指定属性配置</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.CheckTypeAttrList(System.Collections.Generic.List{System.String})">
            <summary>
            检查参数定义是否合法
            </summary>
            <param name="enablenamelist">允许参数列表</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrInfo.Create(MetaFly.Export.ExportMbrInfo@,MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            创建并验证ExportMemberInfo对象
            </summary>
            <param name="meminfo">创建的ExportMemberInfo对象</param>
            <param name="xmldesc">输出定义</param>
            <param name="filename">文件名</param>
            <returns>验证正确返回success，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrLinkBase">
            <summary>
            关联输出数据输出基类，继承自ExportMbrInfo
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrLinkBase.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrLinkBase.ExportLinkItem(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportMbrInfo,MetaFly.Export.ExportAdapter)">
            <summary>
            输出关联(import和parse)定义的导入数据
            </summary>
            <param name="submeminfo">导入解释定义</param>
            <param name="termitem">输出数据</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">解释输出器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrLinkBase.VerifySubMbr">
            <summary>
            验证子输出解释定义
            </summary>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportMbrOther">
            <summary>
            其他输出定义项信息类，继承自ExportMbrInfo
            由各具体输出适配类定义
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportMbrOther.Style">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportMbrOther.MemSimpInfo">
            <summary>
            基本输出定义信息，由具体输出适配类创建
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportMbrOther.paramInfoList">
            <summary>
            参数信息列表
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrOther.#ctor(System.String,MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="style">参数类型</param>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrOther.ExportParamItem(System.Collections.Generic.List{System.Object}@,MetaFly.Export.ExportAdapter)">
            <summary>
            输出参数信息
            </summary>
            <param name="valuelist">参数数据列表</param>
            <param name="ea">输出适配类</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrOther.ExportTermItem(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            输出TermItem数据
            </summary>
            <param name="termitem">输出数据（简单类型SimpleTerm）</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrOther.VerifyEA(MetaFly.Export.ExportMbrInfo.CreateSimpleMbrInfo)">
            <summary>
            基于指定输出适配器验证配置
            </summary>
            <param name="createsmbr">创建基本类型输出配置类委托函数</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrOther.Verify">
            <summary>
            验证解释定义
            </summary>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrOther.VerifyTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Export.ExportAdapter)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="ea">输出适配器</param>
            <returns>正确返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrOther.VerifyParam">
            <summary>
            验证参数定义
            </summary>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrParse.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportMbrParse.ExportTermItem(MetaFly.Datum.Element.TermItem,System.String,MetaFly.Export.ExportAdapter)">
            <summary>
            输出TermItem数据
            </summary>
            <param name="termitem">输出数据（解析类型Parse）</param>
            <param name="termname">输出数据名称</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrParse.VerifyTermItem(MetaFly.Datum.Element.TermItem,MetaFly.Export.ExportAdapter)">
            <summary>
            验证输出数据
            </summary>
            <param name="termitem">输出数据</param>
            <param name="ea">输出适配器</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Export.ExportMbrParse.EnableNameList">
            <summary>
            配置允许属性标签
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportMbrParse.GetTypeAttrList">
            <summary>
            返回配置允许属性标签
            </summary>
            <returns>配置允许属性标签</returns>
        </member>
        <member name="M:MetaFly.Export.ExportMbrParse.InitParamValue(System.String,MetaFly.Datum.Figure.XPDData@,MetaFly.Export.ExportAdapter)">
            <summary>
            获取导入类型数据
            </summary>
            <param name="valname">数据名称</param>
            <param name="value">导入类型数据</param>
            <param name="ea">输出适配器</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportParamInfo">
            <summary>
            输出参数定义项信息
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportParamInfo.Name">
            <summary>
            名字
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportParamInfo.XmlDesc">
            <summary>
            XML描述
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportParamInfo.FileName">
            <summary>
            输出定义文件名称
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportParamInfo.DescribeObj">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportParamInfo.DescribeLineNo">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象所在行
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportParamInfo.DescribeStr">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象字符串
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportParamInfo.#ctor(System.String,MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">变量名称</param>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportParamInfo.Export(System.Object@,MetaFly.Export.ExportAdapter)">
            <summary>
            处理简单数据位输出形式
            </summary>
            <param name="value">输出数据</param>
            <param name="ea">输出适配器</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportParamInfo.ExportParam(System.Object@,MetaFly.Datum.Figure.MetaData)">
            <summary>
            输出参数
            </summary>
            <param name="value">参数值</param>
            <param name="valuedata">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportParamInfo.Create(MetaFly.Export.ExportParamInfo@,MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            验证解释定义
            </summary>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportParamLong">
            <summary>
            整数类型的参数定义信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportParamLong.#ctor(System.String,MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">变量名称</param>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportParamLong.ExportParam(System.Object@,MetaFly.Datum.Figure.MetaData)">
            <summary>
            输出整数类型参数
            </summary>
            <param name="value">参数值</param>
            <param name="valuedata">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportParamString">
            <summary>
            字符串类型的参数定义信息类
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportParamString.#ctor(System.String,MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">变量名称</param>
            <param name="xmldesc">XML解释描述</param>
            <param name="filename">解释描述文件名称</param>
        </member>
        <member name="M:MetaFly.Export.ExportParamString.ExportParam(System.Object@,MetaFly.Datum.Figure.MetaData)">
            <summary>
            输出字符串类型参数
            </summary>
            <param name="value">参数值</param>
            <param name="valuedata">输出数据</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Export.ExportValue">
            <summary>
            输出定义属性信息
            </summary>
        </member>
        <member name="T:MetaFly.Export.ExportValue.style">
            <summary>
            属性类型枚举
            </summary>
        </member>
        <member name="F:MetaFly.Export.ExportValue.styleNames">
            <summary>
            属性类型值列表
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:MetaFly.Export.ExportValue.ValDesc">
            <summary>
            定义描述
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportValue.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="valdesc">定义描述</param>
            <param name="value">值</param>
        </member>
        <member name="M:MetaFly.Export.ExportValue.Parse(MetaFly.Export.ExportAdapter)">
            <summary>
            根据style和value进行解析，返回解析结果
            </summary>
            <param name="ea">输出适配器</param>
            <returns>解释结果</returns>
        </member>
        <member name="M:MetaFly.Export.ExportValue.Create(MetaFly.Export.ExportValue@,System.String)">
            <summary>
            验证属性信息
            </summary>
            <returns>正确返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Export.ExportValue.GetValueStyle(System.String,System.String@)">
            <summary>
            获取value描述的类型和值，其中":"之前的是类型，之后的是值，如果没有":"则类型是value。
            </summary>
            <param name="valuedesc">value描述</param>
            <param name="value">返回的值</param>
            <returns>类型</returns>
        </member>
        <member name="M:MetaFly.Export.ExportValue.ToString">
            <summary>
            重载tostring函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:MetaFly.Export.ExportValueMember">
            <summary>
            为变量名的输出定义属性信息
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportValueMember.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="valdesc">定义描述</param>
            <param name="value">值</param>
        </member>
        <member name="M:MetaFly.Export.ExportValueMember.Parse(MetaFly.Export.ExportAdapter)">
            <summary>
            根据style和value进行解析，返回解析结果
            </summary>
            <param name="ea">输出适配器</param>
            <returns>解释结果</returns>
        </member>
        <member name="T:MetaFly.Export.ExportValueValue">
            <summary>
            为值的输出定义属性信息
            </summary>
        </member>
        <member name="M:MetaFly.Export.ExportValueValue.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="valdesc">定义描述</param>
            <param name="value">值</param>
        </member>
        <member name="M:MetaFly.Export.ExportValueValue.Parse(MetaFly.Export.ExportAdapter)">
            <summary>
            根据style和value进行解析，返回解析结果
            </summary>
            <param name="ea">输出适配器</param>
            <returns>解释结果</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoDebug.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoException">
            <summary>
            异常处理标签，func调用发生异常时，使用该标签处理异常，并将异常处理结果向上抛给对应变量。程序不会中断
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoException.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoSplit.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoSplit.VerifyReq(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            检查当前属性的合法性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoSplit.VerifySuf(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,System.String,System.String)">
            <summary>
            检查属性存在的合法性，除value外允许有alias属性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <param name="key">名称</param>
            <param name="value">值</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueLamda.#ctor(System.String,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="value">value数据</param>
            <param name="valdesc">value描述定义</param>
            <param name="paramagent">关联ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamValueLamda.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义进行解析
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamInfo">
            <summary>
            Param数据定义抽象类，实现了IAnalysisDescribe接口
            </summary>
        </member>
        <member name="T:MetaFly.Parse.ParamInfo.style">
            <summary>
            解释类型枚举定义
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParamInfo.style.debug">
            <summary>
            仅用于设置全局配置变量Debug
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParamInfo.styleNames">
            <summary>
            解释类型名称列表
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParamInfo.ParamVal">
            <summary>
            参数值信息
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParamInfo.ParamAgent">
            <summary>
            相关ParseParamAgent对象
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.XmlDesc">
            <summary>
            XML描述
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.FileName">
            解释定义文件名
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.OtherValList">
            <summary>
            其他属性列表
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.OtherNameList">
            <summary>
            其他名称列表
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.Style">
            <summary>
            解释类型
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.DescribeObj">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.DescribeLineNo">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象所在行
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.DescribeStr">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象字符串
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.Value">
            <summary>
            param的value值
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.IsFuncParamInfo">
            <summary>
            判断解释参数定义是否为Func类型
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamInfo.FuncParamValue">
            <summary>
            返回Func类型的Value，如果不是func类型，则返回空
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数，创建ParamInfo对象
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.ParseParameters(System.String,System.Int32,System.Collections.Generic.List{MetaFly.Datum.Element.TermItem}@,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            初始化参数列表
            </summary>
            <param name="funcname">函数名称</param>
            <param name="paramcount">参数个数</param>
            <param name="parameterList">参数列表</param>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回success，参数列表保存在parameterList表，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            解析解释定义，返回解析结果
            </summary>
            <param name="rtinfo">解释运行环境</param>
            <returns>解释结果</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.Verify(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            验证解释定义
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.VerifyReq(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            抽象函数，检查当前属性的合法性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.VerifySuf(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,System.String,System.String)">
            <summary>
            抽象函数，检查属性存在的合法性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <param name="key">名称</param>
            <param name="value">值</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.Default(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            计算缺省值。
            1.如果没有定义default属性
                1.func:对应函数定义的Default
                3.member:已定义变量
                4.value:对应的数值
                5.其他:字符串("0")
                6.memberref:字符串("0")
            2.定义default属性按default定义计算
                default只能定义为alias，member,value和func
            </summary>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.ToString">
            <summary>
            重写了toString函数
            </summary>
            <returns>xml描述</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.FindParamInfo(MetaFly.Parse.ParamInfo.style)">
            <summary>
            查找指定类型参数，返回第一个
            </summary>
            <param name="paramstyle">参数类型</param>
            <returns>返回参数信息</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.FindAllParamInfo(MetaFly.Parse.ParamInfo.style)">
            <summary>
            查找所有指定类型参数
            </summary>
            <param name="paramstyle">参数类型</param>
            <returns>返回参数信息列表</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.FindAllParamInfo">
            <summary>
            返回所有参数
            </summary>
            <returns>返回参数信息列表</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.VerifyParamVal(System.String)">
            <summary>
            验证param参数
            </summary>
            <param name="funcname">函数名称</param>
            <returns>正确返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.VerifyOtherVal(System.String)">
            <summary>
            验证除value的非值解释定义
            </summary>
            <param name="funcname">函数名称</param>
            <returns>正确返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.VerifyName(System.String)">
            <summary>
            验证解释定义的Name部分(不能包含".: ',不能等于"input")
            </summary>
            <param name="name">名称</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.GetOtherName(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="stylename">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.GetOtherVal(System.String)">
            <summary>
            获取属性信息
            </summary>
            <param name="stylename">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.CreateOtherVal(System.String,System.String,System.String)">
            <summary>
            创建除value外的其他非值属性参数，以创建添加value属性的名称为param的xml元素创建ParseParamAgent对象
            </summary>
            <param name="funcname">函数名称</param>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.Create(MetaFly.Parse.ParamInfo@,MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            根据解释定义创建ParamInfo对象
            </summary>
            <param name="paraminf">返回创建的ParamInfo对象</param>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
            <returns>成功返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.GetParamInfoStyle(MetaFly.Parse.ParamInfo.style@,System.String)">
            <summary>
            根据style名称返回相应style
            </summary>
            <param name="stl">返回的style</param>
            <param name="stylestr">strle字符串</param>
            <returns>正确返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.LogInfo(MetaFly.Summer.Generic.LogLevel,System.String)">
            <summary>
            日志输出
            </summary>
            <param name="logLevel"></param>
            <param name="info"></param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfo.LogError(System.String,System.String)">
            <summary>
            报错输出日志信息
            </summary>
            <param name="errorCode"></param>
            <param name="errorInfo"></param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoCase">
            <summary>
            case类型的解释参数定义，继承自ParamInfo
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoCase.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoCase.VerifyReq(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            检查当前属性的合法性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoCase.VerifySuf(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,System.String,System.String)">
            <summary>
            检查属性存在的合法性,除value外允许有cond、action属性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <param name="key">名称</param>
            <param name="value">值</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoDefault">
            <summary>
            default类型的解释参数定义，继承自ParamCase
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoDefault.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoFilter">
            <summary>
            筛选标签，必须保证返回值是BoolData
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoFilter.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoFilter.VerifyReq(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            检查当前属性的合法性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoFilter.VerifySuf(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,System.String,System.String)">
            <summary>
            检查属性存在的合法性，不允许出现value外的属性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <param name="key">名称</param>
            <param name="value">值</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoFilter.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            解析解释定义，返回解析结果
            </summary>
            <param name="rtinfo">解释运行环境</param>
            <returns>解释结果</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoFunc">
            <summary>
            func类型的解释参数定义，继承自ParamFunc
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoFunc.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoFunc.VerifyReq(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            检查当前属性的合法性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoFunc.VerifySuf(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,System.String,System.String)">
            <summary>
            检查属性存在的合法性，除value外允许有name属性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <param name="key">名称</param>
            <param name="value">值</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoIndex">
            <summary>
            index类型的解释参数定义，继承自ParamInfoParam
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoIndex.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoIndexinit">
            <summary>
            index_init类型的解释参数定义，继承自ParamInfoParam
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoIndexinit.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoLen">
            <summary>
            len类型的解释参数定义，继承自ParamInfoParam
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoLen.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoLog.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoLog.VerifyReq(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            检查当前属性的合法性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoLog.VerifySuf(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,System.String,System.String)">
            <summary>
            检查属性存在的合法性，除value外允许有name属性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <param name="key">名称</param>
            <param name="value">值</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoLog.VerifyName(System.String)">
            <summary>
            验证解释定义的Name部分,name不能为空
            </summary>
            <param name="name">名称</param>
            <returns>通过返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoLog.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            解析解释定义，返回解析结果
            </summary>
            <param name="rtinfo">解释运行环境</param>
            <returns>解释结果</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoMember">
            <summary>
            member类型的解释参数定义，继承自ParamInfo
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoMember.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoMember.VerifyReq(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            检查当前属性的合法性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoMember.VerifySuf(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,System.String,System.String)">
            <summary>
            检查属性存在的合法性，除value外允许有name、default属性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <param name="key">名称</param>
            <param name="value">值</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoMembergroup">
            <summary>
            membergroup类型的解释参数定义，继承自ParamInfoMember
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoMembergroup.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoOper">
            <summary>
            oper类型的解释参数定义，继承自ParamInfoMember
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoOper.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoParam">
            <summary>
            membergroup类型的解释参数定义，继承自ParamInfo
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoParam.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoParam.VerifyReq(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            检查当前属性的合法性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoParam.VerifySuf(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,System.String,System.String)">
            <summary>
            检查属性存在的合法性，除value外允许有alias属性
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许有名称</param>
            <param name="hasdefault">是否允许有缺省值</param>
            <param name="hasalias">是否允许有alias别名</param>
            <param name="key">名称</param>
            <param name="value">值</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoQualification">
            <summary>
            qualification类型的解释参数定义，继承自ParamInfoParam
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoQualification.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoResult">
            <summary>
            result类型的解释参数定义，继承自ParamInfoParam
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoResult.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoSibling">
            <summary>
            sibling类型的解释参数定义，继承自ParamInfoParam
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoSibling.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoSource">
            <summary>
            source类型的解释参数定义，继承自ParamInfoParam
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoSource.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamInfoVariable">
            <summary>
            variable类型的解释参数定义，继承自ParamInfoMember
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamInfoVariable.#ctor(MetaFly.Summer.IO.XmlVisitor,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <param name="paramagent">相关ParseParamAgent对象</param>
        </member>
        <member name="T:MetaFly.Parse.ParamValue">
            <summary>
            解释定义value信息类，实现了IAnalysisDescribe接口
            </summary>
        </member>
        <member name="T:MetaFly.Parse.ParamValue.style">
            <summary>
            解释属性类型枚举定义
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParamValue.styleNames">
            <summary>
            解释属性名称列表
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParamValue.SubParamAgentList">
            <summary>
            解释参数定义列表
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParamValue.ParamAgent">
            <summary>
            相关ParseParamAgent对象
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamValue.Value">
            <summary>
            属性值
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamValue.ValDesc">
            <summary>
            属性描述
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamValue.XmlDesc">
            <summary>
            属性XML描述，可能为空
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamValue.FileName">
            <summary>
            解释定义文件名
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamValue.DescribeObj">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamValue.DescribeLineNo">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象所在行
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParamValue.DescribeStr">
            <summary>
            实现IAnalysisDescribe接口，返回描述对象字符串
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.#ctor(System.String,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="value">value数据</param>
            <param name="valdesc">value描述定义</param>
            <param name="paramagent">关联ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.Init(System.Collections.Generic.List{MetaFly.Summer.IO.XmlVisitor})">
            <summary>
            初始化函数
            </summary>
            <param name="xmlparamlist">子参数定义列表</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.Init(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            初始化某子参数定义信息
            </summary>
            <param name="xmlparam">子参数定义</param>
            <param name="filename">子参数定义文件名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义进行解析
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.Default(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义计算缺省值
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.VerifyValue(System.String)">
            <summary>
            验证value数据
            </summary>
            <param name="funcname">函数名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.ToString">
            <summary>
            重写ToString函数
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.FindAllParamInfo">
            <summary>
            返回所有参数
            </summary>
            <returns>返回参数信息列表</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.SplitParamValue(System.String@,System.Collections.Generic.List{System.String}@)">
            <summary>
            分割复杂value
            </summary>
            <param name="value">值</param>
            <param name="paramstrlist">分割的子参数列表</param>
            <returns>成功返回succes，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.SubParamValue(System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            分割指定位置字符串为子参数值
            </summary>
            <param name="value">属性值</param>
            <param name="startindex">开始位置</param>
            <param name="length">长度</param>
            <param name="paramval">分割的子字符串</param>
            <returns>成功返回succes，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.Create(MetaFly.Parse.ParamValue@,MetaFly.Parse.ParseParamAgent)">
            <summary>
            创建ParamValue对象
            </summary>
            <param name="paramvalue">创建的ParamValue对象</param>
            <param name="paramagent">相关的ParseParamAgent对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.Create(MetaFly.Parse.ParamValue@,System.String,System.Collections.Generic.List{MetaFly.Summer.IO.XmlVisitor},MetaFly.Parse.ParseParamAgent)">
            <summary>
            创建ParamValue对象
            </summary>
            <param name="paramvalue">创建的ParamValue对象</param>
            <param name="valDesc">解释定义描述</param>
            <param name="xmlparamlist">子参数定义列表</param>
            <param name="paramagent">相关的ParseParamAgent对象</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="F:MetaFly.Parse.ParamValue.dynamicPath">
            <summary>
            动态路径索引忽略数组 
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.GetValueStyle(System.String,System.String@)">
            <summary>
            获取value描述的类型和值，其中":"之前的是类型，之后的是值，如果没有":"则类型是value。
            </summary>
            <param name="valuedesc">value描述</param>
            <param name="value">返回的值</param>
            <returns>类型</returns>
        </member>
        <member name="F:MetaFly.Parse.ParamValue.escapelist">
            <summary>
            转义符列表
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValue.EscapeValue(System.String)">
            <summary>
            字符转义
            </summary>
            <param name="value">转义前值</param>
            <returns>转义后值</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamValueAlias">
            <summary>
            解释定义value为alias类型信息类，继承自ParamValue
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValueAlias.#ctor(System.String,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="value">value数据</param>
            <param name="valdesc">value描述定义</param>
            <param name="paramagent">关联ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamValueAlias.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义进行解析
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueAlias.VerifyValue(System.String)">
            <summary>
            验证数据合法性
            </summary>
            <param name="funcname">函数名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamValueFunc">
            <summary>
            解释定义value为func类型信息类，继承自ParamValueFuncref
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFunc.#ctor(System.String,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="value">value数据</param>
            <param name="valdesc">value描述定义</param>
            <param name="paramagent">关联ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFunc.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义进行解析
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFunc.Default(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义计算缺省值
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFunc.VerifyValue(System.String)">
            <summary>
            验证数据合法性
            </summary>
            <param name="funcname">函数名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamValueFuncref">
            <summary>
            解释定义value为funcref类型信息类，继承自ParamValue
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFuncref.#ctor(System.String,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="value">value数据</param>
            <param name="valdesc">value描述定义</param>
            <param name="paramagent">关联ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFuncref.Init(System.Collections.Generic.List{MetaFly.Summer.IO.XmlVisitor})">
            <summary>
            初始化函数
            </summary>
            <param name="xmlparamlist">子参数定义列表</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFuncref.CalcWithCatchException(MetaFly.Interpreter.PrototypeFunc,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            捕捉func执行异常，若存在exp标签，则由exp处理异常，否则返回错误的异常信息
            </summary>
            <param name="func"></param>
            <param name="rtinfo"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFuncref.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义进行解析
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFuncref.VerifyValue(System.String)">
            <summary>
            验证数据合法性
            </summary>
            <param name="funcname">函数名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueFuncref.Default(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义计算缺省值
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamValueImport">
            <summary>
            解释定义value为import类型信息类，继承自ParamValue
            实现了解释定义的导入功能，可以导入member、oper和func解释定义，其中member和oper还可以通过parese函数进行解析。
            元素类型和导入元素类型必须一致，（member和membergroup视为一致），
            导入元素路径以.间隔，第一个数据为文件名（无后缀，应为xml格式），之后数据为元素的name列表，中间元素皆为member或membergroup
            导入定义允许嵌套定义。
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValueImport.#ctor(System.String,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="value">value数据</param>
            <param name="valdesc">value描述定义</param>
            <param name="paramagent">关联ParseParamAgent对象</param>
        </member>
        <member name="P:MetaFly.Parse.ParamValueImport.ImportParamAgent">
            <summary>
            返回导入的解释定义
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValueImport.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义进行解析
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueImport.Default(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义计算缺省值
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueImport.VerifyValue(System.String)">
            <summary>
            验证数据合法性
            </summary>
            <param name="funcname">函数名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamValueMember">
            <summary>
            解释定义value为member类型信息类，继承自ParamValueMemberref
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValueMember.#ctor(System.String,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="value">value数据</param>
            <param name="valdesc">value描述定义</param>
            <param name="paramagent">关联ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamValueMember.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义进行解析
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueMember.Default(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义计算缺省值
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamValueMemberref">
            <summary>
            解释定义value为memberref类型信息类，继承自ParamValue
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValueMemberref.#ctor(System.String,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="value">value数据</param>
            <param name="valdesc">value描述定义</param>
            <param name="paramagent">关联ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamValueMemberref.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义进行解析
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueMemberref.VerifyValue(System.String)">
            <summary>
            验证数据合法性
            </summary>
            <param name="funcname">函数名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParamValueValue">
            <summary>
            解释定义value为value类型信息类，继承自ParamValue
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParamValueValue.#ctor(System.String,System.String,MetaFly.Parse.ParseParamAgent)">
            <summary>
            构造函数
            </summary>
            <param name="value">value数据</param>
            <param name="valdesc">value描述定义</param>
            <param name="paramagent">关联ParseParamAgent对象</param>
        </member>
        <member name="M:MetaFly.Parse.ParamValueValue.Init(System.Collections.Generic.List{MetaFly.Summer.IO.XmlVisitor})">
            <summary>
            初始化函数
            </summary>
            <param name="xmlparamlist">子参数定义列表</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueValue.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义进行解析
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueValue.Default(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            根据解释定义计算缺省值
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueValue.VerifyValue(System.String)">
            <summary>
            验证数据合法性
            </summary>
            <param name="funcname">函数名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParamValueValue.VerifyFuncVal(System.String)">
            <summary>
            验证参数类型为func的数据合法性
            </summary>
            <param name="funcname">函数名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Parse.ParseParamAgent">
            <summary>
            解释定义参数代理类，用来封装解释参数定义
            </summary>
        </member>
        <member name="T:MetaFly.Parse.ParseParamAgent.existchoice">
            <summary>
            配置元素属性存在性选择
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParseParamAgent.ParamInf">
            <summary>
            解释参数定义信息
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.DescribeObj">
            <summary>
            实现IAnalysisDescribe接口，返回解释参数定义信息的描述对象
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.DescribeLineNo">
            <summary>
            实现IAnalysisDescribe接口，返回解释参数定义信息的描述对象所在行
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.DescribeStr">
            <summary>
            实现IAnalysisDescribe接口，返回解释参数定义信息的描述对象字符串
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.FileName">
            <summary>
            返回解释参数定义信息的文件名
            </summary>       
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.Name">
            <summary>
            返回解释参数定义信息的名称
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.Style">
            <summary>
            返回解释参数定义信息的类型
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.XmlDesc">
            <summary>
            返回解释参数定义的XML描述，可能为空
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.Value">
            <summary>
            返回解释参数定义的值
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.IsFuncParamInfo">
            <summary>
            判断解释参数定义是否为Func类型
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseParamAgent.FuncParamValue">
            <summary>
            返回Func类型的Value
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.Parse(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            解析解释定义，返回解析结果
            </summary>
            <param name="rtinfo">解释环境信息</param>
            <returns>解释结果</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.Default(MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            计算缺省值。
            </summary>
            <param name="rtinfo">运行环境</param>
            <returns>运算结果</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.ParseParameters(System.String,System.Int32,System.Collections.Generic.List{MetaFly.Datum.Element.TermItem}@,MetaFly.Parse.ParseRunTimeInfo)">
            <summary>
            初始化参数列表
            </summary>
            <param name="funcname">函数名称</param>
            <param name="paramcount">参数个数</param>
            <param name="parameterList">参数列表</param>
            <param name="rtinfo">解释运行环境</param>
            <returns>成功返回success，参数列表保存在parameterList表，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.VerifyParamVal(System.String)">
            <summary>
            验证解释参数定义的value值
            </summary>
            <param name="funcname">函数名称</param>
            <returns>成功返回success,否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.Verify(System.String,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice,MetaFly.Parse.ParseParamAgent.existchoice)">
            <summary>
            验证解释参数定义
            </summary>
            <param name="funcname">函数名称</param>
            <param name="hasname">是否允许定义name属性</param>
            <param name="hasdefault">是否允许定义default属性</param>
            <param name="hasalias">是否允许定义alias属性</param>
            <returns>正确返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.FindParamInfo(MetaFly.Parse.ParamInfo.style)">
            <summary>
            查找指定类型参数，返回第一个
            </summary>
            <param name="paramstyle">参数类型</param>
            <returns>返回参数信息</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.FindAllParamInfo(MetaFly.Parse.ParamInfo.style)">
            <summary>
            查找所有指定类型参数
            </summary>
            <param name="paramstyle">参数类型</param>
            <returns>返回参数信息列表</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.FindAllParamInfo">
            <summary>
            返回所有参数
            </summary>
            <returns>返回参数信息列表</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.Init(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            初始化
            </summary>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.GetOtherName(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="stylename">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.GetOtherVal(System.String)">
            <summary>
            获取属性信息
            </summary>
            <param name="stylename">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.ToString">
            <summary>
            重写了toString函数
            </summary>
            <returns>xml描述</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseParamAgent.Create">
            <summary>
            生成ParseParamAgent对象
            </summary>
            <returns>ParseValueInfo对象</returns>
        </member>
        <member name="T:MetaFly.Parse.MemberInfo">
            <summary>
            变量信息存储类
            </summary>
        </member>
        <member name="P:MetaFly.Parse.MemberInfo.Name">
            <summary>
            变量名称
            </summary>
        </member>
        <member name="P:MetaFly.Parse.MemberInfo.Item">
            <summary>
            变量值
            </summary>
        </member>
        <member name="M:MetaFly.Parse.MemberInfo.#ctor(System.String,MetaFly.Datum.Element.TermItem)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="item">值</param>
        </member>
        <member name="T:MetaFly.Parse.ParseRunTimeInfo">
            <summary>
            解释运行时信息
            PS:主要包括自定义的函数、当前已解析的参数。以及解析的入口，
            </summary>
        </member>
        <member name="P:MetaFly.Parse.ParseRunTimeInfo.IsDebug">
            <summary>
            debug模式，通过debug标签定义
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParseRunTimeInfo.variableList">
            <summary>
            保存当前作用域内可访问的变量
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParseRunTimeInfo.variableDic">
            <summary>
            当前作用域内可访问的变量字典，提高查找效率
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParseRunTimeInfo.aliasDic">
            <summary>
            保存当前作用域内可访问的变量别名
            </summary>
        </member>
        <member name="F:MetaFly.Parse.ParseRunTimeInfo.functionDic">
            <summary>
            保存当前作用域内可访问的函数，只包括用户自定义函数，以名称为主键
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.Clear">
            <summary>
            清理当前上下文
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.AddVariable(System.String,MetaFly.Datum.Element.TermItem)">
            <summary>
            添加变量
            </summary>
            <param name="name">变量名称</param>
            <param name="item">变量</param>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.AddVariable(MetaFly.Parse.MemberInfo)">
            <summary>
            添加变量
            </summary>
            <param name="mbr">变量数据</param>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.RemoveVariable(System.String)">
            <summary>
            删除变量
            </summary>
            <param name="name">变量名称</param>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.FindVariable(System.String)">
            <summary>
            根据路径查找变量
            </summary>
            <param name="namepath">变量的路径，以"."间隔</param>
            <returns>变量对象，没有定义返回null</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.AddAlias(System.String,MetaFly.Datum.Element.TermItem)">
            <summary>
            添加变量别名
            </summary>
            <param name="name">变量名称</param>
            <param name="item">变量</param>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.AddAlias(System.String,MetaFly.Datum.Figure.MetaData)">
            <summary>
            添加变量别名
            </summary>
            <param name="name">变量名称</param>
            <param name="item">变量</param>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.UpdateAliasList(System.Collections.Generic.Dictionary{System.String,MetaFly.Datum.Element.TermItem})">
            <summary>
            更新并返回当前别名列表
            </summary>
            <param name="newaliaslist">新别名变量列表</param>
            <returns>当前别名列表</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.FindAlias(System.String)">
            <summary>
            根据别名的路径查找变量
            </summary>
            <param name="namepath">变量的路径，以"."间隔</param>
            <returns>变量对象，没有定义返回null</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.AddFunc(MetaFly.Interpreter.PrototypeFunc)">
            <summary>
            添加函数
            </summary>
            <param name="func">函数定义</param>
            <returns>成功返回true，没有重复定义；否则返回false</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.FindFunc(System.String)">
            <summary>
            返回指定名称的函数对象
            </summary>
            <param name="name">函数名称</param>
            <returns>函数对象，没有定义返回null</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.RemoveFunc(System.String)">
            <summary>
            删除变量
            </summary>
            <param name="name">变量名称</param>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.RegistFunction(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.String)">
            <summary>
            注册函数，调用MetaFly解析前需要运行的函数，用来注册类库函数
            </summary>
            <param name="externalAssemblySet">外置类库程序集名列表</param>
            <param name="funcDefaultVal">缺省值</param>
            <param name="buildInAssembly">内置类库程序集名</param>
            <returns>注册是否成功</returns>
        </member>
        <member name="F:MetaFly.Parse.ParseRunTimeInfo.disposedobjlist">
            <summary>
            保存在解析过程需主动释放资源的数据
            </summary>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.AddDisposedObj(System.IDisposable)">
            <summary>
            添加需主动释放资源的数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.Parse(MetaFly.Parse.ParseParamAgent,MetaFly.Datum.Element.TermItem,System.Collections.Generic.List{MetaFly.Parse.MemberInfo})">
            <summary>
            解析解释定义，返回解析结果
            </summary>
            <param name="paraminfo">解释定义</param>
            <param name="inputItem">输入数据</param>
            <param name="mbrlist">已解析作为输入的数据</param>
            <returns>解释结果</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.CreateParamAgent(MetaFly.Parse.ParseParamAgent@,MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            创建并验证ParseParamInfo对象
            </summary>
            <param name="paraminfo">创建的ParseParamInfo对象</param>
            <param name="xmldesc">解释定义</param>
            <param name="filename">解释定义文件名</param>
            <returns>验证正确返回success，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.VerifyParamAgent(MetaFly.Parse.ParseParamAgent,System.String)">
            <summary>
            验证ParseParamAgent对象
            </summary>
            <param name="paraminfo">创建的ParseParamInfo对象</param>
            <param name="name">请求创建ParseParamAgent对象的函数名称</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.VerifyParamAgent(MetaFly.Parse.ParseParamAgent,System.String,MetaFly.Parse.ParamInfo.style)">
            <summary>
            验证ParseParamAgent对象
            </summary>
            <param name="paraminfo">创建的ParseParamInfo对象</param>
            <param name="name">请求创建ParseParamAgent对象的函数名称</param>
            <param name="style">ParseParamAgent对象的解释类型</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.Create(MetaFly.Parse.ParseRunTimeInfo@,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            创建ParseRunTimeInfo对象
            新增加载外置程序集功能，加载外置程序集中继承自PrototypeFunc的类库函数
            </summary>
            <param name="rtinfo">返回创建的ParseRunTimeInfo对象</param>
            <param name="assemblySet">被加载的非MetaFly程序集名</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="M:MetaFly.Parse.ParseRunTimeInfo.Create(MetaFly.Parse.ParseRunTimeInfo@,System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            创建ParseRunTimeInfo对象
            新增加载外置程序集功能，加载外置程序集中继承自PrototypeFunc的类库函数
            </summary>
            <param name="rtinfo">返回创建的ParseRunTimeInfo对象</param>
            <param name="assemblySet">被加载的非MetaFly程序集名</param>
            <param name="funcDefaultVal">缺省值</param>
            <returns>成功返回sucess，否则返回fail</returns>
        </member>
        <member name="T:MetaFly.Serialization.CheckRange">
            <summary>
            属性范围检查，使用数学开闭区间定义或者空格定义枚举，例如："(1,10]"， "A B C"
            </summary>
        </member>
        <member name="M:MetaFly.Serialization.CheckRange.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="rangeDefine">范围定义</param>
            <param name="errorMsg">报错信息</param>
        </member>
        <member name="M:MetaFly.Serialization.CheckRange.GetErrorMsg(System.String)">
            <summary>
            获取错误信息
            </summary>
            <param name="value">被校验值</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Serialization.CheckRange.CheckInRange(System.String)">
            <summary>
            检查数据是否属于指定范围
            </summary>
            <param name="value">被检查数据</param>
            <returns>属于返回true，否则返回false</returns>
        </member>
        <member name="T:MetaFly.Serialization.DefaultValue">
            <summary>
            默认值设置特性
            </summary>
        </member>
        <member name="M:MetaFly.Serialization.DefaultValue.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="defaultValue">设置默认值</param>
        </member>
        <member name="T:MetaFly.Serialization.Chapter">
            <summary>
            ini文件章定义，{章节名}
            </summary>
        </member>
        <member name="T:MetaFly.Serialization.Section">
            <summary>
            ini文件节定义，[节名]
            </summary>
        </member>
        <member name="M:MetaFly.Serialization.Section.#ctor(System.String)">
            <summary>
            单Section定义方式
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:MetaFly.Serialization.Section.#ctor(System.String,System.Int32)">
            <summary>
            SectionArray定义方式
            </summary>
            <param name="sectionNameWithFormat"></param>
            <param name="initIndex"></param>
        </member>
        <member name="M:MetaFly.Serialization.Section.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            SectionArray定义方式
            Section("CON_{0}", 0, 3) -> [CON_000] 、 [CON_001]
            </summary>
            <param name="sectionNameWithFormat">带格式的节名</param>
            <param name="initIndex">初始下标</param>
            <param name="digit">下标占用位数</param>
        </member>
        <member name="P:MetaFly.Serialization.Section.SectionNameWithFormat">
            <summary>
            带格式的节名
            </summary>
        </member>
        <member name="P:MetaFly.Serialization.Section.InitIndex">
            <summary>
            初始下标
            </summary>
        </member>
        <member name="P:MetaFly.Serialization.Section.Digit">
            <summary>
            下标占用位数
            </summary>
        </member>
        <member name="T:MetaFly.Serialization.Parameter">
            <summary>
            ini文件参数，K=V
            </summary>
        </member>
        <member name="T:MetaFly.Serialization.Comment">
            <summary>
            ini文件注解，  ; 注解内容
            </summary>
        </member>
        <member name="T:MetaFly.Serialization.PropertyTaskAttribute">
            <summary>
            属性任务特性定义
            </summary>
        </member>
        <member name="T:MetaFly.Serialization.XmlAttribute">
            <summary>
            XML属性
            </summary>
        </member>
        <member name="T:MetaFly.Serialization.XmlElement">
            <summary>
            XML元素
            </summary>
        </member>
        <member name="M:MetaFly.Serialization.Common.PropertyTaskAttributeManager.GetDefultValue(MetaFly.Serialization.LoaderImp.MoldObject)">
            <summary>
            获取默认值,未定义DefaultValue时，默认值为null
            </summary>
            <param name="mold"></param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Serialization.FileType">
            <summary>
            文件格式类型定义
            </summary>
        </member>
        <member name="F:MetaFly.Serialization.FileType.INI">
            <summary>
            ini文件
            </summary>
        </member>
        <member name="F:MetaFly.Serialization.FileType.XML">
            <summary>
            xml文件
            </summary>
        </member>
        <member name="F:MetaFly.Serialization.FileType.BIN">
            <summary>
            二进制文件
            </summary>
        </member>
        <member name="F:MetaFly.Serialization.FileType.PAR">
            <summary>
            par文件
            </summary>
        </member>
        <member name="F:MetaFly.Serialization.FileType.NONE">
            <summary>
            未指定格式,以文件后缀为准
            </summary>
        </member>
        <member name="T:MetaFly.Serialization.FileLoader">
            <summary>
            文件映射加载器
            </summary>   
        </member>
        <member name="M:MetaFly.Serialization.FileLoader.Load``1(System.String)">
            <summary>
            加载path路径下文件到type的实例中，并返回
            </summary>
            <typeparam name="T">被加载文件类型</typeparam>       
            <param name="path">文件路径</param>
            <returns>type实例</returns>
        </member>
        <member name="M:MetaFly.Serialization.FileLoader.Load``1">
            <summary>
            加载SerializeFile特性修饰的Type
            </summary>
            <typeparam name="T">被加载文件类型</typeparam>        
            <returns>加载后的T实例</returns>
        </member>
        <member name="T:MetaFly.Serialization.SerializeFile">
            <summary>
            序列化文件特性定义
            </summary>
        </member>
        <member name="M:MetaFly.Serialization.SerializeFile.#ctor(System.String,MetaFly.Serialization.FileType,System.String)">
            <summary>
            创建序列化文件特性实例
            </summary>
            <param name="path">指定文件名</param>
            <param name="fileType">指定文件格式</param>
            <param name="format">指定ini文件输出格式</param>
        </member>
        <member name="T:MetaFly.Serialization.MappingFile">
            <summary>
            映射文件特性定义
            </summary>
        </member>
        <member name="M:MetaFly.Serialization.MappingFile.#ctor(System.String,MetaFly.Serialization.FileType,System.Boolean)">
            <summary>
            创建映射文件特性实例
            </summary>
            <param name="path">指定文件名</param>
            <param name="fileType">指定文件格式</param>
            <param name="ignoreComment">指定ini文件输出格式</param>
        </member>
        <member name="T:MetaFly.Summer.Generic.Compare`2">
            <summary>
            通用比较类
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="C"></typeparam>
        </member>
        <member name="M:MetaFly.Summer.Generic.Compare`2.#ctor(System.Func{`0,`1})">
            <summary>
            构造函数
            </summary>
            <param name="field">获取自定义字段的委托</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Compare`2.Equals(`0,`0)">
            <summary>
            比较规则
            </summary>
            <param name="x">比较的对象1</param>
            <param name="y">比较的对象2</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Compare`2.GetHashCode(`0)">
            <summary>
            实现IEqualityComparer接口，获取哈希值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.CommonCompareHelper">
            <summary>
            通用比较辅助类
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.CommonCompareHelper.SelfDistinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            <example>
            <code>list.SelfDistinct(s => s.Id).ToList()</code>
            </example>
            </summary>
            <typeparam name="T">要去重的对象类</typeparam>
            <typeparam name="C">自定义去重字段类型</typeparam>
            <param name="source">要去重的对象</param>
            <param name="field">获取自定义字段的委托</param>
            <returns>去重后的结果</returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.Comparer.ComparerHelper`1">
            <summary>
            ComparerHelper
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="M:MetaFly.Summer.Generic.Comparer.ComparerHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建比较器
            </summary>
            <typeparam name="V">字段筛选委托返回数据的泛型类型</typeparam>
            <param name="keySelector">字段筛选委托</param>
            <returns>比较器</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Comparer.ComparerHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            创建比较器
            </summary>
            <typeparam name="V">字段筛选委托返回数据的泛型类型</typeparam>
            <param name="keySelector">属性筛选委托</param>
            <param name="comparer">所筛选的属性指定的比较器</param>
            <returns>比较器</returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.Comparer.ComparerHelper`1.CommonEqualityComparer`1">
            <summary>
            通用比较器，实现IEqualityComparer泛型接口
            </summary>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:MetaFly.Summer.Generic.Comparer.ComparerHelper`1.CommonEqualityComparer`1.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            构造函数
            </summary>
            <param name="keySelector">字段筛选委托</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Comparer.ComparerHelper`1.CommonEqualityComparer`1.#ctor(System.Func{`0,`1})">
            <summary>
            构造函数
            </summary>
            <param name="keySelector">字段筛选委托</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Comparer.ComparerHelper`1.CommonEqualityComparer`1.Equals(`0,`0)">
            <summary>
            重写Equals
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Comparer.ComparerHelper`1.CommonEqualityComparer`1.GetHashCode(`0)">
            <summary>
            重写GetHashCode
            </summary>
            <param name="obj">当前对象</param>
            <returns>哈希值</returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.ListComparer">
            <summary>
            List的比较器
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.ListComparer.Equals(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            确定指定的List对象是否相等
            </summary>
            <param name="x">要比较的第一个类型为List的对象</param>
            <param name="y">要比较的第二个类型为List的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ListComparer.GetHashCode(System.Collections.Generic.List{System.Int64})">
            <summary>
            返回指定对象的哈希代码
            </summary>
            <param name="obj">List对象</param>
            <returns>指定对象的哈希代码</returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.CRC32_Table">
            <summary>
            供CC使用
            </summary>
        </member>
        <member name="T:MetaFly.Summer.Generic.CRC32">
            <summary>
            供CC使用,校验多项式为 0x1100D4E63
            </summary>
        </member>
        <member name="T:MetaFly.Summer.Generic.CRCFor32">
            <summary>
            通用32位CRC
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.CRCFor32.#ctor(System.UInt32,System.UInt32)">
            <summary>
            构造函数
            </summary>
            <param name="poly">多项式</param>
            <param name="initialValue">初始值</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.CRCFor32.ComputeChecksum(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            计算32位CRC
            </summary>
            <param name="data">输入数据</param>
            <returns>uint型CRC值</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.CRCFor32.ComputeChecksumBytes(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            CRC的比特输出
            </summary>
            <param name="data">数据</param>      
            <returns>byte数组型CRC值</returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.CRCFor16">
            <summary>
            通用16位CRC
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.CRCFor16.#ctor(System.UInt16,MetaFly.Summer.Generic.CRCFor16.InitialCrcValue)">
            <summary>
            构造函数
            </summary>        
            <param name="poly">多项式</param>
            <param name="initialValue">初始值类型</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.CRCFor16.ComputeChecksum(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            计算16位的CRC
            </summary>
            <param name="data">数据</param>
            <returns>ushort型CRC值</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.CRCFor16.ComputeChecksumBytes(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            计算16位的CRC
            </summary>
            <param name="data">数据</param>
            <returns>byte[]型CRC值</returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.EncodingType">
            <summary>
            获取文本的编码格式
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.EncodingType.GetType(System.String)">
            <summary>
            给定文件的路径，读取文件的二进制数据，判断文件的编码类型
            </summary>
            <param name="FILE_NAME">文件路径</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.EncodingType.GetType(System.IO.FileStream)">
            <summary>
            通过给定的文件流，判断文件的编码类型
            </summary>
            <param name="fs">文件流</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.EncodingType.IsUTF8Bytes(System.Byte[])">
            <summary>
            判断是否是不带 BOM 的 UTF8 格式
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.ExtensionHelper">
            <summary>
            扩展方法工具类
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.RefurbishedValue``1(System.Lazy{``0})">
            <summary>
            仅用于PrototypeFunc子类中，非单例模式刷新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.WordCount(System.String,System.Char[])">
            <summary>
            根据分隔符,分隔字符串，返回分隔后字符串的个数
            </summary>
            <param name="source">字符串</param>
            <param name="separator">分隔符</param>
            <returns>分隔后个数</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.StringTo``1(System.String)">
            <summary>
            string转换为值类型
            T属于集合：{short, UInt16, int, UInt32, long, UInt64, double, float, byte, Byte, bool}
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.AllIn``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断source集合中的元素是否都存在于compare集合中
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="source">源集合</param>
            <param name="compare">比较结合</param>
            <returns>是则返回True，否则返回False</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            尝试向dict中添加键值对，若key不存在则添加
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">当前字典</param>
            <param name="key">键名</param>
            <param name="value">值</param>
            <returns>当前字典</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.AddOrReplace``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            向dict中添加或者替换键值对，若键已经存在则替换该键值对
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">当前字典</param>
            <param name="key">键名</param>
            <param name="value">值</param>
            <returns>当前字典</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            从字典中获取指定键值，若键不存在，则返回值类型默认值
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">当前字典</param>
            <param name="key">键值</param>
            <param name="defaultValue">键缺失时，返回值；默认返回值类型default值</param>
            <returns>键对应值</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.AddRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean)">
            <summary>
            字典批量添加键值对
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">当前字典</param>
            <param name="keyValuePairs">被添加键值对集合</param>
            <param name="isRepalceExist">替换控制标识，为true时，替换当前字典中的同键名的值</param>
            <returns>当前字典</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.DeepCopy``1(``0)">
            <summary>
            深拷贝
            </summary>
            <param name="obj">当前拷贝数据对象</param>
            <returns>拷贝结果</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.IEnumerableToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            返回表示当前 IEnumerable 的 System.String。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="source">当前IEnumerable对象</param>
            <param name="separator">分隔符,可空，空时不插入分隔符</param>
            <returns>IEnumerable 的 System.String</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.IEnumerableToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回表示当前 IEnumerable 的 System.String。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="source">当前IEnumerable对象</param>
            <returns>IEnumerable 的 System.String</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ExtensionHelper.EnqueueAll``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将集合顺次添加到队列末尾
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="source">当前队列</param>
            <param name="collection">添加集合</param>
        </member>
        <member name="T:MetaFly.Summer.Generic.Loger">
            <summary>
            日志,单例模式使用
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.Loger.#ctor(System.Boolean)">
            <summary>
            创建默认路径Loger实例
            </summary>
            <param name="clearHistory">是否清空之前日志</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Loger.#ctor(System.String,System.Boolean)">
            <summary>
            创建Loger实例
            </summary>
            <param name="logFilePath">日志输出路径</param>
            <param name="clearHistory">是否清空之前日志</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Loger.LogInfo(MetaFly.Summer.Generic.LogLevel,System.String)">
            <summary>
            日志输出
            </summary>
            <param name="logLevel">日志等级</param>
            <param name="info">日志信息</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Loger.LogError(System.String,System.String)">
            <summary>
            错误日志输出
            </summary>
            <param name="errorCode">错误代码</param>
            <param name="info">日志信息</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Loger.LogErrorWithHaltException(System.String,System.String)">
            <summary>
            错误日志输出
            </summary>
            <param name="errorCode">错误代码</param>
            <param name="info">日志信息</param>
        </member>
        <member name="T:MetaFly.Summer.Generic.LogLevel">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="F:MetaFly.Summer.Generic.LogLevel.Debug">
            <summary>
            调试信息
            </summary>
        </member>
        <member name="F:MetaFly.Summer.Generic.LogLevel.Info">
            <summary>
            普通信息
            </summary>
        </member>
        <member name="F:MetaFly.Summer.Generic.LogLevel.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:MetaFly.Summer.Generic.LogLevel.Warning">
            <summary>
            警告信息
            </summary>
        </member>
        <member name="F:MetaFly.Summer.Generic.LogLevel.XPDInfo">
            <summary>
            前端日志专用
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.TraceMethod.RecordInfo(System.String,System.Object[])">
            <summary>
            日志输出调用接口1,仅输出到HMI和FILE
            </summary>
            <param name="info">日志格式</param>
            <param name="oo">装填参数</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.TraceMethod.Record(MetaFly.Summer.Generic.TraceMethod.TraceKind,System.String,MetaFly.Summer.Generic.TraceMethod.TraceType[])">
            <summary>
            日志输出调用接口2，可选输出类型
            </summary>
            <param name="kind">日志类型</param>
            <param name="info">日志信息</param>
            <param name="typeList">输出类型</param>
            <returns>输出类型计数</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.TraceMethod.SetLogTraceFileProperties(System.Boolean,System.String,System.String)">
            <summary>
            设置TraceToFile类的静态属性，包括是否是单log文件输出、默认log生成目录和项目名
            </summary>
            <param name="bSameLogFile"></param>
            <param name="startPath"></param>
            <param name="projectName"></param>
        </member>
        <member name="M:MetaFly.Summer.Generic.TraceMethod.SetHMITraceTextBox(MetaFly.Summer.Generic.TraceMethod.TraceKind,System.Windows.Forms.ListBox)">
            绑定信息输出框口至指定的界面控件
        </member>
        <member name="M:MetaFly.Summer.Generic.TraceMethod.TraceInstance(MetaFly.Summer.Generic.TraceMethod.TraceKind,MetaFly.Summer.Generic.TraceMethod.TraceType)">
            获取指定控件实例，若不存在，则新建
        </member>
        <member name="M:MetaFly.Summer.Generic.TraceMethod.GetTraceInstance(MetaFly.Summer.Generic.TraceMethod.TraceKind,MetaFly.Summer.Generic.TraceMethod.TraceType)">
            获取指定控件实例
        </member>
        <member name="M:MetaFly.Summer.Generic.TraceMethod.NewTraceInstance(MetaFly.Summer.Generic.TraceMethod.TraceKind,MetaFly.Summer.Generic.TraceMethod.TraceType)">
            新建控件实例
        </member>
        <member name="M:MetaFly.Summer.Generic.TraceMethod.GetTraceKey(MetaFly.Summer.Generic.TraceMethod.TraceKind,MetaFly.Summer.Generic.TraceMethod.TraceType)">
            获取各个追踪方法的标识       
        </member>
        <member name="P:MetaFly.Summer.Generic.TraceToFile.startPath">
            <summary>
            log存放目录未指定时，默认的存放目录
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.TraceToFile.GetDirctoryName(MetaFly.Summer.Generic.TraceMethod.TraceKind)">
            <summary>
            获取指定信息类型日志存放的目录
            </summary>
            <param name="kind">信息类型</param>
            <returns>日志存放的目录</returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.MD5Builder">
            <summary>
            MD5值的计算和比较相关类
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.MD5Builder.GetFileMD5Code(System.String)">
            <summary>
            获取文件MD5值
            </summary>
            <param name="filename">文件全路径</param>
            <returns>成功，则返回MD5值的16进制字符串形式输出，失败则返回空</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.MD5Builder.GetMD5Code(System.IO.Stream)">
            <summary>
            计算输入流的MD5值
            </summary>
            <param name="input">输入流</param>
            <returns>MD5值的16进制字符串形式输出</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.MD5Builder.GetMD5Code(System.Byte[])">
            <summary>
            计算比特数组的MD5值
            </summary>
            <param name="input">比特数组</param>
            <returns>MD5值的16进制字符串形式输出</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.MD5Builder.VerifyMD5Code(System.IO.Stream,System.String)">
            <summary>
            比较输入流的MD5值是否于指定MD5值相等
            </summary>
            <param name="input">输入流</param>
            <param name="md5code">指定MD5值</param>
            <returns>是否相等</returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.MD5CodeFile">
            <summary>
            批量验证MD5值，被验证的文件须遵守：文件名：文件MD5值，的格式。
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.MD5CodeFile.#ctor">
            <summary>
            初始化构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.MD5CodeFile.Load(System.String)">
            <summary>
            加载批量MD5文件
            </summary>
            <param name="md5FileName">MD5文件名</param>
            <returns>加载是否成功</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.MD5CodeFile.Verify(System.String,System.String)">
            <summary>
            批量验证
            </summary>
            <param name="inputpath">被验证文件的全路径</param>
            <param name="md5FileName">MD5文件全路径</param>
            <returns>验证是否成功</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.MD5CodeFile.AddMD5Code(System.String,System.String)">
            <summary>
            添加MD5值
            </summary>
            <param name="filename">文件名</param>
            <param name="md5code">文件MD5值</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.MD5CodeFile.Save(System.String)">
            <summary>
            MD5值序列化
            </summary>
            <param name="filename">输出文件名</param>
        </member>
        <member name="T:MetaFly.Summer.Generic.ReadHelper">
            <summary>
            文本迭代读取辅助类
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.ReadHelper.ReadLines(System.String)">
            <summary>
            文本行的迭代器，遍历文本中每一行
            </summary>
            <param name="fileName">文件名</param>
            <returns>当前读取行</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ReadHelper.LoadTxtToDictionary(System.String,System.Func{System.String,System.String[]})">
            <summary>
            按照行的分离条件加载文本到字典。
            仅加载分离器分离结果是两项的结果到字典
            </summary>
            <param name="fileName">文件名</param>
            <param name="splitor">行分离器</param>
            <returns>装载字典</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ReadHelper.ReadLines(System.String,System.Boolean,System.Func{System.String,System.Boolean})">
            <summary>
             基于谓词筛选行
             可选模式：pass，满足谓词条件行跳过。select， 满足谓词条件选择
            <code>
            foreach(string str in ReadHelper.ReadLines("test.txt", false, s => s.Contains("God")))
            {
               ShowInfo(str);
            }
            </code>
            </summary>
            <param name="fileName">文件名</param>
            <param name="passOrSelect">true为pass，false为select</param>
            <param name="predicate"> 用于测试文本中每行是否满足条件的函数</param>
            <returns>当前读取的满足条件的行</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ReadHelper.ReadLines(System.String,System.Text.Encoding,System.Boolean,System.Func{System.String,System.Boolean})">
            <summary>
            返回特定编码格式且经过谓词处理的文本迭代器
            </summary>
            <param name="fileName">文件路径</param>
            <param name="encoding">编码方式</param>
            <param name="passOrSelect">true为pass，false为select</param>
            <param name="predicate">谓词</param>
            <returns>当前读取的满足条件的行</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ReadHelper.ReadLines(System.String,System.Text.Encoding)">
            <summary>
            返回指定编码格式的文本读取迭代器
            </summary>
            <param name="fileName">文件名</param>
            <param name="encoding">编码格式</param>
            <returns>行</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ReadHelper.ReadLines(System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String})">
            <summary>
            基于谓词筛选行，并对筛选行进行操作
            <code>foreach(string str in ReadHelper.ReadLines("test.txt", s => s.Contains("w"), line => line.Replace('w','_')))</code>
            </summary>
            <param name="fileName">文件名</param>
            <param name="predicate">用于测试文本中每行是否满足条件的函数</param>
            <param name="oper">满足条件行操作函数</param>
            <returns>处理后的行</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ReadHelper.ReadLines(System.String,System.Text.Encoding,System.Func{System.String,System.Boolean},System.Func{System.String,System.String})">
            <summary>
            基于谓词筛选行，并对筛选行进行操作,未选中行直接返回
            </summary>
            <param name="fileName">文件名</param>
            <param name="encoding">编码格式</param>
            <param name="predicate">用于测试文本中每行是否满足条件的函数</param>
            <param name="oper">满足条件行操作函数</param>
            <returns>处理后的行</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.ReadHelper.ReadLines(System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            基于谓词筛选行，并对筛选行进行操作，筛选前作终止条件判断
            <code>foreach(string str in ReadHelper.ReadLines("test.txt", s => s.Contains("w"), line => line.Replace('w','_'), end => end.Contains("oo")))</code>
            </summary>
            <param name="fileName"></param>
            <param name="predicate">用于测试文本中每行是否满足条件的函数</param>
            <param name="oper">满足条件行操作函数</param>
            <param name="ender">迭代终止条件函数</param>
            <returns>当前迭代结果行</returns>
        </member>
        <member name="T:MetaFly.Summer.Generic.XsdVerify">
            <summary>
            XSD的单值验证，仅验证XML与XSD的单一匹配关系
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.XsdVerify.Verify(System.String,System.String)">
            <summary>
            验证XML文件是否遵守XSD规范
            </summary>
            <param name="xmlfilename">XML文件的URI</param>
            <param name="xsdfilename">XSD文件的URI</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.XsdVerify.VerifyWithXml(System.String,System.String)">
            <summary>
            验证指定目录下的XML是否遵守同名同目录的XSD规范
            </summary>
            <param name="inputpath">XML文件所在文件夹全路径</param>
            <param name="xmlfilename">XML文件名</param>
        </member>
        <member name="T:MetaFly.Summer.Generic.XsdVerifyFile">
            <summary>
            批量验证XSD。XSD文件需要遵守：XSD文件名：遵守XSD规则的XML文件名1，遵守XSD规则的XML文件名2,...，的书写规范
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.XsdVerifyFile.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.XsdVerifyFile.Load(System.String)">
            <summary>
            加载XSD批量文件
            </summary>
            <param name="xsdVerifyFileName">保存XSD和XML对应关系的文件名</param>
            <returns>加载是否成功</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Summer.Generic.XsdVerifyFile.Verify(System.String,System.String)" -->
        <member name="T:MetaFly.Summer.Generic.Generic">
            <summary>
            通用工具类，提供报错中断、控制台显示、文件拷贝等
            </summary>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.GetSystemEndian">
            <summary>
            获取当前系统大小端信息
            </summary>
            <returns>大端，返回True；小端，返回False</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.ShowError(System.String)">
            <summary>
            在控制台上打印错误信息，在用户按任意键后退出整个软件运行，退出码-1
            </summary>
            <param name="error">错误信息</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.ShowErrorAndStackTrace(System.String)">
            <summary>
            控制台输出错误信息，同时输出出错函数调用堆栈
            </summary>
            <param name="error">错误信息</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.ShowInfo(System.String,System.Boolean)">
            <summary>
            控制台显示
            </summary>
            <param name="info">显示信息</param>
            <param name="existConsole">选择是否直接退出控制台</param>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.GetXmlNodeByName(MetaFly.Summer.IO.XmlVisitor,System.String)">
            <summary>
            根据属性name查找XML数据
            </summary>
            <param name="xmlterm">xml数据</param>
            <param name="name">名称</param>
            <returns>xml数据</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.GetUniqueNum``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取list中非重复项的个数
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">输入列表</param>
            <returns>list去重后的个数</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.CopyFiles(System.String,System.String)">
            <summary>
            文件夹深拷贝，拷贝当前及其子文件夹
            </summary>
            <param name="resoucepath">源文件夹路径</param>
            <param name="destpath">目的文件夹路径</param>
            <returns>拷贝是否成功</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.AppendFile(System.String,System.String)">
            <summary>
            将infilename文件内容以二进制方式追加到outfilename文件的末尾
            </summary>
            <param name="infilename">被拷贝对象</param>
            <param name="outfilename">拷贝到对象</param>
            <returns>是否成功拷贝</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.GetFileNameViaTrainType(System.String,System.Int64)">
            <summary>
            根据文件名原型和列车类型返回相应的文件名
            比如文件名原型是XXX.YYY,列车类型是W
            返回的文件名则是XXX_W.YYY
            </summary>
            <param name="filename">文件名原型</param>
            <param name="traintypeid">列车类型</param>
            <returns>根据列车类型生成的新文件名</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.GetOutType(System.String)">
            <summary>
            返回输出模式，
            1(text)：只输出文本
            2(binary)：只输出二进制
            3(allformats)：输出文本和二进制
            </summary>
            <param name="outtype">输出模式文本(text、binary、allformats)</param>
            <returns>根据输出模式相应返回1，2，3，其他则返回0</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.DeepCopyWithReflection``1(``0)">
            <summary>
            基于反射的深拷贝
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="obj">拷贝对象</param>
            <returns>拷贝结果</returns>
        </member>
        <member name="M:MetaFly.Summer.Generic.Generic.LongToBytes(System.Int64,System.Int64,System.Boolean)">
            <summary>
            将Long数据根据大小端转化为byte数组
            </summary>
            <param name="data">被转化数据</param>
            <param name="length">数组长度</param>
            <param name="isBigEndian">大小端，大端true，小端false</param>
            <returns>转换结果</returns>
        </member>
        <member name="F:MetaFly.Summer.IO.BinFileHelper.mReader">
            <summary>
            二进制输入Reader
            </summary>
        </member>
        <member name="F:MetaFly.Summer.IO.BinFileHelper.sReader">
            <summary>
            二进制配置模板文件Reader
            </summary>
        </member>
        <member name="F:MetaFly.Summer.IO.BinFileHelper.valueDic">
            <summary>
            根据模板从二进制中读取的数据
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.BinFileHelper.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            构造函数，检查文件是否存在，实例化MetaReader
            </summary>
            <param name="configPath">配置文件URL</param>
            <param name="binPath">二进制输入文件URL</param>
            <param name="bigendian">是否是大端读取，大端设置为true，反之设置false</param>
        </member>
        <member name="T:MetaFly.Summer.IO.CSVFileHelper">
            <summary>
            XML解析处理类，含对XML文件和XML字符串的解析和操作。
            通过此类载入xml数据，得到root节点后，就可以通过操作XmlVisitor对象来操作所有的节点。
            此类包含的操作有：
            （1）静态初始化方法：
            CreateFromFile——从文件创建；
            CreateFromList——从二维数组创建；
            （2）读取函数：
            ReadAll——返回所有数据；
            GetRowsCount——得到总行数；
            GetColsCount——得到指定行的列数；
            GetMaxColsCount——得到最大的列数；
            ReadRow——返回某行数据；
            ReadCol——返回某列数据；
            ReadCell——返回某个单元格的数据；
            （3）新增操作：
            Insert——在指定行号插入数据；
            Append——在最后一行追加数据；
            （4）删除操作：
            RemoveAll——移除所有数据；
            RemoveRow——移除某一行；
            RemoveCol——移除某一列；
            （5）修改操作：
            Update——修改某个单元格数据；
            （6）保存操作：
            Save2File——保存到文件；
            </summary>
            <remark>
            公司：CASCO
            作者：张广宇
            创建日期：2013-4-8
            </remark>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.CreateFromFile(System.String,System.Text.Encoding,System.Char,System.Boolean)">
            <summary>
            从文件创建CSV对象实例，注意默认数据的增删改只对内存操作，如果需要保存，最后需要手动调用save函数，或者将sync2File打开，但是效率不高，请调用者自己权衡。
            </summary>
            <param name="fileName">文件名，此文件必须存在</param>
            <param name="encoding">编码格式，默认可以使用 Encoding.Default</param>
            <param name="breakSymbol">分隔符，默认使用英文逗号</param>
            <param name="sync2File">是否将更改实时同步到文件中，默认关闭。</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.CreateFromList(System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            从一个二维数组创建一个csv格式数据
            </summary>
            <param name="datalist"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.ReadAll">
            <summary>
            返回CSV的所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.GetRowsCount">
            <summary>
            返回总行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.GetMaxColsCount">
            <summary>
            返回最大的列数（每一行列数可能不同）
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.GetColsCount(System.Int32)">
            <summary>
            返回指定行的列数；
            </summary>
            <param name="rowNum"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.ReadRow(System.Int32)">
            <summary>
            读取某一行，行号从0开始计数，最后一行为GetRowsCount()-1
            </summary>
            <param name="rowNum"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.ReadCol(System.Int32)">
            <summary>
            读取某一列数据，列号从0开始计数，最后一列为GetColsCount()-1.
            由于每行列数不同，因此如果某行没有此列，则插入null，以此标识。
            </summary>
            <param name="colNum"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.ReadCell(System.Int32,System.Int32)">
            <summary>
            读取某个单元格的数据，行号、列号均从0开始计数
            </summary>
            <param name="rowNum"></param>
            <param name="colNum"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.Insert(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            在当前行号上插入一条记录，行号从0开始计数
            </summary>
            <param name="rowNum"></param>
            <param name="rowData"></param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.Append(System.Collections.Generic.List{System.String})">
            <summary>
            在最后追加一行数据
            </summary>
            <param name="rowData"></param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.UpdateCell(System.Int32,System.Int32,System.String)">
            <summary>
            更新某个单元格的值，行号、列号从0开始计数
            </summary>
            <param name="rowNum"></param>
            <param name="colNum"></param>
            <param name="value"></param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.RemoveAll">
            <summary>
            删除所有数据
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.RemoveRow(System.Int32)">
            <summary>
            移除某一行，行号从0开始计数
            </summary>
            <param name="rowNum"></param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.ReomveCol(System.Int32)">
            <summary>
            移除某一列，列号从0开始计数
            </summary>
            <param name="colNum"></param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.Save2File(System.Int32)">
            <summary>
            保存到文件（对于从文件创建实例的有效）
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.Save2File(System.String,System.Text.Encoding,System.Char,System.Int32)">
            <summary>
            将数据另存为，如果文件已经存在，则覆盖。
            </summary>
            <param name="fileName"></param>
            <param name="encoding"></param>
            <param name="breakSymbol"></param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSVFileHelper.Load">
            <summary>
            从文件读取数据
            </summary>
        </member>
        <member name="T:MetaFly.Summer.IO.CSV.CsvFileInfo">
            <summary>
            CSV文件信息类,保存CSV基本文件信息
            </summary>
            <remark>
            公司：CASCO
            作者：张广宇
            创建日期：2013-4-8
            </remark>
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileInfo.BreakSymbol">
            <summary>
            通常数据间隔字符 缺省为','
            </summary>
        </member>
        <member name="T:MetaFly.Summer.IO.CSV.CsvFileReader">
            <summary>
            读CSV文件类,读取指定的CSV文件
            </summary>
            <remark>
            公司：CASCO
            作者：张广宇
            创建日期：2013-4-8
            </remark>
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileReader.rowAL">
            <summary>
            行链表,CSV文件的每一行就是一个链
            </summary>
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileReader.fileName">
            <summary>
            csv文件名
            </summary>
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileReader.encoding">
            <summary>
            文件编码
            </summary>
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileReader.breakSymbol">
            <summary>
            数据间隔字符
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.#ctor">
            <summary>
            缺省读取CSV文件类构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.#ctor(System.String)">
            <summary>
            读取CSV文件类构造函数
            </summary>
            <param name="fileName">文件名,包括文件路径</param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            读取CSV文件类构造函数2
            </summary>
            <param name="fileName">文件名,包括文件路径</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.#ctor(System.String,System.Text.Encoding,System.Char,System.Func{System.String,System.Boolean})">
            <summary>
            读取CSV文件类构造函数3
            </summary>
            <param name="fileName">文件名,包括文件路径</param>
            <param name="encoding">文件编码</param>
            <param name="breakSymbol">数据间隔字符</param>
            <param name="passRule">读取csv文件时的行跳过规则，缺省时为不跳过行</param>
        </member>
        <member name="P:MetaFly.Summer.IO.CSV.CsvFileReader.RowCount">
            <summary>
            获取行数
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.CSV.CsvFileReader.ColCount">
            <summary>
            获取列数
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.CSV.CsvFileReader.Item(System.Int32,System.Int32)">
            <summary>
            获取某行某列的数据
            row:行,row = 1代表第一行
            col:列,col = 1代表第一列  
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.GetData(System.Int32,System.Int32)">
            <summary>
            获取从某行起多行数据
            </summary>
            <param name="row">起始行号</param>  
            <param name="rowcount">行数</param>  
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.CheckRowValid(System.Int32)">
            <summary>
            检查行数是否是有效的
            </summary>
            <param name="col"></param>  
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.CheckColValid(System.Int32)">
            <summary>
            检查列数是否是有效的
            </summary>
            <param name="col"></param>  
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileReader.defaultPassRule">
            <summary>
            csv文件读取行读取默认规则
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.LoadCsvFile(System.Func{System.String,System.Boolean})">
            <summary>
            载入CSV文件
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.GetDeleteQuotaDataLine(System.String)">
            <summary>
            获取两个连续引号变成单个引号的数据行
            </summary>
            <param name="fileDataLine">文件数据行</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.AddNewDataLine(System.String)">
            <summary>
            加入新的数据行
            </summary>
            <param name="newDataLine">新的数据行</param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileReader.GetHandleData(System.String)">
            <summary>
            去掉格子的首尾引号，把双引号变成单引号
            </summary>
            <param name="fileCellData"></param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Summer.IO.CSV.CsvFileWriter">
            <summary>
            写CSV文件类,首先给CSV文件赋值,最后通过Save方法进行保存操作
            </summary>
            <remark>
            公司：CASCO
            作者：张广宇
            创建日期：2013-4-8
            </remark>
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileWriter.rowAL">
            <summary>
            行链表,CSV文件的每一行就是一个链
            </summary>
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileWriter.fileName">
            <summary>
            CSV文件名
            </summary>
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileWriter.encoding">
            <summary>
            文件编码
            </summary>
        </member>
        <member name="F:MetaFly.Summer.IO.CSV.CsvFileWriter.breakSymbol">
            <summary>
            数据间隔字符
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.#ctor">
            <summary>
            缺省写入CSV文件类构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.#ctor(System.String)">
            <summary>
            写入CSV文件类构造函数1
            </summary>
            <param name="fileName">文件名,包括文件路径</param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            写入CSV文件类构造函数2
            </summary>
            <param name="fileName">文件名,包括文件路径</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.#ctor(System.String,System.Text.Encoding,System.Char)">
            <summary>
            写入CSV文件类构造函数3
            </summary>
            <param name="fileName">文件名,包括文件路径</param>
            <param name="encoding">文件编码</param>
            <param name="breakSymbol">数据间隔字符</param>
        </member>
        <member name="P:MetaFly.Summer.IO.CSV.CsvFileWriter.Item(System.Int32,System.Int32)">
            <summary>
            row:行,row = 1代表第一行
            col:列,col = 1代表第一列
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.CSV.CsvFileWriter.CurMaxRow">
            <summary>
            获取当前最大行
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.CSV.CsvFileWriter.CurMaxCol">
            <summary>
            获取最大列
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.AddData(System.Collections.Generic.List{System.String})">
            <summary>
            添加表数据到CSV文件中
            </summary>
            <param name="dataList">表数据</param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.AddData(System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            添加表数据到CSV文件中
            </summary>
            <param name="dataList">表数据</param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.Save">
            <summary>
            保存数据,如果当前硬盘中已经存在文件名一样的文件，将会覆盖
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.Save2">
            <summary>
            保存数据,如果当前硬盘中已经存在文件名一样的文件，将会覆盖
            最后一行不添加空行
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.Save(System.String)">
            <summary>
            保存数据,如果当前硬盘中已经存在文件名一样的文件，将会覆盖
            </summary>
            <param name="fileName">文件名,包括文件路径</param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.Save(System.String,System.Text.Encoding)">
            <summary>
            保存数据,如果当前硬盘中已经存在文件名一样的文件，将会覆盖
            </summary>
            <param name="fileName">文件名,包括文件路径</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.ConvertToSaveLine(System.Collections.ArrayList)">
            <summary>
            转换成保存行
            </summary>
            <param name="colAL">一行</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.ConvertToSaveCell(System.String)">
            <summary>
            字符串转换成CSV中的格子
            双引号转换成两个双引号
            </summary>
            <param name="cell">格子内容</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.CSV.CsvFileWriter.isNeedAuotation(System.String)">
            <summary>
            判断是否需要首尾各加一个双引号        
            </summary>
            <param name="cell">格子内容</param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Summer.IO.IniFileHelper">
            <summary>
            INI文件读写类。
            INI首层为段，各个段内包含键值对。
            此类包含的操作有：
            （1）创建实例
            CreateFromFile——从ini文件创建实例；
            （2）写键值
            WriteValue——如果不存在键，则新建；如果存在，则更新；
            （3）读section列表
            ReadAllSectionNames——获得所有section；
            （4）读值
            ReadKeyValues——获得某个section下所有的键值组合；
            ReadStringValue——读取某个section某个key的字符串值；
            ReadBytesValue——读取某个section某个key的字节值；
            （5）删除
            RemoveAllSection——删除所有段落；
            RemoveSection——删除某个section；
            </summary>
            <remark>
            思路：调用WritePrivateProfileString和GetPrivateProfileString处理INI文件
            公司：CASCO
            作者：张广宇
            创建日期：2013-4-8
            </remark>
        </member>
        <member name="P:MetaFly.Summer.IO.IniFileHelper.filepath">
            <summary>
            INI 文件绝对路径
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.IniFileHelper.IniEntry">
            <summary>
            ini输入文件的EntryData属性
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">ini文件路径</param>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.WriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件
            </summary>
            <param name="section">Section名称</param>
            <param name="key">Key名称</param>
            <param name="value">Value字符串</param>
            <returns>true：执行成功，false：执行失败</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.ReadAllSectionNames">
            <summary>
            读取一个ini里面所有的节
            </summary>
            <param name="sections"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.ReadKeyValues(System.String)">
            <summary>
            得到某个节点下面所有的key和value组合
            </summary>
            <param name="section"></param>
            <param name="keys"></param>
            <param name="values"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.ReadStringValue(System.String,System.String)">
            <summary>
            读取某个字符串键值（注意，字符串长度最大255个字符）
            </summary>
            <param name="section">Section名称</param>
            <param name="key">Key名称</param>
            <returns>Value字符串</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.ReadBytesValue(System.String,System.String)">
            <summary>
            读取byte数组键值（注意，最大255个字节）
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.RemoveAllSection">
            <summary>
            删除INI文件下所有段落
            </summary>
            <returns>true：执行成功，false：执行失败</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.RemoveSection(System.String)">
            <summary>
            删除ini文件下指定段落下的所有键
            </summary>
            <param name="section">Section名称</param>
            <returns>true：执行成功，false：执行失败</returns>
        </member>
        <member name="F:MetaFly.Summer.IO.IniFileHelper.inifile">
            <summary>
            数据存储字典
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.IniFileHelper.CreateFromFile(System.String)">
            <summary>
            创建根据文件路径读取文件内容，并创建INIFileHelper对象
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Summer.IO.INIReader">
            <summary>
            INI文件读取类
            逐行读取
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.INIReader.ContentCount">
            <summary>
            读取内容的行数，忽略空行和以##开头的注释行
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.INIReader.ReadRow(System.Int32)">
            <summary>
            读取指定下标的行
            </summary>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.INIReader.Read">
            <summary>
            读取Ini文件的行
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.INIReader.#ctor(System.String)">
            <summary>
            INI文件具体读取函数，逐行读取，忽略空行和以##开头的注释行
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:MetaFly.Summer.IO.INIReader.CreatFromINI(System.String)">
            <summary>
            INI读取函数，过滤文件路径，如果路径为空或不存在抛出异常
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.ParFileHelper.CreatFromFile(System.String,System.String,System.Int32,System.Char)">
            <summary>
            ParFileHelper工厂方法
            </summary>
            <param name="path">par文件路径</param>
            <param name="parDefineFile">par定义XML文件路径</param>
            <param name="chainNum">默认为2链</param>
            <param name="parSplitor">par文件分割符，par定义文件中表列名分割符与此保持一致</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.Tools.GetPath.#ctor(System.String)">
            <summary>
            单例模式下的私有构造函数
            </summary>
            <param name="filepath">所读取xml文件的路径</param>
        </member>
        <member name="M:MetaFly.Summer.IO.Tools.GetPath.GetInstance(System.String)">
            <summary>
            实例化GetPath的接口
            </summary>
            <param name="filepath">所读取xml文件的路径</param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Summer.IO.XmlFileHelper">
            <summary>
            XML解析处理类，含对XML文件和XML字符串的解析和操作。
            通过此类载入xml数据，得到root节点后，就可以通过操作XmlVisitor对象来操作所有的节点。
            此类包含的操作有：
            （1）静态初始化方法：
            CreateFromFile——从文件创建；
            CreateFromString——从xml字符串创建；
            CreateFromXmlHelper——克隆方式创建；
            （2）Root节点操作：
            SetRoot——设置根节点；
            GetRoot——得到根节点；
            （3）Declaration操作：
            SetDeclaration——设置；
            GetDeclaration——获取；
            （4）Comments操作：
            GetAllComments——获取所有注释；
            InsertFirstComment——在最前面插入一条注释；
            AppendCommnet——在最后面追加一条注释；
            （5）保存操作：
            Save2File——将xml文档保存到文件中去；
            </summary>
            <remark>
            公司：CASCO
            作者：张广宇
            创建日期：2013-4-8
            </remark>
        </member>
        <member name="F:MetaFly.Summer.IO.XmlFileHelper.docXML">
            <summary>
            使用XDocument保存XML数据
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            参数为XDocument的构造函数
            </summary>
            <param name="xDoc">XDocument参数</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.CreateFromFile(System.String,System.Boolean)">
            <summary>
            根据文件创建XML解析类对象
            函数可能抛出以下异常及其他异常：
            文件不存在：throw FileNotFoundException
            格式错误：throw FormatException
            </summary>
            <param name="fileName">文件名含绝对路径</param>
            <param name="checkXmlNameSpace">为True时，检查是否存在XML命名空间，存在则删除</param>
            <returns>返回XmlParse对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.CreateFromFile(System.String)">
            <summary>
            根据文件创建XML解析类对象
            函数可能抛出以下异常及其他异常：
            文件不存在：throw FileNotFoundException
            格式错误：throw FormatException
            </summary>
            <param name="fileName">文件名含绝对路径</param>
            <returns>返回XmlParse对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.XmlOutofxmlns(System.String)">
            <summary>
            去掉xmlns属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.CreateFromString(System.String)">
            <summary>
            根据字符串创建XML解析类对象,字符串为空则创建内容为空的XML解析类对象
            函数可能抛出以下异常及其他异常：
            格式错误：throw FormatException
            </summary>
            <param name="xmldata">XML数据字符串</param>
            <returns>返回XmlParse对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.CreateFromXmlHelper(MetaFly.Summer.IO.XmlFileHelper)">
            <summary>
            根据根据已知XML解析对象对象复制创建新对象
            函数可能抛出以下异常及其他异常：
            字符串为空：NullReferenceException
            </summary>
            <param name="xmlHelper">XML数据字符串</param>
            <returns>返回XmlParse对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.SetDeclaration(System.String,System.String,System.String)">
            <summary>
            设置XML的Declaration
            </summary>
            <param name="version">XML版本</param>
            <param name="encoding">XML编码</param>
            <param name="standalone">XML是否关联外部约束文件</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.GetDeclaration(System.String@,System.String@,System.String@)">
            <summary>
            返回XML的Declaration
            </summary>
            <param name="version">返回XML版本</param>
            <param name="encoding">返回XML编码</param>
            <param name="standalone">返回XML是否关联外部约束文件</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.GetAllComments">
            <summary>
            以迭代方式依次返回XML文档所有注释
            </summary>
            <returns>返回注释字符串</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.AppendComment(System.Collections.Generic.List{System.String})">
            <summary>
            添加注释到XML文档尾部（不删除已有的注释）
            </summary>
            <param name="values">要添加的注释信息列表</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.InsertFirstComment(System.Collections.Generic.List{System.String})">
            <summary>
            添加注释到XML文档首部（不删除已有的注释）
            </summary>
            <param name="values">要添加的注释信息列表</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.RemoveAllComment">
            <summary>
            删除XML文档所有注释,不删除子节点的注释
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.GetRoot">
            <summary>
            返回根元素
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.SetRoot(System.String,System.Object)">
            <summary>
            设置根元素
            </summary>
            <param name="name">元素名称</param>
            <param name="value">元素值</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.SetRoot(MetaFly.Summer.IO.XmlVisitor)">
            <summary>
            设置根元素
            </summary>
            <param name="name">元素名称</param>
            <param name="value">元素值</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.RemoveRoot">
            <summary>
            删除根元素(此操作将删除所有节点)
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlFileHelper.Save2File(System.String)">
            <summary>
            保存XML至文件
            函数可能抛出以下异常及其他异常：
            文件名为空：throw FileNotFoundException
            </summary>
            <param name="fileName"></param>
            <returns>返回操作结果</returns>
        </member>
        <member name="T:MetaFly.Summer.IO.XmlVisitorBase">
            <summary>
            XML访问接口
            </summary>
        </member>
        <member name="T:MetaFly.Summer.IO.XmlAttrVisitor">
            <summary>
            XML属性访问类
            </summary>
        </member>
        <member name="F:MetaFly.Summer.IO.XmlAttrVisitor.eleXML">
            <summary>
            使用XAttribute保存Attr数据
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlAttrVisitor.#ctor(System.Xml.Linq.XAttribute)">
            <summary>
            参数为XElement的构造函数
            </summary>
            <param name="xEle">XElement参数</param>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlAttrVisitor.Name">
            <summary>
            元素名称
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlAttrVisitor.Parent">
            <summary>
            返回当前节点的父节点，如果没有，则返回null；
            </summary>
            <returns></returns>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlAttrVisitor.Value">
            <summary>
            元素值
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlAttrVisitor.Prev(System.String)">
            <summary>
            返回当前节点的上一个指定名称的元素（同级节点）
            name为空不考虑名称限制
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlAttrVisitor.Next(System.String)">
            <summary>
            返回当前节点的下一个指定名称的元素（同级节点）
            name为空不考虑名称限制
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlAttrVisitor.LineNumber">
            <summary>
            文件中所在行号
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlAttrVisitor.LinePostion">
            <summary>
            文件中行所在位置
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlAttrVisitor.Create(System.Xml.Linq.XAttribute)">
            <summary>
            根据XElement创建XML访问类对象
            </summary>
            <param name="xEle"></param>
            <returns>XML访问类对象</returns>
        </member>
        <member name="T:MetaFly.Summer.IO.XmlVisitor">
            <summary>
            XML元素访问类，一个XmlVisitor实例代表Xml文档的一个节点，对此节点的操作共有以下几类：
            （1）新增操作：
            Insert——在当前节点前面插入一个节点；
            Append——在当前节点后面追加一个节点；
            InsertFirstChild——在当前节点中插入一个孩子节点到第一个位置；
            AppendChild——在当前节点中追加一个孩子节点到最后一个位置；
            （2）修改操作：
            UpdateAttribute——针对当前节点的属性修改操作；
            （3）删除操作：
            Remove——删除当前节点；
            RemoveChildren——删除当前节点的所有孩子节点；
            （4）路径操作：
            Parent——当前节点的父节点；
            Prev——当前节点的前一个兄弟节点；
            Next——当前节点的后一个兄弟节点；
            Children——当前节点的子节点（不包括孙子等下级节点）
            （5）路径操作的增强操作：
            FirstChild——当前节点的第一个孩子节点；
            LastChild——当前节点的最后一个孩子节点；
            （6）属性操作
            GetAttribute——获得当前节点的某个属性值
            GetAllAttributes——获得当前节点的所有属性键值对
            RemoveAttribute——删除当前节点的指定属性；
            UpdateAttribute——更新当前节点的指定属性值；
            （7）注释类操作
            （8）运算符重载
            </summary>
            <remark>
            公司：CASCO
            作者：张广宇
            创建日期：2013-4-8
            </remark>
        </member>
        <member name="F:MetaFly.Summer.IO.XmlVisitor.eleXML">
            <summary>
            使用XDocument保存XML数据
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.#ctor(System.Xml.Linq.XElement)">
            <summary>
            参数为XElement的构造函数
            </summary>
            <param name="xEle">XElement参数</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Create(System.Xml.Linq.XElement)">
            <summary>
            根据XElement创建XML访问类对象
            </summary>
            <param name="xEle"></param>
            <returns>XML访问类对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Create(System.String,System.Object)">
            <summary>
            根据名称和值创建XML访问类对象
            </summary>
            <param name="name">元素名称</param>
            <param name="value">元素值</param>
            <returns>XML访问类对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Create(MetaFly.Summer.IO.XmlVisitor)">
            <summary>
            根据XmlVisitor创建XML访问类对象
            </summary>
            <param name="xVisitor"></param>
            <returns>XML访问类对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Comments">
            <summary>
            以迭代方式依次返回所有注释
            </summary>
            <returns>返回注释字符串</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.AppendComment(System.Collections.Generic.List{System.String})">
            <summary>
            添加注释到尾部(不删除已有的注释)
            </summary>
            <param name="values">要添加的注释信息列表</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.InsertFirstComment(System.Collections.Generic.List{System.String})">
            <summary>
            添加注释到首部(不删除已有的注释)
            </summary>
            <param name="values">要添加的注释信息列表</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.RemoveAllComment">
            <summary>
            删除所有注释(不删除子节点的注释)
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlVisitor.Parent">
            <summary>
            返回当前节点的父节点，如果是根节点，则返回null；
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Prev(System.String)">
            <summary>
            返回当前节点的上一个指定名称的元素（同级节点）
            name为空不考虑名称限制
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Next(System.String)">
            <summary>
            返回当前节点的下一个指定名称的元素（同级节点）
            name为空不考虑名称限制
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Children">
            <summary>
            获得当前节点下的所有子节点（不包括孙子及以下级别节点），如果为空返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.FilterChildren(System.String)">
            <summary>
            过滤当前节点下指定名称的所有子节点（不包括孙子及以下级别节点），如果为空返回null。
            如果name为空不考虑名称限制，等同于Children函数；
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.FirstChild(System.String)">
            <summary>
            返回当前节点的子节点集合中的第一个元素
            name为空不考虑名称限制
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.LastChild(System.String)">
            <summary>
            返回当前节点的子节点集合中的最后一个元素
            name为空不考虑名称限制
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Ancestors(System.String)">
            <summary>
            以迭代方式依次返回所有父元素（不含自身）
            name为空不考虑名称限制
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.AncestorsAndSelf(System.String)">
            <summary>
            以迭代方式依次返回所有父元素（含自身）
            name为空不考虑名称限制
            </summary>
            <param name="name">元素名称</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.DescendantsAndSelf(System.String)">
            <summary>
            返回经过筛选的元素集合，这些元素包含此元素以及此元素的所有子代元素，并按文档顺序排列它们。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Descendants(System.String)">
            <summary>
            按文档顺序返回此文档或元素的子代元素集合。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.FirstChildByPath(System.String)">
            <summary>
            根据XPath返回首个元素,XPath格式为:名称1.子名称2.子名称3
            当查找不到时返回为空
            </summary>
            <param name="path">元素相对路径，以.号间隔路径</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.ChildrenByPath(System.String)">
            <summary>
            根据XPath返回元素列表,XPath格式为:名称1.子名称2.子名称3。支持XPath表达式,连续的返回多级父标签时，'.'和'/'不能混用
            当查找不到时返回为空
            </summary>
            <param name="path">元素相对路径</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.PathRestore(System.String)">
            <summary>
            还原Path，解决XPath中‘.’符号被‘/’替换不能使用‘..’
            类似于C#中路径的@符，XML提供一个$符，用于指示其后的路径不用进行'.'到'/'的转换
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.ChildrenByPath2(System.String)">
            <summary>
            兼容child取节点和multichild取属性
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.ChildrenByPath3(System.String)">
            <summary>
            兼容child取节点和multichildignorecase取属性
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.AppendChild(System.String,System.Object)">
            <summary>
            在当前节点下添加子元素至尾部
            </summary>
            <param name="name">元素名称</param>
            <param name="value">元素值</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.InsertFirstChild(System.String,System.Object)">
            <summary>
            在当前节点下添加子元素至首部
            </summary>
            <param name="name">元素名称</param>
            <param name="value">元素值</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Append(System.String,System.Object)">
            <summary>
            在当前节点之后添加元素
            </summary>
            <param name="name">元素名称</param>
            <param name="value">元素值</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Insert(System.String,System.Object)">
            <summary>
            在当前节点之前位置添加元素
            </summary>
            <param name="name">元素名称</param>
            <param name="value">元素值</param>
            <returns>返回XMLVisitor对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.AppendChild(MetaFly.Summer.IO.XmlVisitor)">
            <summary>
            在当前节点下添加XmlVisitor子元素对象至尾部
            </summary>
            <param name="xmlVisitor">XmlVisitor对象</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.AppendChild(System.Collections.Generic.IEnumerable{MetaFly.Summer.IO.XmlVisitor})">
            <summary>
            在当前节点下添加XmlVisitor子元素对象至尾部
            </summary>
            <param name="xmlVisitors">XmlVisitor对象集</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.InsertFirstChild(MetaFly.Summer.IO.XmlVisitor)">
            <summary>
            在当前节点下添加XmlVisitor子元素至首部
            </summary>
            <param name="xmlVisitor">XmlVisitor对象</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Insert(MetaFly.Summer.IO.XmlVisitor)">
            <summary>
            在当前节点之后位置添加元素（同级元素添加）
            </summary>
            <param name="xmlVisitor">XmlVisitor对象</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Append(MetaFly.Summer.IO.XmlVisitor)">
            <summary>
            在当前节点之前位置添加元素（同级元素添加）
            </summary>
            <param name="xmlVisitor">XmlVisitor对象</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.SetValue(System.Object)">
            <summary>
            设置当前节点的值
            </summary>
            <param name="value">节点值</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.Remove">
            <summary>
            删除当前元素
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.RemoveChildren">
            <summary>
            删除所有子元素,不删除属性
            </summary>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.GetAttribute(System.String)">
            <summary>
            获得当前节点的某个属性值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MetaFly.Summer.IO.XmlVisitor.GetAllAttributes" -->
        <member name="M:MetaFly.Summer.IO.XmlVisitor.UpdateAttribute(System.String,System.Object)">
            <summary>
            设置当前节点的某个属性值
            </summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.UpdateAttribute(System.String,System.String,System.Object)">
            <summary>
            设置当前节点的某个属性值(在指定命名空间下）
            </summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.RemoveAttribute(System.String)">
            <summary>
            删除当前节点的某个属性值，当name为空时删除所有属性
            </summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.RemoveAttribute(System.String,System.String)">
            <summary>
            删除当前节点的某个属性值，当name为空时删除所有属性(在Xmlns命名空间下）
            </summary>
            <param name="spacename">命名空间</param>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlVisitor.LineNumber">
            <summary>
            文件中所在行号
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlVisitor.LinePostion">
            <summary>
            文件中行所在位置
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlVisitor.Name">
            <summary>
            元素名称
            </summary>
        </member>
        <member name="P:MetaFly.Summer.IO.XmlVisitor.Value">
            <summary>
            元素值
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MetaFly.Summer.IO.XmlVisitor.HasChildren" -->
        <member name="M:MetaFly.Summer.IO.XmlVisitor.ChildrenNumber">
            <summary>
            判断是否含有子元素
            </summary>
            <returns>含有，则返回子标签个数</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.op_Explicit(MetaFly.Summer.IO.XmlVisitor)~System.String">
            <summary>
            强制转换为string，未处理底层异常
            </summary>
            <param name="xVisitor">XML访问类</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.op_Explicit(MetaFly.Summer.IO.XmlVisitor)~System.Int32">
            <summary>
            强制转换为int，未处理底层异常
            </summary>
            <param name="xVisitor">XML访问类</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.op_Explicit(MetaFly.Summer.IO.XmlVisitor)~System.Boolean">
            <summary>
            强制转换为bool，未处理底层异常
            </summary>
            <param name="xVisitor">XML访问类</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.op_Explicit(MetaFly.Summer.IO.XmlVisitor)~System.Double">
            <summary>
            强制转换为double，未处理底层异常
            </summary>
            <param name="xVisitor">XML访问类</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlVisitor.op_Explicit(MetaFly.Summer.IO.XmlVisitor)~System.DateTime">
            <summary>
            强制转换为DateTime，未处理底层异常
            </summary>
            <param name="xVisitor">XML访问类</param>
            <returns></returns>
        </member>
        <member name="T:MetaFly.Summer.IO.XmlOperator">
            <summary>
            XML操作类
            </summary>
            <remark>
            公司：CASCO
            作者：张广宇
            创建日期：2013-4-15
            </remark>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlOperator.CreateXmlElement(System.String,System.Object)">
            <summary>
            根据name和value创建XElemet
            </summary>
            <param name="name">元素名称</param>
            <param name="value">元素值</param>
            <returns>返回XElement对象</returns>
        </member>
        <member name="M:MetaFly.Summer.IO.XmlOperator.CreateXmlElement(System.String,System.String,System.Object)">
            <summary>
            根据name和value创建XElemet
            </summary>
            <param name="name">元素名称</param>
            <param name="value">元素值</param>
            <returns>返回XElement对象</returns>
        </member>
        <member name="T:MetaFly.ErrorInfo">
            <summary>
            错误信息类
            </summary>
        </member>
        <member name="P:MetaFly.ErrorInfo.Info">
            <summary>
            错误描述
            </summary>
        </member>
        <member name="P:MetaFly.ErrorInfo.ErrObj">
            <summary>
            错误出现处的解释定义
            </summary>
        </member>
        <member name="P:MetaFly.ErrorInfo.LineInfo">
            <summary>
            描述所在行信息
            </summary>
        </member>
        <member name="P:MetaFly.ErrorInfo.DescribeInfo">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="M:MetaFly.ErrorInfo.#ctor(MetaFly.IAnalysisDescribe,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errobj">解释定义</param>
            <param name="inf">错误描述</param>
        </member>
        <member name="T:MetaFly.IAnalysisDescribe">
            <summary>
            解释描述接口定义
            </summary>
        </member>
        <member name="P:MetaFly.IAnalysisDescribe.DescribeObj">
            <summary>
            解释对象
            </summary>
        </member>
        <member name="P:MetaFly.IAnalysisDescribe.DescribeLineNo">
            <summary>
            解释对象所在行
            </summary>
        </member>
        <member name="P:MetaFly.IAnalysisDescribe.DescribeStr">
            <summary>
            解释对象字符串形式
            </summary>
        </member>
        <member name="P:MetaFly.IAnalysisDescribe.FileName">
            <summary>
            解释定义所在文件
            </summary>
        </member>
        <member name="T:MetaFly.ResultCode`1">
            <summary>
            计算结果模板类
            </summary>
            <typeparam name="T">类型名称</typeparam>
        </member>
        <member name="T:MetaFly.ResultCode`1.CodeStyle">
            <summary>
            结果枚举
            </summary>
        </member>
        <member name="P:MetaFly.ResultCode`1.Code">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:MetaFly.ResultCode`1.OK">
            <summary>
            是否成功属性
            </summary>
        </member>
        <member name="P:MetaFly.ResultCode`1.Result">
            <summary>
            计算结果
            </summary>
        </member>
        <member name="P:MetaFly.ResultCode`1.Infolist">
            <summary>
            错误信息追踪信息列表
            </summary>
        </member>
        <member name="F:MetaFly.ResultCode`1.ErrorInfoDesc">
            <summary>
            错误信息描述
            </summary>
        </member>
        <member name="F:MetaFly.ResultCode`1.successFR">
            <summary>
            成功静态变量
            </summary>
        </member>
        <member name="F:MetaFly.ResultCode`1.failFR">
            <summary>
            失败静态变量
            </summary>
        </member>
        <member name="M:MetaFly.ResultCode`1.#ctor(`0)">
            <summary>
            构造函数，生成成功对象
            </summary>
            <param name="item">计算结果</param>
        </member>
        <member name="M:MetaFly.ResultCode`1.#ctor(MetaFly.IAnalysisDescribe,System.String)">
            <summary>
            构造函数，生成失败对象
            </summary>
            <param name="errobj">解释定义</param>
            <param name="info">错误信息</param>
        </member>
        <member name="M:MetaFly.ResultCode`1.#ctor(MetaFly.ResultCode{`0})">
            <summary>
            复制构造函数
            </summary>
            <param name="rc">被复制对象</param>
        </member>
        <member name="M:MetaFly.ResultCode`1.Append(MetaFly.IAnalysisDescribe,System.String)">
            <summary>
            添加错误信息
            </summary>
            <param name="errobj">解释定义</param>
            <param name="info">错误信息</param>
        </member>
        <member name="M:MetaFly.ResultCode`1.AppendFormat(MetaFly.IAnalysisDescribe,System.String,System.Object[])">
            <summary>
            添加错误信息
            </summary>
            <param name="errobj">解释定义</param>
            <param name="format">错误信息格式</param>
            <param name="args">错误信息参数</param>
        </member>
        <member name="P:MetaFly.ResultCode`1.ErrorInfoCount">
            <summary>
            返回出错信息个数
            </summary>
        </member>
        <member name="P:MetaFly.ResultCode`1.ErrorLineNumber">
            <summary>
            返回首次出错信息相关描述所在行
            </summary>
            <returns>行号</returns>
        </member>
        <member name="M:MetaFly.ResultCode`1.PackErrorInfo(System.Boolean,System.Int32,System.Int32)">
            <summary>
            打包某条整理出错信息
            </summary>
            <param name="showstack">是否显示堆栈</param>
            <param name="showdescribe">是否显示描述,0:不显示；1：显示第一条；2：显示全部</param>
            <param name="index">索引</param>
            <returns>出错信息</returns>
        </member>
        <member name="M:MetaFly.ResultCode`1.PackErrorInfo(System.Boolean,System.Int32)">
            <summary>
            打包整理出错信息
            </summary>
            <param name="showstack">是否显示堆栈</param>
            <param name="showdescribe">是否显示描述,0:不显示；1：显示第一条；2：显示全部</param>
            <returns>出错信息</returns>
        </member>
        <member name="M:MetaFly.ResultCode`1.WriteInfo">
            <summary>
            打印输出错误追踪信息
            </summary>
        </member>
        <member name="M:MetaFly.ResultCode`1.WriteInfo(System.IO.StreamWriter)">
            <summary>
            打印输出错误追踪信息
            </summary>
            <param name="sw">日志文件句柄</param>
            <param name="toconsole">是否输出至控制台</param>
        </member>
        <member name="M:MetaFly.ResultCode`1.WriteInfo(System.IO.StreamWriter,System.Boolean)">
            <summary>
            打印输出错误追踪信息
            </summary>
            <param name="sw">日志文件句柄</param>
            <param name="toconsole">是否输出至控制台</param>
            <param name="tolog">是否输出至log日志</param>
        </member>
        <member name="M:MetaFly.ResultCode`1.IsContextChanged(System.Int32)">
            <summary>
            检查是否是最后一个同关联性的定义描述
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:MetaFly.ResultCode`1.Create">
            <summary>
            生成成功的对象
            </summary>
            <returns>计算结果</returns>
        </member>
        <member name="M:MetaFly.ResultCode`1.Create(`0)">
            <summary>
            根据计算结果生成对象
            </summary>
            <param name="item">计算数据</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:MetaFly.ResultCode`1.Create(MetaFly.IAnalysisDescribe,System.String,System.Object[])">
            <summary>
            生成失败的对象
            </summary>
            <param name="errobj">解释定义</param>
            <param name="format">错误信息格式定义</param>
            <param name="args">错误信息参数描述</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:MetaFly.ResultCode`1.Clone">
            <summary>
            复制对象
            </summary>
            <returns>复制对象</returns>
        </member>
        <member name="M:MetaFly.ResultCode`1.op_Explicit(MetaFly.ResultCode{`0})~System.Boolean">
            <summary>
            强制转换为布尔类型
            </summary>
            <param name="rs">计算结果</param>
            <returns>布尔值</returns>
        </member>
        <member name="T:MetaFly.FunctionResult">
            <summary>
            实例化计算结果类
            </summary>
        </member>
        <member name="M:MetaFly.FunctionResult.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:MetaFly.FunctionResult.#ctor(MetaFly.Datum.Element.TermItem)">
            <summary>
            构造函数
            </summary>
            <param name="item">TermItem对象</param>
        </member>
        <member name="M:MetaFly.FunctionResult.#ctor(MetaFly.FunctionResult)">
            <summary>
            复制构造函数
            </summary>
            <param name="rc">被复制对象</param>
        </member>
        <member name="M:MetaFly.FunctionResult.#ctor(MetaFly.IAnalysisDescribe,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errobj">解释定义</param>
            <param name="info">错误信息</param>
        </member>
        <member name="M:MetaFly.FunctionResult.Create">
            <summary>
            生成成功的对象
            </summary>
            <returns>计算结果</returns>
        </member>
        <member name="M:MetaFly.FunctionResult.Create(MetaFly.Datum.Element.TermItem)">
            <summary>
            根据计算结果生成对象
            </summary>
            <param name="item">计算数据</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:MetaFly.FunctionResult.Create(MetaFly.IAnalysisDescribe,System.String,System.Object[])">
            <summary>
            生成失败的对象
            </summary>
            <param name="errobj">解释定义</param>
            <param name="format">错误信息格式定义</param>
            <param name="args">错误信息参数描述</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:MetaFly.FunctionResult.Create(System.String)">
            <summary>
            生成失败的对象
            </summary>
            <param name="args">错误信息描述</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:MetaFly.FunctionResult.Create(MetaFly.Datum.Figure.MetaData)">
            <summary>
            根据计算结果生成对象
            </summary>
            <param name="item">计算数据</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:MetaFly.FunctionResult.Clone">
            <summary>
            复制对象
            </summary>
            <returns>复制对象</returns>
        </member>
        <member name="M:MetaFly.FunctionResult.op_Implicit(MetaFly.FunctionResult)~System.Boolean">
            <summary>
            隐式转换
            </summary>
            <param name="result"></param>
        </member>
    </members>
</doc>
